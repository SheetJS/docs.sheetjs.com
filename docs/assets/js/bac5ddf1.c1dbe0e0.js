"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1748],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=l,h=c["".concat(o,".").concat(m)]||c[m]||d[m]||r;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:l,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),l=n(4334);const r="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,i),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(7462),l=n(7294),r=n(4334),i=n(2389),s=n(7392),o=n(7094),p=n(2466);const u="tabList__CuJ",d="tabItem_LNqP";function c(e){var t,n;const{lazy:i,block:c,defaultValue:m,values:h,groupId:k,className:f}=e,g=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=h?h:g.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),S=(0,s.l)(b,((e,t)=>e.value===t.value));if(S.length>0)throw new Error('Docusaurus error: Duplicate values "'+S.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const y=null===m?m:null!=(t=null!=m?m:null==(n=g.find((e=>e.props.default)))?void 0:n.props.value)?t:g[0].props.value;if(null!==y&&!b.some((e=>e.value===y)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+b.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:v,setTabGroupChoices:j}=(0,o.U)(),[N,w]=(0,l.useState)(y),x=[],{blockElementScrollPositionUntilNextRender:C}=(0,p.o5)();if(null!=k){const e=v[k];null!=e&&e!==N&&b.some((t=>t.value===e))&&w(e)}const _=e=>{const t=e.currentTarget,n=x.indexOf(t),a=b[n].value;a!==N&&(C(t),w(a),null!=k&&j(k,String(a)))},J=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=x.indexOf(e.currentTarget)+1;n=null!=(a=x[t])?a:x[0];break}case"ArrowLeft":{var l;const t=x.indexOf(e.currentTarget)-1;n=null!=(l=x[t])?l:x[x.length-1];break}}null==(t=n)||t.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",u)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":c},f)},b.map((e=>{let{value:t,label:n,attributes:i}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>x.push(e),onKeyDown:J,onFocus:_,onClick:_},i,{className:(0,r.Z)("tabs__item",d,null==i?void 0:i.className,{"tabs__item--active":N===t})}),null!=n?n:t)}))),i?(0,l.cloneElement)(g.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function m(e){const t=(0,i.Z)();return l.createElement(c,(0,a.Z)({key:String(t)},e))}},15:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7462),l=(n(7294),n(3905));n(5488),n(5162);const r={sidebar_position:18,title:"JavaScript Engines"},i=void 0,s={unversionedId:"demos/engines",id:"demos/engines",title:"JavaScript Engines",description:"The most popular JavaScript engine is V8.  Designed for embedding in software,",source:"@site/docs/03-demos/18-engines.md",sourceDirName:"03-demos",slug:"/demos/engines",permalink:"/docs/demos/engines",draft:!1,tags:[],version:"current",sidebarPosition:18,frontMatter:{sidebar_position:18,title:"JavaScript Engines"},sidebar:"tutorialSidebar",previous:{title:"Clipboard Data",permalink:"/docs/demos/clipboard"},next:{title:"iOS and Android Apps",permalink:"/docs/demos/mobile"}},o={},p=[{value:"General Caveats",id:"general-caveats",level:2},{value:"Duktape",id:"duktape",level:2},{value:"Goja",id:"goja",level:2},{value:"Hermes",id:"hermes",level:2},{value:"JavaScriptCore",id:"javascriptcore",level:2},{value:"JerryScript",id:"jerryscript",level:2},{value:"QuickJS",id:"quickjs",level:2},{value:"Rhino",id:"rhino",level:2},{value:"Legacy Engines",id:"legacy-engines",level:2},{value:"ChakraCore",id:"chakracore",level:3},{value:"Nashorn",id:"nashorn",level:3}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The most popular JavaScript engine is V8.  Designed for embedding in software,\nit powers Chrome, NodeJS, UXP, Deno and many other platforms and runtimes."),(0,l.kt)("p",null,"There are many other runtimes with different design goals.  Some are designed\nfor low-power or low-memory environments.  Others aim for interoperability with\nspecific programming languages or environments.  Typically they support a\nsuperset of ES3 and are capable of running SheetJS code."),(0,l.kt)("h2",{id:"general-caveats"},"General Caveats"),(0,l.kt)("p",null,"Common browser and NodeJS APIs are often missing from light-weight JS engines."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Global")),(0,l.kt)("p",null,"Some engines do not provide ",(0,l.kt)("inlineCode",{parentName:"p"},"globalThis")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"global")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"window"),".  A ",(0,l.kt)("inlineCode",{parentName:"p"},"global"),"\nvariable can be exposed in one line that should be run in the JS engine:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var global = (function(){ return this; }).call(null);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Console")),(0,l.kt)("p",null,"Some engines do not provide a ",(0,l.kt)("inlineCode",{parentName:"p"},"console")," object.  ",(0,l.kt)("inlineCode",{parentName:"p"},"console.log")," can be shimmed\nusing the engine functionality.  For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"hermes")," provides ",(0,l.kt)("inlineCode",{parentName:"p"},"print()"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var console = { log: function(x) { print(x); } };\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Binary Data")),(0,l.kt)("p",null,"Some engines do not provide easy ways of marshalling binary data.  For example,\nit is common to pass null-terminated arrays, which would truncate XLSX and XLS\nfiles.  APIs that accept pointers without length should be avoided."),(0,l.kt)("p",null,"Base64 strings are safe for passing between JS and native code, but they should\nonly be used when there is no safe way to pass ",(0,l.kt)("inlineCode",{parentName:"p"},"ArrayBuffer")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"Uint8Array"),"."),(0,l.kt)("h2",{id:"duktape"},"Duktape"),(0,l.kt)("p",null,"Duktape is an embeddable JS engine written in C. It has been ported to a number\nof exotic architectures and operating systems."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Reading data")),(0,l.kt)("p",null,"Duktape supports ",(0,l.kt)("inlineCode",{parentName:"p"},"Buffer")," natively but should be sliced before processing:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'/* parse a C char array as a workbook object */\nduk_push_external_buffer(ctx);\nduk_config_buffer(ctx, -1, buf, len);\nduk_put_global_string(ctx, "buf");\nduk_eval_string_noresult("workbook = XLSX.read(buf.slice(0, buf.length), {type:\'buffer\'});");\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Writing data")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"duk_get_buffer_data")," can pull ",(0,l.kt)("inlineCode",{parentName:"p"},"Buffer")," object data into the C code:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"/* write a workbook object to a C char array */\nduk_eval_string(ctx, \"XLSX.write(workbook, {type:'array', bookType:'xlsx'})\");\nduk_size_t sz;\nchar *buf = (char *)duk_get_buffer_data(ctx, -1, sz);\nduk_pop(ctx);\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Complete Example")," (click to show)"),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"This demo was tested on MacOS x64.")),(0,l.kt)("p",null,"0) Download and extract the latest release (2.7.0 at the time of writing)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl -LO https://duktape.org/duktape-2.7.0.tar.xz\ntar -xJf duktape-2.7.0.tar.xz\nmv duktape-2.7.0/src/*.{c,h} .\n")),(0,l.kt)("p",null,"1) Download the standalone script, shim and test file:"),(0,l.kt)("ul",null,(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"},"xlsx.full.min.js")),(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://cdn.sheetjs.com/xlsx-latest/package/dist/shim.min.js"},"shim.min.js")),(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://sheetjs.com/pres.numbers"},"pres.numbers"))),(0,l.kt)("p",null,"2) Save the following script to ",(0,l.kt)("inlineCode",{parentName:"p"},"sheetjs.duk.c"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c",metastring:'title="sheetjs.duk.c"',title:'"sheetjs.duk.c"'},'/* sheetjs (C) 2013-present  SheetJS -- http://sheetjs.com */\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include "duktape.h"\n\n#define FAIL_LOAD { \\\n  duk_push_undefined(ctx); \\\n  perror("Error in load_file"); \\\n  return 1; \\\n}\n\nstatic char *read_file(const char *filename, size_t *sz) {\n  FILE *f = fopen(filename, "rb");\n  if(!f) return NULL;\n  long fsize; { fseek(f, 0, SEEK_END); fsize = ftell(f); fseek(f, 0, SEEK_SET); }\n  char *buf = (char *)malloc(fsize * sizeof(char));\n  *sz = fread((void *) buf, 1, fsize, f);\n  fclose(f);\n  return buf;\n}\n\nstatic duk_int_t eval_file(duk_context *ctx, const char *filename) {\n  size_t len; char *buf = read_file(filename, &len);\n  if(!buf) FAIL_LOAD\n\n  duk_push_lstring(ctx, (const char *)buf, (duk_size_t)len);\n  duk_int_t retval = duk_peval(ctx);\n  duk_pop(ctx);\n  return retval;\n}\n\nstatic duk_int_t load_file(duk_context *ctx, const char *filename, const char *var) {\n  size_t len; char *buf = read_file(filename, &len);\n  if(!buf) FAIL_LOAD\n\n  duk_push_external_buffer(ctx);\n  duk_config_buffer(ctx, -1, buf, len);\n  duk_put_global_string(ctx, var);\n  return 0;\n}\n\nstatic duk_int_t save_file(duk_context *ctx, const char *filename, const char *var) {\n  duk_get_global_string(ctx, var);\n  duk_size_t sz;\n  char *buf = (char *)duk_get_buffer_data(ctx, -1, &sz);\n\n  if(!buf) return 1;\n  FILE *f = fopen(filename, "wb"); fwrite(buf, 1, sz, f); fclose(f);\n  return 0;\n}\n\n#define FAIL(cmd) { \\\n  printf("error in %s: %s\\n", cmd, duk_safe_to_string(ctx, -1)); \\\n  duk_destroy_heap(ctx); \\\n  return res; \\\n}\n\n#define DOIT(cmd) duk_eval_string_noresult(ctx, cmd);\nint main(int argc, char *argv[]) {\n  duk_int_t res = 0;\n\n  /* initialize */\n  duk_context *ctx = duk_create_heap_default();\n  /* duktape does not expose a standard "global" by default */\n  DOIT("var global = (function(){ return this; }).call(null);");\n\n  /* load library */\n  res = eval_file(ctx, "shim.min.js");\n  if(res != 0) FAIL("shim load")\n  res = eval_file(ctx, "xlsx.full.min.js");\n  if(res != 0) FAIL("library load")\n\n  /* get version string */\n  duk_eval_string(ctx, "XLSX.version");\n  printf("SheetJS library version %s\\n", duk_get_string(ctx, -1));\n  duk_pop(ctx);\n\n  /* read file */\n  res = load_file(ctx, argv[1], "buf");\n  if(res != 0) FAIL("file load")\n  printf("Loaded file %s\\n", argv[1]);\n\n  /* parse workbook */\n  DOIT("wb = XLSX.read(buf.slice(0, buf.length), {type:\'buffer\'});");\n  DOIT("ws = wb.Sheets[wb.SheetNames[0]]");\n\n  /* print CSV */\n  duk_eval_string(ctx, "XLSX.utils.sheet_to_csv(ws)");\n  printf("%s\\n", duk_get_string(ctx, -1));\n  duk_pop(ctx);\n\n  /* write file */\n#define WRITE_TYPE(BOOKTYPE) \\\n  DOIT("newbuf = (XLSX.write(wb, {type:\'array\', bookType:\'" BOOKTYPE "\'}));");\\\n  res = save_file(ctx, "sheetjsw." BOOKTYPE, "newbuf");\\\n  if(res != 0) FAIL("save sheetjsw." BOOKTYPE)\n\n  WRITE_TYPE("xlsb")\n\n  /* cleanup */\n  duk_destroy_heap(ctx);\n  return res;\n}\n')),(0,l.kt)("p",null,"3) Compile standalone ",(0,l.kt)("inlineCode",{parentName:"p"},"sheetjs.duk")," binary"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"gcc -std=c99 -Wall -osheetjs.duk sheetjs.duk.c duktape.c -lm\n")),(0,l.kt)("p",null,"4) Run the demo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./sheetjs.duk pres.numbers\n")),(0,l.kt)("p",null,"If the program succeeded, the CSV contents will be printed to console and the\nfile ",(0,l.kt)("inlineCode",{parentName:"p"},"sheetjsw.xlsb")," will be created.  That file can be opened with Excel.")),(0,l.kt)("h2",{id:"goja"},"Goja"),(0,l.kt)("p",null,"Goja is a pure Go implementation of ECMAScript 5. It supports the standalone\nscripts out of the box."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Reading data")),(0,l.kt)("p",null,"Files can be read into ",(0,l.kt)("inlineCode",{parentName:"p"},"[]byte"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'/* read file */\ndata, _ := ioutil.ReadFile("sheetjs.xlsx")\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"[]byte")," should be converted to an ",(0,l.kt)("inlineCode",{parentName:"p"},"ArrayBuffer")," from Go:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'/* load into engine */\nvm.Set("buf", vm.ToValue(vm.NewArrayBuffer(data)))\n\n/* parse */\nwb, _ = vm.RunString("wb = XLSX.read(buf, {type:\'buffer\'});")\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Writing data")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},'"base64"')," strings can be decoded in Go:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"/* write to base64 string */\nb64str, _ := vm.RunString(\"XLSX.write(wb, {type:'base64', bookType:'xlsx'})\")\n\n/* pull data back into Go and write to file */\nbuf, _ := base64.StdEncoding.DecodeString(b64str.String())\n_ = ioutil.WriteFile(\"sheetjs.xlsx\", buf, 0644)\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Complete Example")," (click to show)"),(0,l.kt)("p",null,"0) Install Go"),(0,l.kt)("p",null,"1) Create a ",(0,l.kt)("inlineCode",{parentName:"p"},"go.mod")," file and install dependencies:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"go mod init SheetGoja\ngo get github.com/dop251/goja\n")),(0,l.kt)("p",null,"2) Download the standalone script and the shim:"),(0,l.kt)("ul",null,(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"},"xlsx.full.min.js")),(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://cdn.sheetjs.com/xlsx-latest/package/dist/shim.min.js"},"shim.min.js"))),(0,l.kt)("p",null,"3) Save the following code to ",(0,l.kt)("inlineCode",{parentName:"p"},"SheetGoja.go"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="SheetGoja.go"',title:'"SheetGoja.go"'},'package main\n\nimport (\n  b64 "encoding/base64"\n  "fmt"\n  "os"\n  "io/ioutil"\n  "github.com/dop251/goja"\n)\n\nfunc safe_run_file(vm *goja.Runtime, file string) {\n  data, err := ioutil.ReadFile(file)\n  if err != nil { panic(err) }\n  src := string(data)\n  _, err = vm.RunString(src)\n  if err != nil { panic(err) }\n}\n\nfunc eval_string(vm *goja.Runtime, cmd string) goja.Value {\n  v, err := vm.RunString(cmd)\n  if err != nil { panic(err) }\n  return v\n}\n\nfunc write_type(vm *goja.Runtime, t string) {\n  b64str := eval_string(vm, "XLSX.write(wb, {type:\'base64\', bookType:\'" + t + "\'})")\n  buf, err := b64.StdEncoding.DecodeString(b64str.String());\n  if err != nil { panic(err) }\n  err = ioutil.WriteFile("sheetjsg." + t, buf, 0644)\n  if err != nil { panic(err) }\n}\n\nfunc main() {\n  vm := goja.New()\n\n  /* initialize */\n  eval_string(vm, "if(typeof global == \'undefined\') global = (function(){ return this; }).call(null);")\n\n  /* load library */\n  safe_run_file(vm, "shim.min.js")\n  safe_run_file(vm, "xlsx.full.min.js")\n\n  /* get version string */\n  v := eval_string(vm, "XLSX.version")\n  fmt.Printf("SheetJS library version %s\\n", v)\n\n  /* read file */\n  data, err := ioutil.ReadFile(os.Args[1])\n  if err != nil { panic(err) }\n  vm.Set("buf", vm.ToValue(vm.NewArrayBuffer(data)))\n  fmt.Printf("Loaded file %s\\n", os.Args[1])\n\n  /* parse workbook */\n  eval_string(vm, "wb = XLSX.read(buf, {type:\'buffer\'});")\n  fmt.Printf("Parsed %s\\n", os.Args[1])\n  eval_string(vm, "ws = wb.Sheets[wb.SheetNames[0]]")\n  fmt.Printf("Grabbed %s\\n", os.Args[1])\n\n  /* print CSV */\n  csv := eval_string(vm, "XLSX.utils.sheet_to_csv(ws)")\n  fmt.Printf("%s\\n", csv)\n\n  /* write file */\n  write_type(vm, "csv")\n}\n')),(0,l.kt)("p",null,"4) Build ",(0,l.kt)("inlineCode",{parentName:"p"},"SheetGoja"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"go build SheetGoja.go\n")),(0,l.kt)("p",null,"For testing, download ",(0,l.kt)("a",{parentName:"p",href:"https://sheetjs.com/pres.numbers"},"https://sheetjs.com/pres.numbers")," and run"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./SheetGoja pres.numbers\n")),(0,l.kt)("p",null,"This will print the contents as a CSV to screen AND write to ",(0,l.kt)("inlineCode",{parentName:"p"},"sheetjsg.csv"))),(0,l.kt)("h2",{id:"hermes"},"Hermes"),(0,l.kt)("p",null,"Hermes is an embeddable JS engine for React Native.  The library and binary\ndistributions include a command-line tool ",(0,l.kt)("inlineCode",{parentName:"p"},"hermes")," for running JS scripts."),(0,l.kt)("p",null,"The simplest way to interact with the engine is to pass Base64 strings. The make\ntarget builds a very simple payload with the data."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"The official release includes the ",(0,l.kt)("inlineCode",{parentName:"p"},"hermes")," standalone tool.  While applications\nshould link against the official libraries, the standalone tool is useful for\nverifying functionality.")),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Complete Example")," (click to show)"),(0,l.kt)("p",null,"Due to limitations of the standalone binary, this demo will encode a test file\nas a Base64 string and directly add it to an amalgamated script."),(0,l.kt)("p",null,"0) Install the ",(0,l.kt)("inlineCode",{parentName:"p"},"hermes")," command line tool"),(0,l.kt)("p",null,"1) Download the standalone script, shim, and test file:"),(0,l.kt)("ul",null,(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"},"xlsx.full.min.js")),(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://cdn.sheetjs.com/xlsx-latest/package/dist/shim.min.js"},"shim.min.js")),(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://sheetjs.com/pres.numbers"},"pres.numbers"))),(0,l.kt)("p",null,"2) Bundle the test file and create ",(0,l.kt)("inlineCode",{parentName:"p"},"payload.js"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"node -e \"fs.writeFileSync('payload.js', 'var payload = \\\"' + fs.readFileSync('pres.numbers').toString('base64') + '\\\";')\"\n")),(0,l.kt)("p",null,"3) Create support scripts:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"global.js")," creates a ",(0,l.kt)("inlineCode",{parentName:"li"},"global")," variable and defines a fake ",(0,l.kt)("inlineCode",{parentName:"li"},"console"),":")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="global.js"',title:'"global.js"'},"var global = (function(){ return this; }).call(null);\nvar console = { log: function(x) { print(x); } };\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hermes.js")," will call ",(0,l.kt)("inlineCode",{parentName:"li"},"XLSX.read")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"XLSX.utils.sheet_to_csv"),":")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="hermes.js"',title:'"hermes.js"'},"/* sheetjs (C) 2013-present  SheetJS -- http://sheetjs.com */\nvar wb = XLSX.read(payload, {type:'base64'});\nconsole.log(XLSX.utils.sheet_to_csv(wb.Sheets[wb.SheetNames[0]]));\n")),(0,l.kt)("p",null,"4) Create the amalgamation ",(0,l.kt)("inlineCode",{parentName:"p"},"xlsx.hermes.js"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cat global.js xlsx.full.min.js payload.js hermes.js > xlsx.hermes.js\n")),(0,l.kt)("p",null,"The final script defines ",(0,l.kt)("inlineCode",{parentName:"p"},"global")," before loading the standalone library.  Once\nready, it will read the hardcoded test file and print the contents as CSV."),(0,l.kt)("p",null,"5) Run the script using the Hermes standalone binary:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"hermes xlsx.hermes.js\n"))),(0,l.kt)("h2",{id:"javascriptcore"},"JavaScriptCore"),(0,l.kt)("admonition",{title:"Platform Limitations",type:"warning"},(0,l.kt)("p",{parentName:"admonition"},"JavaScriptCore is primarily deployed in MacOS and iOS applications.  There is\nsome experimental support through the Bun runtime, but production applications\nintending to support Windows / Linux / Android should try to embed V8.")),(0,l.kt)("p",null,"iOS and MacOS ship with the JavaScriptCore framework for running JS code from\nSwift and Objective-C.  Hybrid function invocation is tricky, but explicit data\npassing is straightforward. The demo shows a standalone Swift sample for MacOS."),(0,l.kt)("p",null,"Binary strings can be passed back and forth using ",(0,l.kt)("inlineCode",{parentName:"p"},"String.Encoding.isoLatin1"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Reading data")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"String(contentsOf:encoding:)")," reads from a path and returns an encoded string:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},'/* read sheetjs.xls as base64 string */\nlet file_path = shared_dir.appendingPathComponent("sheetjs.xls");\nlet data: String! = try String(contentsOf: file_path, encoding: String.Encoding.isoLatin1);\n')),(0,l.kt)("p",null,"This string can be loaded into the JS engine and processed:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},'/* load data in JSC */\ncontext.setObject(data, forKeyedSubscript: "payload" as (NSCopying & NSObjectProtocol));\n\n/* `payload` (the "forKeyedSubscript" parameter) is a binary string */\ncontext.evaluateScript("var wb = XLSX.read(payload, {type:\'binary\'});");\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Writing data")),(0,l.kt)("p",null,"When writing to binary string in JSC, the result should be stored in a variable\nand stringified in Swift:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"/* write to binary string */\ncontext.evaluateScript(\"var out = XLSX.write(wb, {type:'binary', bookType:'xlsx'})\");\n\n/* `out` from the script is a binary string that can be stringified in Swift */\nlet outvalue: JSValue! = context.objectForKeyedSubscript(\"out\");\nvar out: String! = outvalue.toString();\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"String#write(to:atomically:encoding)")," writes the string to the specified path:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},'/* write to sheetjsw.xlsx */\nlet out_path = shared_dir.appendingPathComponent("sheetjsw.xlsx");\ntry? out.write(to: out_path, atomically: false, encoding: String.Encoding.isoLatin1);\n')),(0,l.kt)("p",null,"The demo includes a sample ",(0,l.kt)("inlineCode",{parentName:"p"},"SheetJSCore")," Wrapper class to simplify operations."),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Complete Example")," (click to show)"),(0,l.kt)("admonition",{title:"This demo only runs on MacOS",type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"This example requires MacOS + Swift and will not work on Windows or Linux!")),(0,l.kt)("p",null,"0) Ensure Xcode is installed"),(0,l.kt)("p",null,"1) Download the standalone script, the shim and the test file:"),(0,l.kt)("ul",null,(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"},"xlsx.full.min.js")),(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://cdn.sheetjs.com/xlsx-latest/package/dist/shim.min.js"},"shim.min.js")),(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://sheetjs.com/pres.numbers"},"pres.numbers"))),(0,l.kt)("p",null,"2) Download the Swift scripts for the demo"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"pathname:///swift/SheetJSCore.swift"},(0,l.kt)("inlineCode",{parentName:"a"},"SheetJSCore.swift"))," Wrapper library"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"pathname:///swift/main.swift"},(0,l.kt)("inlineCode",{parentName:"a"},"main.swift"))," Command-line script")),(0,l.kt)("p",null,"3) Build the ",(0,l.kt)("inlineCode",{parentName:"p"},"SheetJSwift")," binary:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"swiftc SheetJSCore.swift main.swift -o SheetJSwift\n")),(0,l.kt)("p",null,"4) Test the program:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./SheetJSwift pres.numbers\n")),(0,l.kt)("p",null,"If successful, a CSV will be printed to console. The script also tries to write\nto ",(0,l.kt)("inlineCode",{parentName:"p"},"SheetJSwift.xlsx"),". That file can be verified by opening in Excel / Numbers.")),(0,l.kt)("h2",{id:"jerryscript"},"JerryScript"),(0,l.kt)("p",null,"JerryScript is a lightweight JavaScript engine designed for use in low-memory\nenvironments like microcontrollers.  As part of the build suite, the project\ngenerates a C library and a standalone CLI tool."),(0,l.kt)("p",null,"The simplest way to interact with the engine is to pass Base64 strings."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"While applications should link against the official libraries, the standalone tool\nis useful for verifying functionality.")),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"This demo requires a much larger heap size than is normally used in JerryScript\ndeployments! In local testing, the following sizes were needed:"),(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"8192 (8M) for ",(0,l.kt)("a",{parentName:"li",href:"https://sheetjs.com/pres.xlsx"},"https://sheetjs.com/pres.xlsx")),(0,l.kt)("li",{parentName:"ul"},"65536 (64M) for ",(0,l.kt)("a",{parentName:"li",href:"https://sheetjs.com/pres.numbers"},"https://sheetjs.com/pres.numbers"))),(0,l.kt)("p",{parentName:"admonition"},"This works on a Raspberry Pi.")),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Complete Example")," (click to show)"),(0,l.kt)("p",null,"Due to limitations of the standalone binary, this demo will encode a test file\nas a Base64 string and directly add it to an amalgamated script."),(0,l.kt)("p",null,"0) Build the library and command line tool with required options:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"git clone --depth=1 https://github.com/jerryscript-project/jerryscript.git\ncd jerryscript\npython tools/build.py --error-messages=ON --logging=ON --mem-heap=8192 --cpointer-32bit=ON\n")),(0,l.kt)("p",null,"1) Download the standalone script, shim, and test file:"),(0,l.kt)("ul",null,(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"},"xlsx.full.min.js")),(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://cdn.sheetjs.com/xlsx-latest/package/dist/shim.min.js"},"shim.min.js")),(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://sheetjs.com/pres.xlsx"},"pres.xlsx"))),(0,l.kt)("p",null,"2) Bundle the test file and create ",(0,l.kt)("inlineCode",{parentName:"p"},"payload.js"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"node -e \"fs.writeFileSync('payload.js', 'var payload = \\\"' + fs.readFileSync('pres.xlsx').toString('base64') + '\\\";')\"\n")),(0,l.kt)("p",null,"3) Create support scripts:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"global.js")," creates a ",(0,l.kt)("inlineCode",{parentName:"li"},"global")," variable and defines a fake ",(0,l.kt)("inlineCode",{parentName:"li"},"console"),":")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="global.js"',title:'"global.js"'},"var global = (function(){ return this; }).call(null);\nvar console = { log: function(x) { print(x); } };\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"jerry.js")," will call ",(0,l.kt)("inlineCode",{parentName:"li"},"XLSX.read")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"XLSX.utils.sheet_to_csv"),":")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="jerry.js"',title:'"jerry.js"'},"/* sheetjs (C) 2013-present  SheetJS -- http://sheetjs.com */\nvar wb = XLSX.read(payload, {type:'base64'});\nconsole.log(XLSX.utils.sheet_to_csv(wb.Sheets[wb.SheetNames[0]]));\n")),(0,l.kt)("p",null,"4) Create the amalgamation ",(0,l.kt)("inlineCode",{parentName:"p"},"xlsx.jerry.js"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cat global.js xlsx.full.min.js payload.js jerry.js > xlsx.jerry.js\n")),(0,l.kt)("p",null,"The final script defines ",(0,l.kt)("inlineCode",{parentName:"p"},"global")," before loading the standalone library.  Once\nready, it will read the hardcoded test file and print the contents as CSV."),(0,l.kt)("p",null,"5) Run the script using the ",(0,l.kt)("inlineCode",{parentName:"p"},"jerry")," standalone binary:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"build/bin/jerry xlsx.jerry.js; echo $?\n"))),(0,l.kt)("h2",{id:"quickjs"},"QuickJS"),(0,l.kt)("p",null,"QuickJS is an embeddable JS engine written in C.  It provides a separate set of\nfunctions for interacting with the filesystem and the global object.  It can run\nthe standalone browser scripts."),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Complete Example")," (click to show)"),(0,l.kt)("p",null,"0) Ensure ",(0,l.kt)("inlineCode",{parentName:"p"},"quickjs")," command line utility is installed"),(0,l.kt)("p",null,"1) Download the standalone script, the shim and the test file:"),(0,l.kt)("ul",null,(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"},"xlsx.full.min.js")),(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://cdn.sheetjs.com/xlsx-latest/package/dist/shim.min.js"},"shim.min.js")),(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://sheetjs.com/pres.numbers"},"pres.numbers"))),(0,l.kt)("p",null,"2) Save the following script to ",(0,l.kt)("inlineCode",{parentName:"p"},"SheetJSQuick.js"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="SheetJSQuick.js',title:'"SheetJSQuick.js'},'/* sheetjs (C) 2013-present  SheetJS -- http://sheetjs.com */\n/* load XLSX */\nimport * as std from "std";\nglobalThis.global = globalThis;\nstd.loadScript("xlsx.full.min.js");\n\n/* read contents of file */\nvar rh = std.open("pres.numbers", "rb");\nrh.seek(0, std.SEEK_END);\nvar sz = rh.tell();\nvar ab = new ArrayBuffer(sz);\nrh.seek();\nrh.read(ab, 0, sz);\nrh.close();\n\n/* parse file */\nvar wb = XLSX.read(ab, {type: \'array\'});\n\n/* write array */\nvar out = XLSX.write(wb, {type: \'array\'});\n\n/* write contents to file */\nvar wh = std.open("SheetJSQuick.xlsx", "wb");\nwh.write(out, 0, out.byteLength);\nwh.close();\n')),(0,l.kt)("p",null,"3) Test the program:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"quickjs SheetJSQuick.js\n")),(0,l.kt)("p",null,"If successful, the script will generate ",(0,l.kt)("inlineCode",{parentName:"p"},"SheetJSQuick.xlsx"),".")),(0,l.kt)("h2",{id:"rhino"},"Rhino"),(0,l.kt)("p",null,"Rhino is an ES3+ engine in Java. The ",(0,l.kt)("inlineCode",{parentName:"p"},"SheetJSRhino")," class and ",(0,l.kt)("inlineCode",{parentName:"p"},"com.sheetjs"),"\npackage show a complete JAR deployment, including the full XLSX source."),(0,l.kt)("p",null,"Due to code generation errors, optimization must be turned off:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"Context context = Context.enter();\ncontext.setOptimizationLevel(-1);\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Complete Example")," (click to show)"),(0,l.kt)("p",null,"0) Download the appropriate Rhino build and rename to ",(0,l.kt)("inlineCode",{parentName:"p"},"rhino.jar")),(0,l.kt)("p",null,"1) Download ",(0,l.kt)("a",{parentName:"p",href:"pathname:///rhino/SheetJSRhino.zip"},(0,l.kt)("inlineCode",{parentName:"a"},"SheetJSRhino.zip"))," and unzip"),(0,l.kt)("p",null,"2) Save the following code to ",(0,l.kt)("inlineCode",{parentName:"p"},"SheetJSRhino.java"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="SheetJSRhino.java"',title:'"SheetJSRhino.java"'},"/* sheetjs (C) 2013-present  SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\nimport com.sheetjs.SheetJS;\nimport com.sheetjs.SheetJSFile;\nimport com.sheetjs.SheetJSSheet;\n\npublic class SheetJSRhino {\n  public static void main(String args[]) throws Exception {\n    try {\n      SheetJS sjs = new SheetJS();\n\n      /* open file */\n      SheetJSFile xl = sjs.read_file(args[0]);\n\n      /* get sheetnames */\n      String[] sheetnames = xl.get_sheet_names();\n      System.err.println(sheetnames[0]);\n\n      /* convert to CSV */\n      SheetJSSheet sheet = xl.get_sheet(0);\n      String csv = sheet.get_csv();\n\n      System.out.println(csv);\n\n    } catch(Exception e) {\n      throw e;\n    } finally {\n      SheetJS.close();\n    }\n  }\n}\n")),(0,l.kt)("p",null,"3) Assemble ",(0,l.kt)("inlineCode",{parentName:"p"},"SheetJS.jar")," from the demo code:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"javac -cp .:rhino.jar SheetJSRhino.java\njar -cf SheetJS.jar SheetJSRhino.class com/sheetjs/*.class\n")),(0,l.kt)("p",null,"4) Download ",(0,l.kt)("a",{parentName:"p",href:"https://sheetjs.com/pres.xlsx"},"https://sheetjs.com/pres.xlsx")," and test:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"java -cp .:SheetJS.jar:rhino.jar SheetJSRhino pres.xlsx\n"))),(0,l.kt)("h2",{id:"legacy-engines"},"Legacy Engines"),(0,l.kt)("admonition",{type:"warning"},(0,l.kt)("p",{parentName:"admonition"},"These examples were written when the engines were maintained. New projects\nshould not use these engines. The demos are included for legacy deployments.")),(0,l.kt)("h3",{id:"chakracore"},"ChakraCore"),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"ChakraCore was an open source JavaScript engine released by Microsoft. It was a\nfork of the Chakra engine that powered Internet Explorer.  When Microsoft Edge\nswitched to become a fork of Chromium, Microsoft stopped providing support.")),(0,l.kt)("p",null,"ChakraCore is an embeddable JS engine written in C++.  The library and binary\ndistributions include a command-line tool ",(0,l.kt)("inlineCode",{parentName:"p"},"chakra")," for running JS scripts."),(0,l.kt)("p",null,"The simplest way to interact with the engine is to pass Base64 strings. The make\ntarget builds a very simple payload with the data."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"The official release includes the ",(0,l.kt)("inlineCode",{parentName:"p"},"ch")," standalone binary.  While applications\nshould link against the official libraries, the standalone tool is useful for\nverifying functionality.")),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Complete Example")," (click to show)"),(0,l.kt)("p",null,"Due to limitations of the standalone binary, this demo will encode a test file\nas a Base64 string and directly add it to an amalgamated script."),(0,l.kt)("p",null,"0) Download and extract the ChakraCore release ZIP.  Copy the binary (",(0,l.kt)("inlineCode",{parentName:"p"},"bin/ch"),")\nto your project folder."),(0,l.kt)("p",null,"1) Download the standalone script, shim, and test file:"),(0,l.kt)("ul",null,(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"},"xlsx.full.min.js")),(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://cdn.sheetjs.com/xlsx-latest/package/dist/shim.min.js"},"shim.min.js")),(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://sheetjs.com/pres.numbers"},"pres.numbers"))),(0,l.kt)("p",null,"2) Bundle the test file and create ",(0,l.kt)("inlineCode",{parentName:"p"},"payload.js"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"node -e \"fs.writeFileSync('payload.js', 'var payload = \\\"' + fs.readFileSync('pres.numbers').toString('base64') + '\\\";')\"\n")),(0,l.kt)("p",null,"3) Create support scripts:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"global.js")," creates a ",(0,l.kt)("inlineCode",{parentName:"li"},"global")," variable:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="global.js"',title:'"global.js"'},"var global = (function(){ return this; }).call(null);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"chakra.js")," will call ",(0,l.kt)("inlineCode",{parentName:"li"},"XLSX.read")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"XLSX.utils.sheet_to_csv"),":")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="chakra.js"',title:'"chakra.js"'},"/* sheetjs (C) 2013-present  SheetJS -- http://sheetjs.com */\nvar wb = XLSX.read(payload, {type:'base64'});\nconsole.log(XLSX.utils.sheet_to_csv(wb.Sheets[wb.SheetNames[0]]));\n")),(0,l.kt)("p",null,"4) Create the amalgamation ",(0,l.kt)("inlineCode",{parentName:"p"},"xlsx.chakra.js"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cat global.js xlsx.full.min.js payload.js chakra.js > xlsx.chakra.js\n")),(0,l.kt)("p",null,"The final script defines ",(0,l.kt)("inlineCode",{parentName:"p"},"global")," before loading the standalone library.  Once\nready, it will read the hardcoded test file and print the contents as CSV."),(0,l.kt)("p",null,"5) Run the script using the ChakraCore standalone binary:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"./ch xlsx.chakra.js\n"))),(0,l.kt)("h3",{id:"nashorn"},"Nashorn"),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"Nashorn shipped with Java 8.  It was deprecated in Java 11 and was officially\nremoved in JDK 15.  New Java applications should use ",(0,l.kt)("a",{parentName:"p",href:"#rhino"},"Rhino"),".")),(0,l.kt)("p",null,"Nashorn ships with Java.  It includes a command-line tool ",(0,l.kt)("inlineCode",{parentName:"p"},"jjs")," for running JS\nscripts.  It is somewhat limited but does offer access to the full Java runtime."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"load")," function in ",(0,l.kt)("inlineCode",{parentName:"p"},"jjs")," can load the minified source directly:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var global = (function(){ return this; }).call(null);\nload('xlsx.full.min.js');\n")),(0,l.kt)("p",null,"The Java ",(0,l.kt)("inlineCode",{parentName:"p"},"nio")," API provides the ",(0,l.kt)("inlineCode",{parentName:"p"},"Files.readAllBytes")," method to read a file into\na byte array.  To use in ",(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.read"),", the demo copies the bytes into a plain JS\narray and calls ",(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.read")," with type ",(0,l.kt)("inlineCode",{parentName:"p"},'"array"'),"."),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Complete Example")," (click to show)"),(0,l.kt)("p",null,"0) Ensure ",(0,l.kt)("inlineCode",{parentName:"p"},"jjs")," is available on system path"),(0,l.kt)("p",null,"1) Download the standalone script, the shim and the test file:"),(0,l.kt)("ul",null,(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"},"xlsx.full.min.js")),(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://cdn.sheetjs.com/xlsx-latest/package/dist/shim.min.js"},"shim.min.js")),(0,l.kt)("li",null,(0,l.kt)("a",{href:"https://sheetjs.com/pres.numbers"},"pres.numbers"))),(0,l.kt)("p",null,"2) Save the following script to ",(0,l.kt)("inlineCode",{parentName:"p"},"SheetJSNashorn.js"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="SheetJSNashorn.js"',title:'"SheetJSNashorn.js"'},"/* sheetjs (C) 2013-present  SheetJS -- http://sheetjs.com */\n\n/* load module */\nvar global = (function(){ return this; }).call(null);\nload('xlsx.full.min.js');\n\n/* helper to convert byte array to plain JS array */\nfunction b2a(b) {\n  var out = new Array(b.length);\n  for(var i = 0; i < out.length; i++) out[i] = (b[i] < 0 ? b[i] + 256 : b[i]);\n  return out;\n}\n\nfunction process_file(path) {\n  java.lang.System.out.println(path);\n\n  /* read file */\n  var path = java.nio.file.Paths.get(path);\n  var bytes = java.nio.file.Files.readAllBytes(path);\n  var u8a = b2a(bytes);\n\n  /* read data */\n  var wb = XLSX.read(u8a, {type:\"array\"});\n\n  /* get first worksheet as an array of arrays */\n  var ws = wb.Sheets[wb.SheetNames[0]];\n  var js = XLSX.utils.sheet_to_json(ws, {header:1});\n\n  /* print out every line */\n  js.forEach(function(l) { java.lang.System.out.println(JSON.stringify(l)); });\n}\n\nprocess_file('pres.numbers');\n")),(0,l.kt)("p",null,"3) Test the script:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"jjs SheetJSNashorn.js\n")),(0,l.kt)("p",null,"It will print out the first worksheet contents.")))}d.isMDXComponent=!0}}]);