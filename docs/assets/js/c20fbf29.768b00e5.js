"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8688],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),u=i,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||r;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294),i=n(6010);const r="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,l),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>u});var a=n(7462),i=n(7294),r=n(6010),l=n(2389),o=n(7392),s=n(7094),p=n(2466);const c="tabList__CuJ",m="tabItem_LNqP";function d(e){var t,n;const{lazy:l,block:d,defaultValue:u,values:h,groupId:k,className:g}=e,f=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=h?h:f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),N=(0,o.l)(b,((e,t)=>e.value===t.value));if(N.length>0)throw new Error('Docusaurus error: Duplicate values "'+N.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const w=null===u?u:null!=(t=null!=u?u:null==(n=f.find((e=>e.props.default)))?void 0:n.props.value)?t:f[0].props.value;if(null!==w&&!b.some((e=>e.value===w)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+b.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:y,setTabGroupChoices:v}=(0,s.U)(),[S,x]=(0,i.useState)(w),C=[],{blockElementScrollPositionUntilNextRender:T}=(0,p.o5)();if(null!=k){const e=y[k];null!=e&&e!==S&&b.some((t=>t.value===e))&&x(e)}const F=e=>{const t=e.currentTarget,n=C.indexOf(t),a=b[n].value;a!==S&&(T(t),x(a),null!=k&&v(k,String(a)))},A=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=C.indexOf(e.currentTarget)+1;n=null!=(a=C[t])?a:C[0];break}case"ArrowLeft":{var i;const t=C.indexOf(e.currentTarget)-1;n=null!=(i=C[t])?i:C[C.length-1];break}}null==(t=n)||t.focus()};return i.createElement("div",{className:(0,r.Z)("tabs-container",c)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":d},g)},b.map((e=>{let{value:t,label:n,attributes:l}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:S===t?0:-1,"aria-selected":S===t,key:t,ref:e=>C.push(e),onKeyDown:A,onFocus:F,onClick:F},l,{className:(0,r.Z)("tabs__item",m,null==l?void 0:l.className,{"tabs__item--active":S===t})}),null!=n?n:t)}))),l?(0,i.cloneElement)(f.filter((e=>e.props.value===S))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==S})))))}function u(e){const t=(0,l.Z)();return i.createElement(d,(0,a.Z)({key:String(t)},e))}},4749:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>m});var a=n(7462),i=(n(7294),n(3905)),r=n(5488),l=n(5162);const o={title:"iOS and Android Apps"},s=void 0,p={unversionedId:"demos/mobile",id:"demos/mobile",title:"iOS and Android Apps",description:"Many mobile app frameworks mix JavaScript / CSS / HTML5 concepts with native",source:"@site/docs/03-demos/02-mobile.md",sourceDirName:"03-demos",slug:"/demos/mobile",permalink:"/docs/demos/mobile",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"iOS and Android Apps"},sidebar:"tutorialSidebar",previous:{title:"Salesforce LWC",permalink:"/docs/demos/salesforce"},next:{title:"Desktop Applications",permalink:"/docs/demos/desktop"}},c={},m=[{value:"React Native",id:"react-native",level:2},{value:"RN File Picker",id:"rn-file-picker",level:3},{value:"<code>react-native-document-picker</code>",id:"react-native-document-picker",level:4},{value:"<code>expo-document-picker</code>",id:"expo-document-picker",level:4},{value:"RN File Plugins",id:"rn-file-plugins",level:3},{value:"<code>react-native-blob-util</code> and <code>rn-fetch-blob</code>",id:"react-native-blob-util-and-rn-fetch-blob",level:4},{value:"<code>react-native-file-access</code>",id:"react-native-file-access",level:4},{value:"<code>react-native-fs</code>",id:"react-native-fs",level:4},{value:"<code>expo-file-system</code>",id:"expo-file-system",level:4},{value:"Demo",id:"demo",level:3},{value:"NativeScript",id:"nativescript",level:2},{value:"Integration Details",id:"integration-details",level:3},{value:"Demo",id:"demo-1",level:3},{value:"Quasar",id:"quasar",level:2},{value:"Integration Details",id:"integration-details-1",level:3},{value:"Reading data",id:"reading-data",level:4},{value:"Writing data",id:"writing-data",level:4},{value:"Demo",id:"demo-2",level:3},{value:"Ionic",id:"ionic",level:2},{value:"Cordova",id:"cordova",level:3},{value:"Demo",id:"demo-3",level:3},{value:"CapacitorJS",id:"capacitorjs",level:2},{value:"Integration Details",id:"integration-details-2",level:3},{value:"Reading data",id:"reading-data-1",level:4},{value:"Writing data",id:"writing-data-1",level:4},{value:"Demo",id:"demo-4",level:3}],d={toc:m};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Many mobile app frameworks mix JavaScript / CSS / HTML5 concepts with native\nextensions and libraries to create a hybrid development experience.  Developers\nwell-versed in web technologies can now build actual mobile applications that\nrun on iOS and Android!"),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"The ecosystem has broken backwards-compatibility many times!")),(0,i.kt)("p",{parentName:"admonition"},"iOS and Android, as well as the underlying JavaScript frameworks, make breaking\nchanges regularly.  The demos were tested against emulators / real devices at\nsome point in time.  A framework or OS change can render the demos inoperable."),(0,i.kt)("p",{parentName:"admonition"},"Each demo section will mention test dates and platform versions.")),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"./engines"},'"JavaScript Engines"'),' section includes samples for JavaScript\nengines used in the mobile app frameworks.  SheetJS libraries have been tested\nin the relevant engines and should "just work" with some caveats.'),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"readFile")," and ",(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"writeFile")),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"XLSX.readFile")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"XLSX.writeFile")," do not work in mobile apps!  The demos\ninclude platform-specific details for fetching file data for ",(0,i.kt)("inlineCode",{parentName:"p"},"XLSX.read")," and\nwriting file data generated by ",(0,i.kt)("inlineCode",{parentName:"p"},"XLSX.write"),"."),(0,i.kt)("p",{parentName:"admonition"},"Some platforms provide this functionality as part of the standard library.\nOther platforms, including React Native, do not.  When the platform does not\nprovide, usually there are third-party modules to provide needed functionality.")),(0,i.kt)("p",null,"MacOS is required for the iOS demos.  The Android demos were tested on MacOS."),(0,i.kt)("h2",{id:"react-native"},"React Native"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This demo was tested on an Intel Mac on 2022 August 14 with RN ",(0,i.kt)("inlineCode",{parentName:"p"},"0.67.2"),"."),(0,i.kt)("p",{parentName:"admonition"},"The iOS simulator runs iOS 15.5 on an iPhone 13."),(0,i.kt)("p",{parentName:"admonition"},"The Android simulator runs Android 12 (S) Platform 31 on a Pixel 5.")),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"React Native does not provide a native file picker or a method for reading and\nwriting data from documents on the devices. A third-party library must be used."),(0,i.kt)("p",{parentName:"admonition"},"Since React Native internals change between releases, libraries may only work\nwith specific versions of React Native.  Project documentation should be\nconsulted before picking a library.")),(0,i.kt)("p",null,'The following table lists tested file plugins.  "OS" lists tested platforms\n("A" for Android and "I" for iOS).  "Copy" indicates whether an explicit copy\nis needed (file picker copies to cache directory and file plugin reads cache).'),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"File system Plugin"),(0,i.kt)("th",{parentName:"tr",align:"left"},"File Picker Plugin"),(0,i.kt)("th",{parentName:"tr",align:"center"},"OS"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Copy"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"react-native-file-access")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"react-native-document-picker")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"AI")),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"react-native-blob-util")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"react-native-document-picker")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"AI")),(0,i.kt)("td",{parentName:"tr",align:"left"},"YES")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"rn-fetch-blob")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"react-native-document-picker")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"AI")),(0,i.kt)("td",{parentName:"tr",align:"left"},"YES")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"react-native-fs")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"react-native-document-picker")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"AI")),(0,i.kt)("td",{parentName:"tr",align:"left"},"YES")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"expo-file-system")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"expo-document-picker")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"}," I")),(0,i.kt)("td",{parentName:"tr",align:"left"},"YES")))),(0,i.kt)("h3",{id:"rn-file-picker"},"RN File Picker"),(0,i.kt)("p",null,"The following libraries have been tested:"),(0,i.kt)("h4",{id:"react-native-document-picker"},(0,i.kt)("inlineCode",{parentName:"h4"},"react-native-document-picker")),(0,i.kt)("details",{open:!0},(0,i.kt)("summary",null,(0,i.kt)("b",null,"Selecting a file")," (click to show)"),(0,i.kt)("p",null,"When a copy is not needed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { pickSingle } from 'react-native-document-picker';\n\nconst f = await pickSingle({allowMultiSelection: false, mode: \"open\" });\nconst path = f.uri; // this path can be read by RN file plugins\n")),(0,i.kt)("p",null,"When a copy is needed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { pickSingle } from \'react-native-document-picker\';\n\nconst f = await pickSingle({allowMultiSelection: false, copyTo: "cachesDirectory", mode: "open" });\nconst path = f.fileCopyUri; // this path can be read by RN file plugins\n'))),(0,i.kt)("h4",{id:"expo-document-picker"},(0,i.kt)("inlineCode",{parentName:"h4"},"expo-document-picker")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Selecting a file")," (click to show)"),(0,i.kt)("p",null,"When using ",(0,i.kt)("inlineCode",{parentName:"p"},"DocumentPicker.getDocumentAsync"),", enable ",(0,i.kt)("inlineCode",{parentName:"p"},"copyToCacheDirectory"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import * as DocumentPicker from 'expo-document-picker';\n\nconst result = await DocumentPicker.getDocumentAsync({\n  // highlight-next-line\n  copyToCacheDirectory: true,\n  type: ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']\n});\nconst path = result.uri;\n"))),(0,i.kt)("h3",{id:"rn-file-plugins"},"RN File Plugins"),(0,i.kt)("p",null,"The following libraries have been tested:"),(0,i.kt)("h4",{id:"react-native-blob-util-and-rn-fetch-blob"},(0,i.kt)("inlineCode",{parentName:"h4"},"react-native-blob-util")," and ",(0,i.kt)("inlineCode",{parentName:"h4"},"rn-fetch-blob")),(0,i.kt)("admonition",{title:"Historical Context",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-fetch-blob")," project was archived in 2019. At the time, there\nwere a number of project forks.  The maintainers blessed the ",(0,i.kt)("inlineCode",{parentName:"p"},"rn-fetch-blob"),"\nfork as the spiritual successor."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"react-native-blob-util")," is an active fork of ",(0,i.kt)("inlineCode",{parentName:"p"},"rn-fetch-blob")),(0,i.kt)("p",{parentName:"admonition"},"On the day that this demo was tested (2022 August 14), both ",(0,i.kt)("inlineCode",{parentName:"p"},"rn-fetch-blob")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-blob-util")," worked with the tested iOS and Android SDK versions.\nThe APIs are identical for the purposes of working with files.")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ascii")," type returns an array of numbers corresponding to the raw bytes.\nA ",(0,i.kt)("inlineCode",{parentName:"p"},"Uint8Array")," from the data is compatible with the ",(0,i.kt)("inlineCode",{parentName:"p"},"buffer")," type."),(0,i.kt)("details",{open:!0},(0,i.kt)("summary",null,(0,i.kt)("b",null,"Reading and Writing snippets")," (click to show)"),(0,i.kt)("p",null,"The snippets use ",(0,i.kt)("inlineCode",{parentName:"p"},"rn-fetch-blob"),".  To use ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-blob-util"),", change the\n",(0,i.kt)("inlineCode",{parentName:"p"},"import")," statements to load the module."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Reading Data")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import * as XLSX from \"xlsx\";\nimport RNFetchBlob from 'rn-fetch-blob'; // or react-native-blob-util\nconst { readFile } = RNFetchBlob.fs;\n\nconst res = await readFile(path, 'ascii');\nconst wb = XLSX.read(new Uint8Array(res), {type:'buffer'});\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"On iOS, the URI from ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-document-picker")," must be massaged:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { pickSingle } from 'react-native-document-picker';\nimport RNFetchBlob from 'rn-fetch-blob'; // or react-native-blob-util\nconst { readFile, dirs: { DocumentDir } } = RNFetchBlob.fs;\n\nconst f = await pickSingle({\n// highlight-start\n  // Instruct the document picker to copy file to Documents directory\n  copyTo: \"documentDirectory\",\n// highlight-end\n  allowMultiSelection: false, mode: \"open\" });\n// highlight-start\n// `f.uri` is the original path and `f.fileCopyUri` is the path to the copy\nlet path = f.fileCopyUri;\n// iOS workaround\nif (Platform.OS === 'ios') path = path.replace(/^.*\\/Documents\\//, DDP + \"/\");\n// highlight-end\n\nconst res = await readFile(path, 'ascii');\n"))),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Writing Data")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import * as XLSX from \"xlsx\";\nimport RNFetchBlob from 'rn-fetch-blob'; // or react-native-blob-util\nconst { writeFile, readFile, dirs:{ DocumentDir } } = RNFetchBlob.fs;\n\nconst wbout = XLSX.write(wb, {type:'buffer', bookType:\"xlsx\"});\nconst file = DocumentDir + \"/sheetjsw.xlsx\";\nconst res = await writeFile(file, Array.from(wbout), 'ascii');\n"))),(0,i.kt)("h4",{id:"react-native-file-access"},(0,i.kt)("inlineCode",{parentName:"h4"},"react-native-file-access")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"base64")," encoding returns strings compatible with the ",(0,i.kt)("inlineCode",{parentName:"p"},"base64")," type:"),(0,i.kt)("details",{open:!0},(0,i.kt)("summary",null,(0,i.kt)("b",null,"Reading and Writing snippets")," (click to show)"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Reading Data")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import * as XLSX from "xlsx";\nimport { FileSystem } from "react-native-file-access";\n\nconst b64 = await FileSystem.readFile(path, "base64");\n/* b64 is a Base64 string */\nconst workbook = XLSX.read(b64, {type: "base64"});\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Writing Data")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import * as XLSX from "xlsx";\nimport { Dirs, FileSystem } from "react-native-file-access";\nconst DDP = Dirs.DocumentDir + "/";\n\nconst b64 = XLSX.write(workbook, {type:\'base64\', bookType:"xlsx"});\n/* b64 is a Base64 string */\nawait FileSystem.writeFile(DDP + "sheetjs.xlsx", b64, "base64");\n'))),(0,i.kt)("h4",{id:"react-native-fs"},(0,i.kt)("inlineCode",{parentName:"h4"},"react-native-fs")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ascii")," encoding returns binary strings compatible with the ",(0,i.kt)("inlineCode",{parentName:"p"},"binary")," type:"),(0,i.kt)("details",{open:!0},(0,i.kt)("summary",null,(0,i.kt)("b",null,"Reading and Writing snippets")," (click to show)"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Reading Data")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import * as XLSX from "xlsx";\nimport { readFile } from "react-native-fs";\n\nconst bstr = await readFile(path, "ascii");\n/* bstr is a binary string */\nconst workbook = XLSX.read(bstr, {type: "binary"});\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Writing Data")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import * as XLSX from "xlsx";\nimport { writeFile, DocumentDirectoryPath } from "react-native-fs";\n\nconst bstr = XLSX.write(workbook, {type:\'binary\', bookType:"xlsx"});\n/* bstr is a binary string */\nawait writeFile(DocumentDirectoryPath + "/sheetjs.xlsx", bstr, "ascii");\n'))),(0,i.kt)("h4",{id:"expo-file-system"},(0,i.kt)("inlineCode",{parentName:"h4"},"expo-file-system")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Some Expo APIs return URI that cannot be read with ",(0,i.kt)("inlineCode",{parentName:"p"},"expo-file-system"),". This\nwill manifest as an error:"),(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("p",{parentName:"blockquote"},"Unsupported scheme for location '...'")),(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("a",{parentName:"p",href:"#expo-document-picker"},(0,i.kt)("inlineCode",{parentName:"a"},"expo-document-picker"))," snippet makes a local copy.")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"EncodingType.Base64")," encoding is compatible with ",(0,i.kt)("inlineCode",{parentName:"p"},"base64")," type."),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Reading and Writing snippets")," (click to show)"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Reading Data")),(0,i.kt)("p",null,"Calling ",(0,i.kt)("inlineCode",{parentName:"p"},"FileSystem.readAsStringAsync")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"FileSystem.EncodingType.Base64"),"\nencoding returns a promise resolving to a string compatible with ",(0,i.kt)("inlineCode",{parentName:"p"},"base64")," type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import * as XLSX from "xlsx";\nimport * as FileSystem from \'expo-file-system\';\n\nconst b64 = await FileSystem.readAsStringAsync(uri, { encoding: FileSystem.EncodingType.Base64 });\nconst workbook = XLSX.read(b64, { type: "base64" });\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Writing Data")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"FileSystem.EncodingType.Base64")," encoding accepts Base64 strings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import * as XLSX from "xlsx";\nimport * as FileSystem from \'expo-file-system\';\n\nconst b64 = XLSX.write(workbook, {type:\'base64\', bookType:"xlsx"});\n/* b64 is a Base64 string */\nawait FileSystem.writeAsStringAsync(FileSystem.documentDirectory + "sheetjs.xlsx", b64, { encoding: FileSystem.EncodingType.Base64 });\n'))),(0,i.kt)("h3",{id:"demo"},"Demo"),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"There are many moving parts and pitfalls with React Native apps. It is strongly\nrecommended to follow the official React Native tutorials for iOS and Android\nbefore approaching this demo.  Details like creating an Android Virtual Device\nare not covered here.")),(0,i.kt)("details",{open:!0},(0,i.kt)("summary",null,(0,i.kt)("b",null,"Complete Example")," (click to show)"),(0,i.kt)("p",null,"This example tries to separate the library-specific functions."),(0,i.kt)("p",null,"0) ",(0,i.kt)("strong",{parentName:"p"},"Follow the official React Native CLI Guide!")),(0,i.kt)("p",null,"Development Environment Guide: ",(0,i.kt)("a",{parentName:"p",href:"http://reactnative.dev/docs/environment-setup"},"http://reactnative.dev/docs/environment-setup")),(0,i.kt)("p",null,"Follow the instructions for iOS and for Android.  They will cover installation\nand system configuration.  By the end, you should be able to run the sample app\nin the Android and the iOS simulators."),(0,i.kt)("p",null,"1) Create project:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'npx react-native init SheetJSRN --version="0.67.2"\n')),(0,i.kt)("p",null,"2) Install shared dependencies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd SheetJSRN\ncurl -LO http://oss.sheetjs.com/assets/img/logo.png\nnpm i -S https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz\nnpm i -S react-native-table-component react-native-document-picker\n")),(0,i.kt)("p",null,"Refresh iOS project by running ",(0,i.kt)("inlineCode",{parentName:"p"},"pod install")," from the ",(0,i.kt)("inlineCode",{parentName:"p"},"ios")," subfolder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd ios\npod install\ncd ..\n")),(0,i.kt)("p",null,"3) Download ",(0,i.kt)("a",{parentName:"p",href:"pathname:///mobile/index.js"},(0,i.kt)("inlineCode",{parentName:"a"},"index.js"))," and replace:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl -LO https://docs.sheetjs.com/mobile/index.js\n")),(0,i.kt)("p",null,"Start the iOS emulator:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx react-native run-ios\n")),(0,i.kt)("p",null,"You should see the skeleton app:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/rnios1.png",alt:"React Native iOS App"})),(0,i.kt)("p",null,"4) Pick a filesystem library for integration:"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"RNBU",label:"RNBU",mdxType:"TabItem"},(0,i.kt)("p",null,"Install ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-blob-util")," dependency:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -S react-native-blob-util\n")),(0,i.kt)("p",null,"Add the highlighted lines to ",(0,i.kt)("inlineCode",{parentName:"p"},"index.js"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="index.js"',title:'"index.js"'},"import { Table, Row, Rows, TableWrapper } from 'react-native-table-component';\n\n// highlight-start\nimport { read, write } from 'xlsx';\nimport { pickSingle } from 'react-native-document-picker';\nimport { Platform } from 'react-native';\nimport RNFetchBlob from 'react-native-blob-util';\n\nasync function pickAndParse() {\n  /* rn-fetch-blob / react-native-blob-util need a copy */\n  const f = await pickSingle({allowMultiSelection: false, copyTo: \"documentDirectory\", mode: \"open\" });\n  let path = f.fileCopyUri;\n  if (Platform.OS === 'ios') path = path.replace(/^.*\\/Documents\\//, RNFetchBlob.fs.dirs.DocumentDir + \"/\");\n  const res = await RNFetchBlob.fs.readFile(path, 'ascii');\n  return read(new Uint8Array(res), {type: 'buffer'});\n}\n\nasync function writeWorkbook(wb) {\n  const wbout = write(wb, {type:'buffer', bookType:\"xlsx\"});\n  const file = RNFetchBlob.fs.dirs.DocumentDir + \"/sheetjsw.xlsx\";\n  await RNFetchBlob.fs.writeFile(file, Array.from(wbout), 'ascii');\n  return file;\n}\n// highlight-end\n\nconst make_width = ws => {\n"))),(0,i.kt)(l.Z,{value:"RNFA",label:"RNFA",mdxType:"TabItem"},(0,i.kt)("p",null,"Install ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-file-access")," dependency:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -S react-native-file-access\n")),(0,i.kt)("p",null,"Add the highlighted lines to ",(0,i.kt)("inlineCode",{parentName:"p"},"index.js"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="index.js"',title:'"index.js"'},"import { Table, Row, Rows, TableWrapper } from 'react-native-table-component';\n\n// highlight-start\nimport { read, write } from 'xlsx';\nimport { pickSingle } from 'react-native-document-picker';\nimport { Dirs, FileSystem } from 'react-native-file-access';\n\nasync function pickAndParse() {\n  /* react-native-file-access does not need a copy */\n  const f = await pickSingle({allowMultiSelection: false, mode: \"open\" });\n  const res = await FileSystem.readFile(f.uri, \"base64\");\n  return read(res, {type: 'base64'});\n}\n\nasync function writeWorkbook(wb) {\n  const wbout = write(wb, {type:'base64', bookType:\"xlsx\"});\n  const file = Dirs.DocumentDir + \"/sheetjsw.xlsx\";\n  await FileSystem.writeFile(file, wbout, \"base64\");\n  return file;\n}\n// highlight-end\n\nconst make_width = ws => {\n"))),(0,i.kt)(l.Z,{value:"RNFB",label:"RNFB",mdxType:"TabItem"},(0,i.kt)("p",null,"Install ",(0,i.kt)("inlineCode",{parentName:"p"},"rn-fetch-blob")," dependency:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -S rn-fetch-blob\n")),(0,i.kt)("p",null,"Add the highlighted lines to ",(0,i.kt)("inlineCode",{parentName:"p"},"index.js"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="index.js"',title:'"index.js"'},"import { Table, Row, Rows, TableWrapper } from 'react-native-table-component';\n\n// highlight-start\nimport { read, write } from 'xlsx';\nimport { pickSingle } from 'react-native-document-picker';\nimport { Platform } from 'react-native';\nimport RNFetchBlob from 'rn-fetch-blob';\n\nasync function pickAndParse() {\n  /* rn-fetch-blob / react-native-blob-util need a copy */\n  const f = await pickSingle({allowMultiSelection: false, copyTo: \"documentDirectory\", mode: \"open\" });\n  let path = f.fileCopyUri;\n  if (Platform.OS === 'ios') path = path.replace(/^.*\\/Documents\\//, RNFetchBlob.fs.dirs.DocumentDir + \"/\");\n  const res = await RNFetchBlob.fs.readFile(path, 'ascii');\n  return read(new Uint8Array(res), {type: 'buffer'});\n}\n\nasync function writeWorkbook(wb) {\n  const wbout = write(wb, {type:'buffer', bookType:\"xlsx\"});\n  const file = RNFetchBlob.fs.dirs.DocumentDir + \"/sheetjsw.xlsx\";\n  await RNFetchBlob.fs.writeFile(file, Array.from(wbout), 'ascii');\n  return file;\n}\n// highlight-end\n\nconst make_width = ws => {\n"))),(0,i.kt)(l.Z,{value:"RNFS",label:"RNFS",mdxType:"TabItem"},(0,i.kt)("p",null,"Install ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-fs")," dependency:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -S react-native-fs\n")),(0,i.kt)("p",null,"Add the highlighted lines to ",(0,i.kt)("inlineCode",{parentName:"p"},"index.js"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="index.js"',title:'"index.js"'},"import { Table, Row, Rows, TableWrapper } from 'react-native-table-component';\n\n// highlight-start\nimport { read, write } from 'xlsx';\nimport { pickSingle } from 'react-native-document-picker';\nimport { writeFile, readFile, DocumentDirectoryPath } from 'react-native-fs';\n\nasync function pickAndParse() {\n  /* react-native-fs needs a copy */\n  const f = await pickSingle({allowMultiSelection: false, copyTo: \"cachesDirectory\", mode: \"open\" });\n  const bstr = await readFile(f.fileCopyUri, 'ascii');\n  return read(bstr, {type:'binary'});\n}\n\nasync function writeWorkbook(wb) {\n  const wbout = write(wb, {type:'binary', bookType:\"xlsx\"});\n  const file = DocumentDirectoryPath + \"/sheetjsw.xlsx\";\n  await writeFile(file, wbout, 'ascii');\n  return file;\n}\n// highlight-end\n\nconst make_width = ws => {\n"))),(0,i.kt)(l.Z,{value:"EXPO",label:"EXPO",mdxType:"TabItem"},(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"At the time of testing, the ",(0,i.kt)("inlineCode",{parentName:"p"},"npx install-expo-modules")," step breaks the Android\nproject. The demo works as expected on iOS.")),(0,i.kt)("p",null,"Install ",(0,i.kt)("inlineCode",{parentName:"p"},"expo-file-system")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"expo-document-picker")," dependencies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx install-expo-modules\nnpm i -S expo-file-system expo-document-picker\n")),(0,i.kt)("p",null,"Add the highlighted lines to ",(0,i.kt)("inlineCode",{parentName:"p"},"index.js"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="index.js"',title:'"index.js"'},"import { Table, Row, Rows, TableWrapper } from 'react-native-table-component';\n\n// highlight-start\nimport { read, write } from 'xlsx';\nimport { getDocumentAsync } from 'expo-document-picker';\nimport { documentDirectory, readAsStringAsync, writeAsStringAsync } from 'expo-file-system';\n\nasync function pickAndParse() {\n  const result = await getDocumentAsync({copyToCacheDirectory: true});\n  const path = result.uri;\n  const res = await readAsStringAsync(path, { encoding: \"base64\" });\n  return read(res, {type: 'base64'});\n}\n\nasync function writeWorkbook(wb) {\n  const wbout = write(wb, {type:'base64', bookType:\"xlsx\"});\n  const file = documentDirectory + \"sheetjsw.xlsx\";\n  await writeAsStringAsync(file, wbout, { encoding: \"base64\" });\n  return file;\n}\n// highlight-end\n\nconst make_width = ws => {\n")))),(0,i.kt)("p",null,"5) Refresh the app:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd ios\npod install\ncd ..\n")),(0,i.kt)("p",null,"Once refreshed, the development process must be restarted:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx react-native run-ios\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"iOS Testing")),(0,i.kt)("p",null,"The app can be tested with the following sequence in the simulator:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Download ",(0,i.kt)("a",{parentName:"li",href:"https://sheetjs.com/pres.numbers"},"https://sheetjs.com/pres.numbers")),(0,i.kt)("li",{parentName:"ul"},"In the simulator, click the Home icon to return to the home screen"),(0,i.kt)("li",{parentName:"ul"},'Click on the "Files" icon'),(0,i.kt)("li",{parentName:"ul"},"Click and drag ",(0,i.kt)("inlineCode",{parentName:"li"},"pres.numbers")," from a Finder window into the simulator.")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/quasar7a.png",alt:"save file iOS"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Make sure "On My iPhone" is highlighted and select "Save"'),(0,i.kt)("li",{parentName:"ul"},"Click the Home icon again then select the ",(0,i.kt)("inlineCode",{parentName:"li"},"SheetJSRN")," app"),(0,i.kt)("li",{parentName:"ul"},'Click "Import data" and select ',(0,i.kt)("inlineCode",{parentName:"li"},"pres"),":")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/rnios2.png",alt:"pick file iOS"})),(0,i.kt)("p",null,"Once selected, the screen should refresh with new contents:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/rnios3.png",alt:"read file iOS"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Click "Export data".  You will see a popup with a location:')),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/rnios4.png",alt:"write file iOS"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Find the file and verify the contents are correct:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'find ~/Library/Developer/CoreSimulator -name sheetjsw.xlsx |\n  while read x; do echo "$x"; npx xlsx-cli "$x"; done\n')),(0,i.kt)("p",null,"Once testing is complete, stop the simulator and the development process."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Android Testing")),(0,i.kt)("p",null,"There are no Android-specific steps.  Emulator can be started with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx react-native run-android\n")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/rnand1.png",alt:"React Native Android App"})),(0,i.kt)("p",null,"The app can be tested with the following sequence in the simulator:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Download ",(0,i.kt)("a",{parentName:"li",href:"https://sheetjs.com/pres.numbers"},"https://sheetjs.com/pres.numbers")),(0,i.kt)("li",{parentName:"ul"},"Click and drag ",(0,i.kt)("inlineCode",{parentName:"li"},"pres.numbers")," from a Finder window into the simulator."),(0,i.kt)("li",{parentName:"ul"},'Click "Import data" and select ',(0,i.kt)("inlineCode",{parentName:"li"},"pres.numbers"),":")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/rnand2.png",alt:"pick file Android"})),(0,i.kt)("p",null,"Once selected, the screen should refresh with new contents:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/rnand3.png",alt:"read file Android"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Click "Export data".  You will see a popup with a location:')),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/rnand4.png",alt:"write file Android"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Pull the file from the simulator and verify the contents:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"adb exec-out run-as com.sheetjsrn cat files/sheetjsw.xlsx > /tmp/sheetjsw.xlsx\nnpx xlsx-cli /tmp/sheetjsw.xlsx\n"))),(0,i.kt)("h2",{id:"nativescript"},"NativeScript"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This demo was tested on an Intel Mac on 2022 August 10.  NativeScript version\n(as verified with ",(0,i.kt)("inlineCode",{parentName:"p"},"ns --version"),") is ",(0,i.kt)("inlineCode",{parentName:"p"},"8.3.2"),".  The iOS simulator runs iOS 15.5\non an iPhone SE 3rd generation.")),(0,i.kt)("admonition",{title:"Binary Data issues",type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"NativeScript will not safely transmit binary or UTF-8 strings. XLSB, NUMBERS,\nXLSX, XLS, ODS, SYLK, and DBF exports are known to be mangled."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/NativeScript/NativeScript/issues/9586"},"This is a known NativeScript bug")),(0,i.kt)("p",{parentName:"admonition"},"This demo will focus on ASCII CSV files.  Once the bug is resolved, XLSX and\nother formats will be supported.")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@nativescript/core/file-system")," package provides classes for file access."),(0,i.kt)("h3",{id:"integration-details"},"Integration Details"),(0,i.kt)("p",null,"Reading and writing data require a file handle.  The following snippet searches\ntypical document folders for a specified filename:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { File, Folder, knownFolders, path } from '@nativescript/core/file-system';\n\nfunction get_handle_for_filename(filename: string): File {\n  const target: Folder = knownFolders.documents() || knownFolders.ios.sharedPublic();\n  const url: string = path.normalize(target.path + \"///\" + filename);\n  return File.fromPath(url);\n}\n")),(0,i.kt)("p",null,"The encoding ",(0,i.kt)("inlineCode",{parentName:"p"},"ISO_8859_1")," spiritually resembles the ",(0,i.kt)("inlineCode",{parentName:"p"},'"binary"')," SheetJS type"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reading data")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"File#readText(encoding.ISO_8859_1)")," returns strings compatible with ",(0,i.kt)("inlineCode",{parentName:"p"},'"binary"')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'/* get binary string */\nconst bstr: string = await file.readText(encoding.ISO_8859_1);\n\n/* read workbook */\nconst wb = read(bstr, { type: "binary" });\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Writing data")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"File#writeText")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"ISO_8859_1")," encoding accepts ",(0,i.kt)("inlineCode",{parentName:"p"},'"binary"')," strings with\nthe caveat listed in the warning at the top of this section:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"/* generate binary string */\nconst bstr: string = write(wb, { bookType: 'csv', type: 'binary' });\n\n/* attempt to save binary string to file */\nawait file.writeText(bstr, encoding.ISO_8859_1);\n")),(0,i.kt)("h3",{id:"demo-1"},"Demo"),(0,i.kt)("p",null,"The demo builds off of the NativeScript + Angular example.  Familiarity with\nAngular and TypeScript is assumed."),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Complete Example")," (click to show)"),(0,i.kt)("p",null,'0) Follow the official Environment Setup instructions (tested with "MacOS + iOS")'),(0,i.kt)("p",null,"1) Create a skeleton NativeScript + Angular app:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ns create SheetJSNS --ng\n")),(0,i.kt)("p",null,"2) Launch the app in the iOS simulator to verify that the demo built properly:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd SheetJSNS\nns run ios\n")),(0,i.kt)("p",null,"(this may take a while)"),(0,i.kt)("p",null,"Once the simulator launches and the test app is displayed, end the script by\nselecting the terminal and entering the key sequence ",(0,i.kt)("inlineCode",{parentName:"p"},"CTRL + C")),(0,i.kt)("p",null,"3) From the project folder, install the library:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz\n")),(0,i.kt)("p",null,"4) To confirm the library was loaded, change the title to show the version.  The\ndifferences are highlighted."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"src/app/item/items.component.ts")," imports the version string to the component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/item/items.component.ts"',title:'"src/app/item/items.component.ts"'},"// highlight-next-line\nimport { version } from 'xlsx';\nimport { Component, OnInit } from '@angular/core'\n\nimport { Item } from './item'\nimport { ItemService } from './item.service'\n\n@Component({\n  selector: 'ns-items',\n  templateUrl: './items.component.html',\n})\nexport class ItemsComponent implements OnInit {\n  items: Array<Item>\n  // highlight-next-line\n  version = `SheetJS - ${version}`;\n\n  constructor(private itemService: ItemService) {}\n\n  ngOnInit(): void {\n    this.items = this.itemService.getItems()\n  }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"src/app/item/items.component.html")," references the version in the title:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="src/app/item/items.component.html"',title:'"src/app/item/items.component.html"'},'\x3c!-- highlight-next-line --\x3e\n<ActionBar [title]="version"></ActionBar>\n\n<GridLayout>\n  <ListView [items]="items">\n    <ng-template let-item="item">\n      <StackLayout [nsRouterLink]="[\'/item\', item.id]">\n        <Label [text]="item.name"></Label>\n      </StackLayout>\n    </ng-template>\n  </ListView>\n</GridLayout>\n')),(0,i.kt)("p",null,"Relaunch the app with ",(0,i.kt)("inlineCode",{parentName:"p"},"ns run ios")," and the title bar should show the version."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/nativescript4.png",alt:"NativeScript Step 4"})),(0,i.kt)("p",null,"5) Add the Import and Export buttons to the template:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="src/app/item/items.component.html"',title:'"src/app/item/items.component.html"'},'<ActionBar [title]="version"></ActionBar>\n\n\x3c!-- highlight-start --\x3e\n<StackLayout>\n  <StackLayout orientation="horizontal">\n    <Button text="Import File" (tap)="import()" style="padding: 10px"></Button>\n    <Button text="Export File" (tap)="export()" style="padding: 10px"></Button>\n  </StackLayout>\n\x3c!-- highlight-end --\x3e\n  <ListView [items]="items">\n    <ng-template let-item="item">\n      <StackLayout [nsRouterLink]="[\'/item\', item.id]">\n        <Label [text]="item.name"></Label>\n      </StackLayout>\n    </ng-template>\n  </ListView>\n\x3c!-- highlight-next-line --\x3e\n</StackLayout>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/item/items.component.ts"',title:'"src/app/item/items.component.ts"'},"// highlight-start\nimport { version, utils, read, write } from 'xlsx';\nimport { Dialogs } from '@nativescript/core';\nimport { encoding } from '@nativescript/core/text';\nimport { File, Folder, knownFolders, path } from '@nativescript/core/file-system';\n// highlight-end\nimport { Component, OnInit } from '@angular/core'\n\nimport { Item } from './item'\nimport { ItemService } from './item.service'\n\n// highlight-start\nfunction get_handle_for_filename(filename: string): [File, string] {\n  const target: Folder = knownFolders.documents() || knownFolders.ios.sharedPublic();\n  const url: string = path.normalize(target.path + \"///\" + filename);\n  return [File.fromPath(url), url];\n}\n// highlight-end\n\n@Component({\n  selector: 'ns-items',\n  templateUrl: './items.component.html',\n})\nexport class ItemsComponent implements OnInit {\n  items: Array<Item>\n  version: string = `SheetJS - ${version}`;\n\n  constructor(private itemService: ItemService) {}\n\n  ngOnInit(): void {\n    this.items = this.itemService.getItems()\n  }\n\n  // highlight-start\n  /* Import button */\n  async import() {\n  }\n\n  /* Export button */\n  async export() {\n  }\n  // highlight-end\n}\n")),(0,i.kt)("p",null,"Restart the app process and two buttons should show up at the top:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/nativescript5.png",alt:"NativeScript Step 5"})),(0,i.kt)("p",null,"6) Implement import and export:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/item/items.component.ts"',title:'"src/app/item/items.component.ts"'},"import { version, utils, read, write } from 'xlsx';\nimport { Dialogs } from '@nativescript/core';\nimport { encoding } from '@nativescript/core/text';\nimport { File, Folder, knownFolders, path } from '@nativescript/core/file-system';\nimport { Component, OnInit } from '@angular/core'\n\nimport { Item } from './item'\nimport { ItemService } from './item.service'\n\nfunction get_handle_for_filename(filename: string): [File, string] {\n  const target: Folder = knownFolders.documents() || knownFolders.ios.sharedPublic();\n  const url: string = path.normalize(target.path + \"///\" + filename);\n  return [File.fromPath(url), url];\n}\n\n@Component({\n  selector: 'ns-items',\n  templateUrl: './items.component.html',\n})\nexport class ItemsComponent implements OnInit {\n  items: Array<Item>\n  version: string = `SheetJS - ${version}`;\n\n  constructor(private itemService: ItemService) {}\n\n  ngOnInit(): void {\n    this.items = this.itemService.getItems()\n  }\n\n  /* Import button */\n  async import() {\n    // highlight-start\n    /* find appropriate path */\n    const [file, url] = get_handle_for_filename(\"SheetJSNS.csv\");\n\n    try {\n      /* get binary string */\n      const bstr: string = await file.readText(encoding.ISO_8859_1);\n\n      /* read workbook */\n      const wb = read(bstr, { type: \"binary\" });\n\n      /* grab first sheet */\n      const wsname: string = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n\n      /* update table */\n      this.items = utils.sheet_to_json<Item>(ws);\n      Dialogs.alert(`Attempting to read to ${filename} in ${url}`);\n    } catch(e) { Dialogs.alert(e.message); }\n    // highlight-end\n  }\n\n  /* Export button */\n  async export() {\n    // highlight-start\n    /* find appropriate path */\n    const [file, url] = get_handle_for_filename(\"SheetJSNS.csv\");\n\n    try {\n      /* create worksheet from data */\n      const ws = utils.json_to_sheet(this.items);\n\n      /* create workbook from worksheet */\n      const wb = utils.book_new();\n      utils.book_append_sheet(wb, ws, \"Sheet1\");\n\n      /* generate binary string */\n      const wbout: string = write(wb, { bookType: 'csv', type: 'binary' });\n\n      /* attempt to save binary string to file */\n      await file.writeText(wbout, encoding.ISO_8859_1);\n      Dialogs.alert(`Wrote to ${filename} in ${url}`);\n    } catch(e) { Dialogs.alert(e.message); }\n    // highlight-end\n  }\n}\n")),(0,i.kt)("p",null,"Restart the app process."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Testing")),(0,i.kt)("p",null,"The app can be tested with the following sequence in the simulator:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Hit "Export File".  A dialog will print where the file was written')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Open that file with a text editor.  It will be a 3-column CSV:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csv"},"id,name,role\n1,Ter Stegen,Goalkeeper\n3,Piqu\xe9,Defender\n4,I. Rakitic,Midfielder\n...\n")),(0,i.kt)("p",null,"After the header row, add the line ",(0,i.kt)("inlineCode",{parentName:"p"},"0,SheetJS,Library"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csv"},"id,name,role\n0,SheetJS,Library\n1,Ter Stegen,Goalkeeper\n3,Piqu\xe9,Defender\n...\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Hit "Import File".  A dialog will print the path of the file that was read.\nThe first item in the list will change:')),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/nativescript7.png",alt:"NativeScript Step 7"}))),(0,i.kt)("h2",{id:"quasar"},"Quasar"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This demo was tested on an Intel Mac on 2022 August 14. Quasar version ",(0,i.kt)("inlineCode",{parentName:"p"},"2.7.7"),".\nThe iOS simulator runs iOS 15.5 on an iPhone SE 3rd generation.")),(0,i.kt)("p",null,"This demo will use the Quasar ViteJS starter project with VueJS and Cordova."),(0,i.kt)("h3",{id:"integration-details-1"},"Integration Details"),(0,i.kt)("p",null,"The complete solution uses ",(0,i.kt)("inlineCode",{parentName:"p"},"cordova-plugin-file")," for file operations.  It can\nbe installed like any other Cordova plugin:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd src-cordova\ncordova plugin add cordova-plugin-file\ncd ..\n")),(0,i.kt)("h4",{id:"reading-data"},"Reading data"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"q-file")," component presents an API reminiscent of File Input elements:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<q-file label="Load File" filled label-color="orange" @input="updateFile"/>\n')),(0,i.kt)("p",null,"When binding to the ",(0,i.kt)("inlineCode",{parentName:"p"},"input")," element, the callback receives an ",(0,i.kt)("inlineCode",{parentName:"p"},"Event")," object:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { read } from 'xlsx';\n\n// assuming `todos` is a standard VueJS `ref`\nasync function updateFile(v) { try {\n  // `v.target.files[0]` is the desired file object\n  const files = (v.target as HTMLInputElement).files;\n  if(!files || files.length == 0) return;\n\n  // read first file\n  const wb = read(await files[0].arrayBuffer());\n\n  // get data of first worksheet as an array of objects\n  const data = utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]]);\n\n  // update state\n  todos.value = data.map(row => ({id: row.Index, content: row.Name}));\n\n} catch(e) { console.log(e); } }\n")),(0,i.kt)("h4",{id:"writing-data"},"Writing data"),(0,i.kt)("p",null,'The API is shaped like the File and Directory Entries API.  For clarity, since\nthe code is a "pyramid of doom", the error handlers are omitted:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { write } from \'xlsx\';\n\n// on iOS and android, `XLSX.write` with type "buffer" returns a `Uint8Array`\nconst u8: Uint8Array = write(wb, {bookType: "xlsx", type: "buffer"});\n// Request filesystem access for persistent storage\nwindow.requestFileSystem(window.PERSISTENT, 0, function(fs) {\n  // Request a handle to "SheetJSQuasar.xlsx", making a new file if necessary\n  fs.root.getFile("SheetJSQuasar.xlsx", {create: true}, entry => {\n    // Request a FileWriter for writing data\n    entry.createWriter(writer => {\n      // The FileWriter API needs an actual Blob\n      const data = new Blob([u8], {type: "application/vnd.ms-excel"});\n      // This callback is called if the write is successful\n      writer.onwriteend = () => {\n        // TODO: show a dialog\n      };\n      // writer.onerror will be invoked if there is an error in writing\n\n      // write the data\n      writer.write(data);\n    });\n  });\n});\n')),(0,i.kt)("h3",{id:"demo-2"},"Demo"),(0,i.kt)("p",null,"The demo draws from the ViteJS example.  Familiarity with VueJS and TypeScript\nis assumed."),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Complete Example")," (click to show)"),(0,i.kt)("p",null,"0) Ensure all of the dependencies are installed.  Install the CLI globally:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -g @quasar/cli cordova\n")),(0,i.kt)("p",null,"(you may need to run ",(0,i.kt)("inlineCode",{parentName:"p"},"sudo npm i -g")," if there are permission issues)"),(0,i.kt)("p",null,"1) Create a new app:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm init quasar\n")),(0,i.kt)("p",null,"When prompted:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'"What would you like to build?": ',(0,i.kt)("inlineCode",{parentName:"li"},"App with Quasar CLI")),(0,i.kt)("li",{parentName:"ul"},'"Project folder": ',(0,i.kt)("inlineCode",{parentName:"li"},"SheetJSQuasar")),(0,i.kt)("li",{parentName:"ul"},'"Pick Quasar version": ',(0,i.kt)("inlineCode",{parentName:"li"},"Quasar v2 (Vue 3 | latest and greatest)")),(0,i.kt)("li",{parentName:"ul"},'"Pick script type": ',(0,i.kt)("inlineCode",{parentName:"li"},"Typescript")),(0,i.kt)("li",{parentName:"ul"},'"Pick Quasar App CLI variant": ',(0,i.kt)("inlineCode",{parentName:"li"},"Quasar App CLI with Vite")),(0,i.kt)("li",{parentName:"ul"},'"Package name": (just press enter, it will use the default ',(0,i.kt)("inlineCode",{parentName:"li"},"sheetjsquasar")),(0,i.kt)("li",{parentName:"ul"},'"Project product name": ',(0,i.kt)("inlineCode",{parentName:"li"},"SheetJSQuasar")),(0,i.kt)("li",{parentName:"ul"},'"Project description": ',(0,i.kt)("inlineCode",{parentName:"li"},"SheetJS + Quasar")),(0,i.kt)("li",{parentName:"ul"},'"Author": (just press enter, it will use your git config settings)'),(0,i.kt)("li",{parentName:"ul"},'"Pick a Vue component style": ',(0,i.kt)("inlineCode",{parentName:"li"},"Composition API")),(0,i.kt)("li",{parentName:"ul"},'"Pick your CSS preprocessor": ',(0,i.kt)("inlineCode",{parentName:"li"},"None")),(0,i.kt)("li",{parentName:"ul"},'"Check the features needed for your project": Deselect everything'),(0,i.kt)("li",{parentName:"ul"},'"Install project dependencies": ',(0,i.kt)("inlineCode",{parentName:"li"},"No"))),(0,i.kt)("p",null,"2) Install dependencies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd SheetJSQuasar\nnpm i\nnpm i --save https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz\n")),(0,i.kt)("p",null,"3) Set up Cordova:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"quasar mode add cordova\n")),(0,i.kt)("p",null,"When prompted, enter the app id ",(0,i.kt)("inlineCode",{parentName:"p"},"org.sheetjs.quasar"),"."),(0,i.kt)("p",null,"It will create a new ",(0,i.kt)("inlineCode",{parentName:"p"},"src-cordova")," folder. Continue in that folder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd src-cordova\ncordova platform add ios\ncordova plugin add cordova-plugin-wkwebview-engine\ncordova plugin add cordova-plugin-file\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"If there is an error ",(0,i.kt)("inlineCode",{parentName:"p"},"Could not load API for iOS project"),", it needs to be reset:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cordova platform rm ios\ncordova platform add ios\ncordova plugin add cordova-plugin-file\n"))),(0,i.kt)("p",null,"Return to the project directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd ..\n")),(0,i.kt)("p",null,"4) Start the development server:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"quasar dev -m ios\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"If the app is blank or not refreshing, delete the app and close the simulator,\nthen restart the development process.")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/quasar4.png",alt:"Quasar Step 4"})),(0,i.kt)("p",null,"5) Add the Dialog plugin to ",(0,i.kt)("inlineCode",{parentName:"p"},"quasar.config.js"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="quasar.config.js"',title:'"quasar.config.js"'},"      // Quasar plugins\n      // highlight-next-line\n      plugins: ['Dialog']\n")),(0,i.kt)("p",null,"6) In the template section of ",(0,i.kt)("inlineCode",{parentName:"p"},"src/pages/IndexPage.vue"),", add a Save button and\na Load file picker component at the bottom of the page:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="src/pages/IndexPage.vue"',title:'"src/pages/IndexPage.vue"'},'    \x3c!-- highlight-start --\x3e\n    <q-btn-group>\n      <q-file label="Load File" filled label-color="orange" @input="updateFile"/>\n      <q-btn label="Save File" @click="saveFile" />\n    </q-btn-group>\n    \x3c!-- highlight-end --\x3e\n  </q-page>\n</template>\n')),(0,i.kt)("p",null,"This uses two functions that should be added to the component script:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/pages/IndexPage.vue"',title:'"src/pages/IndexPage.vue"'},"    const meta = ref<Meta>({\n      totalCount: 1200\n    });\n// highlight-start\n    function saveFile() {\n    }\n    async function updateFile(v) {\n    }\n    return { todos, meta, saveFile, updateFile };\n// highlight-end\n  }\n});\n\n")),(0,i.kt)("p",null,"The app should now show two buttons at the bottom:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/quasar6.png",alt:"Quasar Step 6"})),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"If the app is blank or not refreshing, delete the app and close the simulator,\nthen restart the development process.")),(0,i.kt)("p",null,"7) Wire up the ",(0,i.kt)("inlineCode",{parentName:"p"},"updateFile")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/pages/IndexPage.vue"',title:'"src/pages/IndexPage.vue"'},"import { defineComponent, ref } from 'vue';\n// highlight-start\nimport { read, write, utils } from 'xlsx';\nimport { useQuasar } from 'quasar';\n// highlight-end\n\nexport default defineComponent({\n// ...\n// highlight-start\n    const $q = useQuasar();\n    function dialogerr(e) { $q.dialog({title: \"Error!\", message: e.message || String(e)}); }\n// highlight-end\n    function saveFile() {\n    }\n    async function updateFile(v) {\n// highlight-start\n      try {\n        const files = (v.target as HTMLInputElement).files;\n        if(!files || files.length == 0) return;\n\n        const wb = read(await files[0].arrayBuffer());\n\n        const data = utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]]);\n        todos.value = data.map(row => ({id: row.Index, content: row.Name}));\n      } catch(e) { dialogerr(e); }\n// highlight-end\n    }\n")),(0,i.kt)("p",null,"To test that reading works:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Download ",(0,i.kt)("a",{parentName:"li",href:"https://sheetjs.com/pres.numbers"},"https://sheetjs.com/pres.numbers")),(0,i.kt)("li",{parentName:"ul"},"In the simulator, click the Home icon to return to the home screen"),(0,i.kt)("li",{parentName:"ul"},'Click on the "Files" icon'),(0,i.kt)("li",{parentName:"ul"},"Click and drag ",(0,i.kt)("inlineCode",{parentName:"li"},"pres.numbers")," from a Finder window into the simulator.")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/quasar7a.png",alt:"Quasar Step 7 save file"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Make sure "On My iPhone" is highlighted and select "Save"'),(0,i.kt)("li",{parentName:"ul"},"Click the Home icon again then select the ",(0,i.kt)("inlineCode",{parentName:"li"},"SheetJSQuasar")," app"),(0,i.kt)("li",{parentName:"ul"},'Click the "Load" button, then select "Choose File" and select ',(0,i.kt)("inlineCode",{parentName:"li"},"pres"),":")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/quasar7b.png",alt:"Quasar Step 7 load file"})),(0,i.kt)("p",null,"Once selected, the screen should refresh with new contents:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/quasar7c.png",alt:"Quasar Step 7 new data"})),(0,i.kt)("p",null,"8) Wire up the ",(0,i.kt)("inlineCode",{parentName:"p"},"saveFile")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'    function saveFile() {\n// highlight-start\n      /* generate workbook from state */\n      const ws = utils.json_to_sheet(todos.value);\n      const wb = utils.book_new();\n      utils.book_append_sheet(wb, ws, "SheetJSQuasar");\n      const u8: Uint8Array = write(wb, {bookType: "xlsx", type: "buffer"});\n\n      /* save to file */\n      window.requestFileSystem(window.PERSISTENT, 0, function(fs) {\n        try {\n          fs.root.getFile("SheetJSQuasar.xlsx", {create: true}, entry => {\n            const msg = `File stored at ${$q.cordova.file.documentsDirectory} ${entry.fullPath}`;\n            entry.createWriter(writer => {\n              try {\n                const data = new Blob([u8], {type: "application/vnd.ms-excel"});\n                writer.onwriteend = () => {\n                  try {\n                    $q.dialog({title: "Success!", message: msg});\n                  } catch(e) { dialogerr(e); }\n                };\n                writer.onerror = dialogerr;\n                writer.write(data);\n              } catch(e) { dialogerr(e); }\n            }, dialogerr);\n          }, dialogerr);\n        } catch(e) { dialogerr(e) }\n      }, dialogerr);\n// highlight-end\n    }\n')),(0,i.kt)("p",null,"The page should revert to the old contents."),(0,i.kt)("p",null,"To test that writing works:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Click "Save File".  You will see a popup with a location:')),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/quasar8.png",alt:"Quasar Step 8"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Find the file and verify the contents are correct.  Run in a new terminal:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'find ~/Library/Developer/CoreSimulator -name SheetJSQuasar.xlsx |\n  while read x; do echo "$x"; npx xlsx-cli "$x"; done\n')),(0,i.kt)("p",null,"Since the contents reverted, you should see"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"SheetJSQuasar\nid,content\n1,ct1\n2,ct2\n3,ct3\n4,ct4\n5,ct5\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Use "Load File" to select ',(0,i.kt)("inlineCode",{parentName:"p"},"pres.numbers")," again.  Wait for the app to refresh.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Click "Save File", then re-run the command:'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'find ~/Library/Developer/CoreSimulator -name SheetJSQuasar.xlsx |\n  while read x; do echo "$x"; npx xlsx-cli "$x"; done\n')),(0,i.kt)("p",null,"The contents from ",(0,i.kt)("inlineCode",{parentName:"p"},"pres.numbers")," should show up now, with a new header row:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"SheetJSQuasar\nid,content\n42,Bill Clinton\n43,GeorgeW Bush\n44,Barack Obama\n45,Donald Trump\n46,Joseph Biden\n"))),(0,i.kt)("h2",{id:"ionic"},"Ionic"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This demo was tested on an Intel Mac on 2022 August 18 with Cordova.\nThe file integration uses ",(0,i.kt)("inlineCode",{parentName:"p"},"@ionic-native/file")," version ",(0,i.kt)("inlineCode",{parentName:"p"},"5.36.0"),"."),(0,i.kt)("p",{parentName:"admonition"},"The iOS simulator runs iOS 15.5 on an iPod Touch 7th Gen.")),(0,i.kt)("admonition",{title:"Telemetry",type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Before starting this demo, manually disable telemetry.  On Linux and MacOS:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'rm -rf ~/.ionic/\nmkdir ~/.ionic\ncat <<EOF > ~/.ionic/config.json\n{\n  "version": "6.20.1",\n  "telemetry": false,\n  "npmClient": "npm"\n}\nEOF\nnpx @capacitor/cli telemetry off\n')),(0,i.kt)("p",{parentName:"admonition"},"To verify telemetry was disabled:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx @ionic/cli config get -g telemetry\nnpx @capacitor/cli telemetry\n"))),(0,i.kt)("h3",{id:"cordova"},"Cordova"),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The latest version of Ionic uses CapacitorJS. These notes are for Cordova apps.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Array<Array<any>>")," neatly maps to a table with ",(0,i.kt)("inlineCode",{parentName:"p"},"ngFor"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ion-grid>\n  <ion-row *ngFor="let row of data">\n    <ion-col *ngFor="let val of row">\n      {{val}}\n    </ion-col>\n  </ion-row>\n</ion-grid>\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@ionic-native/file")," reads and writes files on devices. ",(0,i.kt)("inlineCode",{parentName:"p"},"readAsArrayBuffer"),"\nreturns ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayBuffer")," objects suitable for ",(0,i.kt)("inlineCode",{parentName:"p"},"array")," type, and ",(0,i.kt)("inlineCode",{parentName:"p"},"array")," type can\nbe converted to blobs that can be exported with ",(0,i.kt)("inlineCode",{parentName:"p"},"writeFile"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"/* read a workbook */\nconst ab: ArrayBuffer = await this.file.readAsArrayBuffer(url, filename);\nconst wb: XLSX.WorkBook = XLSX.read(bstr, {type: 'array'});\n\n/* write a workbook */\nconst wbout: ArrayBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\nlet blob = new Blob([wbout], {type: 'application/octet-stream'});\nthis.file.writeFile(url, filename, blob, {replace: true});\n")),(0,i.kt)("h3",{id:"demo-3"},"Demo"),(0,i.kt)("p",null,"The demo uses Cordova."),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Complete Example")," (click to show)"),(0,i.kt)("p",null,"0) Disable telemetry as noted in the warning."),(0,i.kt)("p",null,"Install required global dependencies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -g cordova-res @angular/cli native-run\n")),(0,i.kt)("p",null,"Follow the ",(0,i.kt)("a",{parentName:"p",href:"#demo"},"React Native demo")," to ensure iOS and Android sims are ready."),(0,i.kt)("p",null,"1) Create a new project:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx @ionic/cli start SheetJSIonic blank --type angular --cordova --quiet --no-git --no-link --confirm\n")),(0,i.kt)("p",null,"If a prompt discusses Cordova and Capacitor, enter ",(0,i.kt)("inlineCode",{parentName:"p"},"Yes")," to continue."),(0,i.kt)("p",null,"If a prompt asks about creating an Ionic account, enter ",(0,i.kt)("inlineCode",{parentName:"p"},"N")," to opt out."),(0,i.kt)("p",null,"2) Set up Cordova:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx @ionic/cli cordova platform add ios --confirm\nnpx @ionic/cli cordova plugin add cordova-plugin-file\nnpm install --save @ionic-native/core @ionic-native/file @ionic/cordova-builders\n")),(0,i.kt)("p",null,"3) Install dependencies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz\n")),(0,i.kt)("p",null,"4) Add ",(0,i.kt)("inlineCode",{parentName:"p"},"@ionic-native/file")," to the module.  Differences highlighted below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/app.module.ts"',title:'"src/app/app.module.ts"'},"import { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\n\n// highlight-next-line\nimport { File } from '@ionic-native/file/ngx';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, IonicModule.forRoot(), AppRoutingModule],\n\n  // highlight-next-line\n  providers: [File, { provide: RouteReuseStrategy, useClass: IonicRouteStrategy }],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n")),(0,i.kt)("p",null,"5) Download ",(0,i.kt)("a",{parentName:"p",href:"pathname:///ionic/home.page.ts"},(0,i.kt)("inlineCode",{parentName:"a"},"home.page.ts"))," and replace:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl -o src/app/home/home.page.ts -L https://docs.sheetjs.com/ionic/home.page.ts\n")),(0,i.kt)("p",null,"6) Test the app:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx @ionic/cli cordova emulate ios\n"))),(0,i.kt)("h2",{id:"capacitorjs"},"CapacitorJS"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This demo was tested on an Intel Mac on 2022 August 26 with Svelte."),(0,i.kt)("p",{parentName:"admonition"},"The iOS simulator runs iOS 15.5 on an iPhone 13 Pro Max.")),(0,i.kt)("admonition",{title:"Telemetry",type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Before starting this demo, manually disable telemetry.  On Linux and MacOS:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx @capacitor/cli telemetry off\n")),(0,i.kt)("p",{parentName:"admonition"},"To verify telemetry was disabled:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx @capacitor/cli telemetry\n"))),(0,i.kt)("h3",{id:"integration-details-2"},"Integration Details"),(0,i.kt)("p",null,"This example uses Svelte, but the same principles apply to other frameworks."),(0,i.kt)("h4",{id:"reading-data-1"},"Reading data"),(0,i.kt)("p",null,"The standard HTML5 File Input element logic works in CapacitorJS:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<script>\nimport { read, utils } from \'xlsx\';\n\nlet html = "";\n\n/* show file picker, read file, load table */\nasync function importFile(evt) {\n  // highlight-start\n  const f = evt.target.files[0];\n  const wb = read(await f.arrayBuffer());\n  // highlight-end\n  const ws = wb.Sheets[wb.SheetNames[0]]; // get the first worksheet\n  html = utils.sheet_to_html(ws); // generate HTML and update state\n}\n<\/script>\n\n<main>\n  \x3c!-- highlight-next-line --\x3e\n  <input type="file" on:change={importFile}/>\n  <div bind:this={tbl}>{@html html}</div>\n</main>\n')),(0,i.kt)("h4",{id:"writing-data-1"},"Writing data"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@capacitor/filesystem")," can write Base64 strings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<script>\nimport { Filesystem, Directory } from \'@capacitor/filesystem\';\nimport { utils, writeXLSX } from \'xlsx\';\n\nlet html = "";\nlet tbl;\n\n/* get state data and export to XLSX */\nasync function exportFile() {\n  const elt = tbl.getElementsByTagName("TABLE")[0];\n  const wb = utils.table_to_book(elt);\n  /* generate Base64 string for Capacitor */\n  // highlight-start\n  const data = writeXLSX(wb, { type: "base64" });\n  await Filesystem.writeFile({\n    data,\n    path: "SheetJSCap.xlsx",\n    directory: Directory.Documents\n  }); // write file\n  // highlight-end\n}\n\n<\/script>\n\n<main>\n  <button on:click={exportFile}>Export XLSX</button>\n  <div bind:this={tbl}>{@html html}</div>\n</main>\n')),(0,i.kt)("h3",{id:"demo-4"},"Demo"),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Complete Example")," (click to show)"),(0,i.kt)("p",null,"0) Disable telemetry as noted in the warning."),(0,i.kt)("p",null,"Follow the ",(0,i.kt)("a",{parentName:"p",href:"#demo"},"React Native demo")," to ensure iOS and Android sims are ready."),(0,i.kt)("p",null,"1) Create a new Svelte project:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm create vite@latest sheetjs-cap -- --template svelte\ncd sheetjs-cap\n")),(0,i.kt)("p",null,"2) Install dependencies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz\nnpm i --save @capacitor/core @capacitor/cli @capacitor/ios @capacitor/filesystem\n")),(0,i.kt)("p",null,"3) Create CapacitorJS structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx cap init sheetjs-cap com.sheetjs.cap --web-dir=dist\nnpx cap add ios\n")),(0,i.kt)("p",null,"4) Replace the contents of ",(0,i.kt)("inlineCode",{parentName:"p"},"src/App.svelte")," with the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="src/App.svelte"',title:'"src/App.svelte"'},'<script>\nimport { Filesystem, Directory, Encoding } from \'@capacitor/filesystem\';\nimport { onMount } from \'svelte\';\nimport { read, utils, version, writeXLSX } from \'xlsx\';\n\nlet html = "";\nlet tbl;\n\n/* Fetch and update the state once */\nonMount(async() => {\n  const f = await (await fetch("https://sheetjs.com/pres.xlsx")).arrayBuffer();\n  const wb = read(f); // parse the array buffer\n  const ws = wb.Sheets[wb.SheetNames[0]]; // get the first worksheet\n  html = utils.sheet_to_html(ws); // generate HTML and update state\n});\n\n/* get state data and export to XLSX */\nasync function exportFile() {\n  const elt = tbl.getElementsByTagName("TABLE")[0];\n  const wb = utils.table_to_book(elt);\n  /* generate Base64 string for Capacitor */\n  const data = writeXLSX(wb, { type: "base64" });\n  /* write */\n  await Filesystem.writeFile({\n    path: "SheetJSCap.xlsx",\n    data,\n    directory: Directory.Documents\n  });\n}\n\n/* show file picker, read file, load table */\nasync function importFile(evt) {\n  const f = evt.target.files[0];\n  const wb = read(await f.arrayBuffer());\n  const ws = wb.Sheets[wb.SheetNames[0]]; // get the first worksheet\n  html = utils.sheet_to_html(ws); // generate HTML and update state\n}\n<\/script>\n\n<main>\n  <h3>SheetJS \xd7 CapacitorJS { version }</h3>\n  <input type="file" on:change={importFile}/>\n  <button on:click={exportFile}>Export XLSX</button>\n  <div bind:this={tbl}>{@html html}</div>\n</main>\n')),(0,i.kt)("p",null,"5) Test the app:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm run build; npx cap sync; npx cap run ios\n")),(0,i.kt)("p",null,"There are 3 steps: build the Svelte app, sync with CapacitorJS, and run sim.\nThis sequence must be run every time to ensure changes are propagated.")))}u.isMDXComponent=!0}}]);