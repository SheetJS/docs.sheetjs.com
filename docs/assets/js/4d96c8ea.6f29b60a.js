"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4150],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=p(n),h=r,u=d["".concat(s,".").concat(h)]||d[h]||c[h]||a;return n?i.createElement(u,o(o({ref:t},m),{},{components:n})):i.createElement(u,o({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6343:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var i=n(7462),r=(n(7294),n(3905));const a={sidebar_position:19,title:"iOS and Android Apps"},o=void 0,l={unversionedId:"demos/mobile",id:"demos/mobile",title:"iOS and Android Apps",description:"Many mobile app frameworks mix JavaScript / CSS / HTML5 concepts with native",source:"@site/docs/03-demos/19-mobile.md",sourceDirName:"03-demos",slug:"/demos/mobile",permalink:"/docs/demos/mobile",draft:!1,tags:[],version:"current",sidebarPosition:19,frontMatter:{sidebar_position:19,title:"iOS and Android Apps"},sidebar:"tutorialSidebar",previous:{title:"JavaScript Engines",permalink:"/docs/demos/engines"},next:{title:"Content and Site Generation",permalink:"/docs/demos/content"}},s={},p=[{value:"NativeScript",id:"nativescript",level:2},{value:"Integration Details",id:"integration-details",level:3},{value:"Demo",id:"demo",level:3}],m={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Many mobile app frameworks mix JavaScript / CSS / HTML5 concepts with native\nextensions and libraries to create a hybrid development experience.  Developers\nwell-versed in web technologies can now build actual mobile applications that\nrun on iOS and Android!"),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"The ecosystem has broken backwards-compatibility many times!")),(0,r.kt)("p",{parentName:"admonition"},"iOS and Android, as well as the underlying JavaScript frameworks, make breaking\nchanges regularly.  The demos were tested against emulators / real devices at\nsome point in time.  A framework or OS change can render the demos inoperable."),(0,r.kt)("p",{parentName:"admonition"},"Each demo section will mention test dates and platform versions.")),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"./engines"},'"JavaScript Engines"'),' section includes samples for JavaScript\nengines used in the mobile app frameworks.  SheetJS libraries have been tested\nin the relevant engines and should "just work" with some caveats.'),(0,r.kt)("admonition",{title:"readFile and writeFile",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"XLSX.readFile")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"XLSX.writeFile")," do not work in mobile apps!  The demos\ninclude platform-specific details for fetching file data for ",(0,r.kt)("inlineCode",{parentName:"p"},"XLSX.read")," and\nwriting file data generated by ",(0,r.kt)("inlineCode",{parentName:"p"},"XLSX.write"),"."),(0,r.kt)("p",{parentName:"admonition"},"Some platforms provide this functionality as part of the standard library.\nOther platforms, including React Native, do not.  When the platform does not\nprovide, usually there are third-party modules to provide needed functionality.")),(0,r.kt)("h2",{id:"nativescript"},"NativeScript"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This demo was tested on an Intel Mac on 2022 August 10.  NativeScript version\n(as verified with ",(0,r.kt)("inlineCode",{parentName:"p"},"ns --version"),") is ",(0,r.kt)("inlineCode",{parentName:"p"},"8.3.2"),".  The iOS simulator runs iOS 15.5\non an iPhone SE 3rd generation.")),(0,r.kt)("admonition",{title:"Binary Data issues",type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"NativeScript will not safely transmit binary or UTF8 strings. XLSB, NUMBERS,\nXLSX, XLS, ODS, SYLK, and DBF exports are known to be mangled."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/NativeScript/NativeScript/issues/9586"},"This is a known NativeScript bug")),(0,r.kt)("p",{parentName:"admonition"},"This demo will focus on ASCII CSV files.  Once the bug is resolved, XLSX and\nother formats will be supported.")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@nativescript/core/file-system")," package provides classes for file access."),(0,r.kt)("h3",{id:"integration-details"},"Integration Details"),(0,r.kt)("p",null,"Reading and writing data require a file handle.  The following snippet searches\ntypical document folders for a specified filename:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { File, Folder, knownFolders, path } from '@nativescript/core/file-system';\n\nfunction get_handle_for_filename(filename: string): File {\n  const target: Folder = knownFolders.documents() || knownFolders.ios.sharedPublic();\n  const url: string = path.normalize(target.path + \"///\" + filename);\n  return File.fromPath(url);\n}\n")),(0,r.kt)("p",null,"The encoding ",(0,r.kt)("inlineCode",{parentName:"p"},"ISO_8859_1")," spiritually resembles the ",(0,r.kt)("inlineCode",{parentName:"p"},'"binary"')," SheetJS type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Reading data")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"File#readText(encoding.ISO_8859_1)")," returns strings compatible with ",(0,r.kt)("inlineCode",{parentName:"p"},'"binary"')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'/* get binary string */\nconst bstr: string = await file.readText(encoding.ISO_8859_1);\n\n/* read workbook */\nconst wb = read(bstr, { type: "binary" });\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Writing data")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"File#writeText")," with the ",(0,r.kt)("inlineCode",{parentName:"p"},"ISO_8859_1")," encoding accepts ",(0,r.kt)("inlineCode",{parentName:"p"},'"binary"')," strings with\nthe caveat listed in the warning at the top of this section:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"/* generate binary string */\nconst bstr: string = write(wb, { bookType: 'csv', type: 'binary' });\n\n/* attempt to save binary string to file */\nawait file.writeText(bstr, encoding.ISO_8859_1);\n")),(0,r.kt)("h3",{id:"demo"},"Demo"),(0,r.kt)("p",null,"The demo builds off of the NativeScript + Angular example.  Familiarity with\nwith Angular and TypeScript is assumed."),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Complete Example")," (click to show)"),(0,r.kt)("p",null,'0) Follow the official Environment Setup instructions (tested with "macOS + iOS")'),(0,r.kt)("p",null,"1) Create a skeleton NativeScript + Angular app:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ns create SheetJSNS --ng\n")),(0,r.kt)("p",null,"2) Launch the app in the iOS simulator to verify that the demo built properly:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd SheetJSNS\nns run ios\n")),(0,r.kt)("p",null,"(this may take a while)"),(0,r.kt)("p",null,"Once the simulator launches and the test app is displayed, end the script by\nselecting the terminal and entering the key sequence ",(0,r.kt)("inlineCode",{parentName:"p"},"CTRL + C")),(0,r.kt)("p",null,"3) From the project folder, install the library:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz\n")),(0,r.kt)("p",null,"4) To confirm the library was loaded, change the title to show the version.  The\ndifferences are highlighted."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"src/app/item/items.component.ts")," imports the version string to the component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/item/items.component.ts"',title:'"src/app/item/items.component.ts"'},"// highlight-next-line\nimport { version } from 'xlsx';\nimport { Component, OnInit } from '@angular/core'\n\nimport { Item } from './item'\nimport { ItemService } from './item.service'\n\n@Component({\n  selector: 'ns-items',\n  templateUrl: './items.component.html',\n})\nexport class ItemsComponent implements OnInit {\n  items: Array<Item>\n  // highlight-next-line\n  version = `SheetJS - ${version}`;\n\n  constructor(private itemService: ItemService) {}\n\n  ngOnInit(): void {\n    this.items = this.itemService.getItems()\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"src/app/item/items.component.html")," references the version in the title:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="src/app/item/items.component.html"',title:'"src/app/item/items.component.html"'},'\x3c!-- highlight-next-line --\x3e\n<ActionBar [title]="version"></ActionBar>\n\n<GridLayout>\n  <ListView [items]="items">\n    <ng-template let-item="item">\n      <StackLayout [nsRouterLink]="[\'/item\', item.id]">\n        <Label [text]="item.name"></Label>\n      </StackLayout>\n    </ng-template>\n  </ListView>\n</GridLayout>\n')),(0,r.kt)("p",null,"Relaunch the app with ",(0,r.kt)("inlineCode",{parentName:"p"},"ns run ios")," and the title bar should show the version."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"/mobile/nativescript4.png",alt:"NativeScript Step 4"})),(0,r.kt)("p",null,"5) Add the Import and Export buttons to the template:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="src/app/item/items.component.html"',title:'"src/app/item/items.component.html"'},'<ActionBar [title]="version"></ActionBar>\n\n\x3c!-- highlight-start --\x3e\n<StackLayout>\n  <StackLayout orientation="horizontal">\n    <Button text="Import File" (tap)="import()" style="padding: 10px"></Button>\n    <Button text="Export File" (tap)="export()" style="padding: 10px"></Button>\n  </StackLayout>\n\x3c!-- highlight-end --\x3e\n  <ListView [items]="items">\n    <ng-template let-item="item">\n      <StackLayout [nsRouterLink]="[\'/item\', item.id]">\n        <Label [text]="item.name"></Label>\n      </StackLayout>\n    </ng-template>\n  </ListView>\n\x3c!-- highlight-next-line --\x3e\n</StackLayout>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/item/items.component.ts"',title:'"src/app/item/items.component.ts"'},"// highlight-start\nimport { version, utils, read, write } from 'xlsx';\nimport { Dialogs } from '@nativescript/core';\nimport { encoding } from '@nativescript/core/text';\nimport { File, Folder, knownFolders, path } from '@nativescript/core/file-system';\n// highlight-end\nimport { Component, OnInit } from '@angular/core'\n\nimport { Item } from './item'\nimport { ItemService } from './item.service'\n\n// highlight-start\nfunction get_handle_for_filename(filename: string): [File, string] {\n  const target: Folder = knownFolders.documents() || knownFolders.ios.sharedPublic();\n  const url: string = path.normalize(target.path + \"///\" + filename);\n  return [File.fromPath(url), url];\n}\n// highlight-end\n\n@Component({\n  selector: 'ns-items',\n  templateUrl: './items.component.html',\n})\nexport class ItemsComponent implements OnInit {\n  items: Array<Item>\n  version: string = `SheetJS - ${version}`;\n\n  constructor(private itemService: ItemService) {}\n\n  ngOnInit(): void {\n    this.items = this.itemService.getItems()\n  }\n\n  // highlight-start\n  /* Import button */\n  async import() {\n  }\n\n  /* Export button */\n  async export() {\n  }\n  // highlight-end\n}\n")),(0,r.kt)("p",null,"Restart the app process and two buttons should show up at the top:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"/mobile/nativescript5.png",alt:"NativeScript Step 5"})),(0,r.kt)("p",null,"6) Implement import and export:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/item/items.component.ts"',title:'"src/app/item/items.component.ts"'},"import { version, utils, read, write } from 'xlsx';\nimport { Dialogs } from '@nativescript/core';\nimport { encoding } from '@nativescript/core/text';\nimport { File, Folder, knownFolders, path } from '@nativescript/core/file-system';\nimport { Component, OnInit } from '@angular/core'\n\nimport { Item } from './item'\nimport { ItemService } from './item.service'\n\nfunction get_handle_for_filename(filename: string): [File, string] {\n  const target: Folder = knownFolders.documents() || knownFolders.ios.sharedPublic();\n  const url: string = path.normalize(target.path + \"///\" + filename);\n  return [File.fromPath(url), url];\n}\n\n@Component({\n  selector: 'ns-items',\n  templateUrl: './items.component.html',\n})\nexport class ItemsComponent implements OnInit {\n  items: Array<Item>\n  version: string = `SheetJS - ${version}`;\n\n  constructor(private itemService: ItemService) {}\n\n  ngOnInit(): void {\n    this.items = this.itemService.getItems()\n  }\n\n  /* Import button */\n  async import() {\n    // highlight-start\n    /* find appropriate path */\n    const [file, url] = get_handle_for_filename(\"SheetJSNS.csv\");\n\n    try {\n      /* get binary string */\n      const bstr: string = await file.readText(encoding.ISO_8859_1);\n\n      /* read workbook */\n      const wb = read(bstr, { type: \"binary\" });\n\n      /* grab first sheet */\n      const wsname: string = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n\n      /* update table */\n      this.items = utils.sheet_to_json<Item>(ws);\n      Dialogs.alert(`Attempting to read to ${filename} in ${url}`);\n    } catch(e) { Dialogs.alert(e.message); }\n    // highlight-end\n  }\n\n  /* Export button */\n  async export() {\n    // highlight-start\n    /* find appropriate path */\n    const [file, url] = get_handle_for_filename(\"SheetJSNS.csv\");\n\n    try {\n      /* create worksheet from data */\n      const ws = utils.json_to_sheet(this.items);\n\n      /* create workbook from worksheet */\n      const wb = utils.book_new();\n      utils.book_append_sheet(wb, ws, \"Sheet1\");\n\n      /* generate binary string */\n      const wbout: string = write(wb, { bookType: 'csv', type: 'binary' });\n\n      /* attempt to save binary string to file */\n      await file.writeText(wbout, encoding.ISO_8859_1);\n      Dialogs.alert(`Wrote to ${filename} in ${url}`);\n    } catch(e) { Dialogs.alert(e.message); }\n    // highlight-end\n  }\n}\n")),(0,r.kt)("p",null,"Restart the app process."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Testing")),(0,r.kt)("p",null,"The app can be tested with the following sequence in the simulator:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},'Hit "Export File".  A dialog will print where the file was written')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Open that file with a text editor.  It will be a 3-column CSV:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"id,name,role\n1,Ter Stegen,Goalkeeper\n3,Piqu\xe9,Defender\n4,I. Rakitic,Midfielder\n...\n")),(0,r.kt)("p",null,"After the header row, add the line ",(0,r.kt)("inlineCode",{parentName:"p"},"0,SheetJS,Library"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"id,name,role\n0,SheetJS,Library\n1,Ter Stegen,Goalkeeper\n3,Piqu\xe9,Defender\n...\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'Hit "Import File".  A dialog will print the path of the file that was read.\nThe first item in the list will change:')),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"/mobile/nativescript7.png",alt:"NativeScript Step 7"}))))}c.isMDXComponent=!0}}]);