"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4150],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(n),u=i,h=c["".concat(s,".").concat(u)]||c[u]||d[u]||r;return n?a.createElement(h,l(l({ref:t},m),{},{components:n})):a.createElement(h,l({ref:t},m))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6343:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:19,title:"iOS and Android Apps"},l=void 0,o={unversionedId:"demos/mobile",id:"demos/mobile",title:"iOS and Android Apps",description:"Many mobile app frameworks mix JavaScript / CSS / HTML5 concepts with native",source:"@site/docs/03-demos/19-mobile.md",sourceDirName:"03-demos",slug:"/demos/mobile",permalink:"/docs/demos/mobile",draft:!1,tags:[],version:"current",sidebarPosition:19,frontMatter:{sidebar_position:19,title:"iOS and Android Apps"},sidebar:"tutorialSidebar",previous:{title:"JavaScript Engines",permalink:"/docs/demos/engines"},next:{title:"Content and Site Generation",permalink:"/docs/demos/content"}},s={},p=[{value:"NativeScript",id:"nativescript",level:2},{value:"Integration Details",id:"integration-details",level:3},{value:"Demo",id:"demo",level:3},{value:"Quasar",id:"quasar",level:2},{value:"Integration Details",id:"integration-details-1",level:3},{value:"Reading data",id:"reading-data",level:4},{value:"Writing data",id:"writing-data",level:4},{value:"Demo",id:"demo-1",level:3}],m={toc:p};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Many mobile app frameworks mix JavaScript / CSS / HTML5 concepts with native\nextensions and libraries to create a hybrid development experience.  Developers\nwell-versed in web technologies can now build actual mobile applications that\nrun on iOS and Android!"),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"The ecosystem has broken backwards-compatibility many times!")),(0,i.kt)("p",{parentName:"admonition"},"iOS and Android, as well as the underlying JavaScript frameworks, make breaking\nchanges regularly.  The demos were tested against emulators / real devices at\nsome point in time.  A framework or OS change can render the demos inoperable."),(0,i.kt)("p",{parentName:"admonition"},"Each demo section will mention test dates and platform versions.")),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"./engines"},'"JavaScript Engines"'),' section includes samples for JavaScript\nengines used in the mobile app frameworks.  SheetJS libraries have been tested\nin the relevant engines and should "just work" with some caveats.'),(0,i.kt)("admonition",{title:"readFile and writeFile",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"XLSX.readFile")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"XLSX.writeFile")," do not work in mobile apps!  The demos\ninclude platform-specific details for fetching file data for ",(0,i.kt)("inlineCode",{parentName:"p"},"XLSX.read")," and\nwriting file data generated by ",(0,i.kt)("inlineCode",{parentName:"p"},"XLSX.write"),"."),(0,i.kt)("p",{parentName:"admonition"},"Some platforms provide this functionality as part of the standard library.\nOther platforms, including React Native, do not.  When the platform does not\nprovide, usually there are third-party modules to provide needed functionality.")),(0,i.kt)("h2",{id:"nativescript"},"NativeScript"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This demo was tested on an Intel Mac on 2022 August 10.  NativeScript version\n(as verified with ",(0,i.kt)("inlineCode",{parentName:"p"},"ns --version"),") is ",(0,i.kt)("inlineCode",{parentName:"p"},"8.3.2"),".  The iOS simulator runs iOS 15.5\non an iPhone SE 3rd generation.")),(0,i.kt)("admonition",{title:"Binary Data issues",type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"NativeScript will not safely transmit binary or UTF8 strings. XLSB, NUMBERS,\nXLSX, XLS, ODS, SYLK, and DBF exports are known to be mangled."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/NativeScript/NativeScript/issues/9586"},"This is a known NativeScript bug")),(0,i.kt)("p",{parentName:"admonition"},"This demo will focus on ASCII CSV files.  Once the bug is resolved, XLSX and\nother formats will be supported.")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@nativescript/core/file-system")," package provides classes for file access."),(0,i.kt)("h3",{id:"integration-details"},"Integration Details"),(0,i.kt)("p",null,"Reading and writing data require a file handle.  The following snippet searches\ntypical document folders for a specified filename:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { File, Folder, knownFolders, path } from '@nativescript/core/file-system';\n\nfunction get_handle_for_filename(filename: string): File {\n  const target: Folder = knownFolders.documents() || knownFolders.ios.sharedPublic();\n  const url: string = path.normalize(target.path + \"///\" + filename);\n  return File.fromPath(url);\n}\n")),(0,i.kt)("p",null,"The encoding ",(0,i.kt)("inlineCode",{parentName:"p"},"ISO_8859_1")," spiritually resembles the ",(0,i.kt)("inlineCode",{parentName:"p"},'"binary"')," SheetJS type"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reading data")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"File#readText(encoding.ISO_8859_1)")," returns strings compatible with ",(0,i.kt)("inlineCode",{parentName:"p"},'"binary"')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'/* get binary string */\nconst bstr: string = await file.readText(encoding.ISO_8859_1);\n\n/* read workbook */\nconst wb = read(bstr, { type: "binary" });\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Writing data")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"File#writeText")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"ISO_8859_1")," encoding accepts ",(0,i.kt)("inlineCode",{parentName:"p"},'"binary"')," strings with\nthe caveat listed in the warning at the top of this section:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"/* generate binary string */\nconst bstr: string = write(wb, { bookType: 'csv', type: 'binary' });\n\n/* attempt to save binary string to file */\nawait file.writeText(bstr, encoding.ISO_8859_1);\n")),(0,i.kt)("h3",{id:"demo"},"Demo"),(0,i.kt)("p",null,"The demo builds off of the NativeScript + Angular example.  Familiarity with\nwith Angular and TypeScript is assumed."),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Complete Example")," (click to show)"),(0,i.kt)("p",null,'0) Follow the official Environment Setup instructions (tested with "macOS + iOS")'),(0,i.kt)("p",null,"1) Create a skeleton NativeScript + Angular app:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ns create SheetJSNS --ng\n")),(0,i.kt)("p",null,"2) Launch the app in the iOS simulator to verify that the demo built properly:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd SheetJSNS\nns run ios\n")),(0,i.kt)("p",null,"(this may take a while)"),(0,i.kt)("p",null,"Once the simulator launches and the test app is displayed, end the script by\nselecting the terminal and entering the key sequence ",(0,i.kt)("inlineCode",{parentName:"p"},"CTRL + C")),(0,i.kt)("p",null,"3) From the project folder, install the library:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz\n")),(0,i.kt)("p",null,"4) To confirm the library was loaded, change the title to show the version.  The\ndifferences are highlighted."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"src/app/item/items.component.ts")," imports the version string to the component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/item/items.component.ts"',title:'"src/app/item/items.component.ts"'},"// highlight-next-line\nimport { version } from 'xlsx';\nimport { Component, OnInit } from '@angular/core'\n\nimport { Item } from './item'\nimport { ItemService } from './item.service'\n\n@Component({\n  selector: 'ns-items',\n  templateUrl: './items.component.html',\n})\nexport class ItemsComponent implements OnInit {\n  items: Array<Item>\n  // highlight-next-line\n  version = `SheetJS - ${version}`;\n\n  constructor(private itemService: ItemService) {}\n\n  ngOnInit(): void {\n    this.items = this.itemService.getItems()\n  }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"src/app/item/items.component.html")," references the version in the title:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="src/app/item/items.component.html"',title:'"src/app/item/items.component.html"'},'\x3c!-- highlight-next-line --\x3e\n<ActionBar [title]="version"></ActionBar>\n\n<GridLayout>\n  <ListView [items]="items">\n    <ng-template let-item="item">\n      <StackLayout [nsRouterLink]="[\'/item\', item.id]">\n        <Label [text]="item.name"></Label>\n      </StackLayout>\n    </ng-template>\n  </ListView>\n</GridLayout>\n')),(0,i.kt)("p",null,"Relaunch the app with ",(0,i.kt)("inlineCode",{parentName:"p"},"ns run ios")," and the title bar should show the version."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/nativescript4.png",alt:"NativeScript Step 4"})),(0,i.kt)("p",null,"5) Add the Import and Export buttons to the template:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="src/app/item/items.component.html"',title:'"src/app/item/items.component.html"'},'<ActionBar [title]="version"></ActionBar>\n\n\x3c!-- highlight-start --\x3e\n<StackLayout>\n  <StackLayout orientation="horizontal">\n    <Button text="Import File" (tap)="import()" style="padding: 10px"></Button>\n    <Button text="Export File" (tap)="export()" style="padding: 10px"></Button>\n  </StackLayout>\n\x3c!-- highlight-end --\x3e\n  <ListView [items]="items">\n    <ng-template let-item="item">\n      <StackLayout [nsRouterLink]="[\'/item\', item.id]">\n        <Label [text]="item.name"></Label>\n      </StackLayout>\n    </ng-template>\n  </ListView>\n\x3c!-- highlight-next-line --\x3e\n</StackLayout>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/item/items.component.ts"',title:'"src/app/item/items.component.ts"'},"// highlight-start\nimport { version, utils, read, write } from 'xlsx';\nimport { Dialogs } from '@nativescript/core';\nimport { encoding } from '@nativescript/core/text';\nimport { File, Folder, knownFolders, path } from '@nativescript/core/file-system';\n// highlight-end\nimport { Component, OnInit } from '@angular/core'\n\nimport { Item } from './item'\nimport { ItemService } from './item.service'\n\n// highlight-start\nfunction get_handle_for_filename(filename: string): [File, string] {\n  const target: Folder = knownFolders.documents() || knownFolders.ios.sharedPublic();\n  const url: string = path.normalize(target.path + \"///\" + filename);\n  return [File.fromPath(url), url];\n}\n// highlight-end\n\n@Component({\n  selector: 'ns-items',\n  templateUrl: './items.component.html',\n})\nexport class ItemsComponent implements OnInit {\n  items: Array<Item>\n  version: string = `SheetJS - ${version}`;\n\n  constructor(private itemService: ItemService) {}\n\n  ngOnInit(): void {\n    this.items = this.itemService.getItems()\n  }\n\n  // highlight-start\n  /* Import button */\n  async import() {\n  }\n\n  /* Export button */\n  async export() {\n  }\n  // highlight-end\n}\n")),(0,i.kt)("p",null,"Restart the app process and two buttons should show up at the top:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/nativescript5.png",alt:"NativeScript Step 5"})),(0,i.kt)("p",null,"6) Implement import and export:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/item/items.component.ts"',title:'"src/app/item/items.component.ts"'},"import { version, utils, read, write } from 'xlsx';\nimport { Dialogs } from '@nativescript/core';\nimport { encoding } from '@nativescript/core/text';\nimport { File, Folder, knownFolders, path } from '@nativescript/core/file-system';\nimport { Component, OnInit } from '@angular/core'\n\nimport { Item } from './item'\nimport { ItemService } from './item.service'\n\nfunction get_handle_for_filename(filename: string): [File, string] {\n  const target: Folder = knownFolders.documents() || knownFolders.ios.sharedPublic();\n  const url: string = path.normalize(target.path + \"///\" + filename);\n  return [File.fromPath(url), url];\n}\n\n@Component({\n  selector: 'ns-items',\n  templateUrl: './items.component.html',\n})\nexport class ItemsComponent implements OnInit {\n  items: Array<Item>\n  version: string = `SheetJS - ${version}`;\n\n  constructor(private itemService: ItemService) {}\n\n  ngOnInit(): void {\n    this.items = this.itemService.getItems()\n  }\n\n  /* Import button */\n  async import() {\n    // highlight-start\n    /* find appropriate path */\n    const [file, url] = get_handle_for_filename(\"SheetJSNS.csv\");\n\n    try {\n      /* get binary string */\n      const bstr: string = await file.readText(encoding.ISO_8859_1);\n\n      /* read workbook */\n      const wb = read(bstr, { type: \"binary\" });\n\n      /* grab first sheet */\n      const wsname: string = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n\n      /* update table */\n      this.items = utils.sheet_to_json<Item>(ws);\n      Dialogs.alert(`Attempting to read to ${filename} in ${url}`);\n    } catch(e) { Dialogs.alert(e.message); }\n    // highlight-end\n  }\n\n  /* Export button */\n  async export() {\n    // highlight-start\n    /* find appropriate path */\n    const [file, url] = get_handle_for_filename(\"SheetJSNS.csv\");\n\n    try {\n      /* create worksheet from data */\n      const ws = utils.json_to_sheet(this.items);\n\n      /* create workbook from worksheet */\n      const wb = utils.book_new();\n      utils.book_append_sheet(wb, ws, \"Sheet1\");\n\n      /* generate binary string */\n      const wbout: string = write(wb, { bookType: 'csv', type: 'binary' });\n\n      /* attempt to save binary string to file */\n      await file.writeText(wbout, encoding.ISO_8859_1);\n      Dialogs.alert(`Wrote to ${filename} in ${url}`);\n    } catch(e) { Dialogs.alert(e.message); }\n    // highlight-end\n  }\n}\n")),(0,i.kt)("p",null,"Restart the app process."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Testing")),(0,i.kt)("p",null,"The app can be tested with the following sequence in the simulator:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Hit "Export File".  A dialog will print where the file was written')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Open that file with a text editor.  It will be a 3-column CSV:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csv"},"id,name,role\n1,Ter Stegen,Goalkeeper\n3,Piqu\xe9,Defender\n4,I. Rakitic,Midfielder\n...\n")),(0,i.kt)("p",null,"After the header row, add the line ",(0,i.kt)("inlineCode",{parentName:"p"},"0,SheetJS,Library"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csv"},"id,name,role\n0,SheetJS,Library\n1,Ter Stegen,Goalkeeper\n3,Piqu\xe9,Defender\n...\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Hit "Import File".  A dialog will print the path of the file that was read.\nThe first item in the list will change:')),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/nativescript7.png",alt:"NativeScript Step 7"}))),(0,i.kt)("h2",{id:"quasar"},"Quasar"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This demo was tested on an Intel Mac on 2022 August 14. Quasar version ",(0,i.kt)("inlineCode",{parentName:"p"},"2.7.7"),".\nThe iOS simulator runs iOS 15.5 on an iPhone SE 3rd generation.")),(0,i.kt)("p",null,"This demo will focus on VueJS and Cordova with the Quasar Vite starter project."),(0,i.kt)("h3",{id:"integration-details-1"},"Integration Details"),(0,i.kt)("p",null,"The complete solution uses ",(0,i.kt)("inlineCode",{parentName:"p"},"cordova-plugin-file")," for file operations.  It can\nbe installed like any other Cordova plugin:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd src-cordova\ncordova plugin add cordova-plugin-file\ncd ..\n")),(0,i.kt)("h4",{id:"reading-data"},"Reading data"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"q-file")," component presents an API reminiscent of File Input elements:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<q-file label="Load File" filled label-color="orange" @input="updateFile"/>\n')),(0,i.kt)("p",null,"When binding to the ",(0,i.kt)("inlineCode",{parentName:"p"},"input")," element, the callback receives an ",(0,i.kt)("inlineCode",{parentName:"p"},"Event")," object:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { read } from 'xlsx';\n\n// assuming `todos` is a standard VueJS `ref`\nasync function updateFile(v) { try {\n  // `v.target.files[0]` is the desired file object\n  const files = (v.target as HTMLInputElement).files;\n  if(!files || files.length == 0) return;\n\n  // read first file\n  const wb = read(await files[0].arrayBuffer());\n\n  // get data of first worksheet as an array of objects\n  const data = utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]]);\n\n  // update state\n  todos.value = data.map(row => ({id: row.Index, content: row.Name}));\n\n} catch(e) { console.log(e); } }\n")),(0,i.kt)("h4",{id:"writing-data"},"Writing data"),(0,i.kt)("p",null,'The API is shaped like the File and Directory Entries API.  For clarity, since\nthe code is a "pyramid of doom", the error handlers are omitted:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { write } from \'xlsx\';\n\n// on iOS and android, `XLSX.write` with type "buffer" returns a `Uint8Array`\nconst u8: Uint8Array = write(wb, {bookType: "xlsx", type: "buffer"});\n// Request filesystem access for persistent storage\nwindow.requestFileSystem(window.PERSISTENT, 0, function(fs) {\n  // Request a handle to "SheetJSQuasar.xlsx", making a new file if necessary\n  fs.root.getFile("SheetJSQuasar.xlsx", {create: true}, entry => {\n    // Request a FileWriter for writing data\n    entry.createWriter(writer => {\n      // The FileWriter API needs an actual Blob\n      const data = new Blob([u8], {type: "application/vnd.ms-excel"});\n      // This callback is called if the write is successful\n      writer.onwriteend = () => {\n        // TODO: show a dialog\n      };\n      // writer.onerror will be invoked if there is an error in writing\n\n      // write the data\n      writer.write(data);\n    });\n  });\n});\n')),(0,i.kt)("h3",{id:"demo-1"},"Demo"),(0,i.kt)("p",null,"The demo builds off of the Vite example.  Familiarity with VueJS and TypeScript\nis assumed."),(0,i.kt)("details",{open:!0},(0,i.kt)("summary",null,(0,i.kt)("b",null,"Complete Example")," (click to show)"),(0,i.kt)("p",null,"0) Ensure all of the dependencies are installed.  Install the CLI globally:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -g @quasar/cli cordova\n")),(0,i.kt)("p",null,"(you may need to run ",(0,i.kt)("inlineCode",{parentName:"p"},"sudo npm i -g")," if there are permission issues)"),(0,i.kt)("p",null,"1) Create a new app:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm init quasar\n")),(0,i.kt)("p",null,"When prompted:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'"What would you like to build?": ',(0,i.kt)("inlineCode",{parentName:"li"},"App with Quasar CLI")),(0,i.kt)("li",{parentName:"ul"},'"Project folder": ',(0,i.kt)("inlineCode",{parentName:"li"},"SheetJSQuasar")),(0,i.kt)("li",{parentName:"ul"},'"Pick Quasar version": ',(0,i.kt)("inlineCode",{parentName:"li"},"Quasar v2 (Vue 3 | latest and greatest)")),(0,i.kt)("li",{parentName:"ul"},'"Pick script type": ',(0,i.kt)("inlineCode",{parentName:"li"},"Typescript")),(0,i.kt)("li",{parentName:"ul"},'"Pick Quasar App CLI variant": ',(0,i.kt)("inlineCode",{parentName:"li"},"Quasar App CLI with Vite")),(0,i.kt)("li",{parentName:"ul"},'"Package name": (just press enter, it will use the default ',(0,i.kt)("inlineCode",{parentName:"li"},"sheetjsquasar")),(0,i.kt)("li",{parentName:"ul"},'"Project product name": ',(0,i.kt)("inlineCode",{parentName:"li"},"SheetJSQuasar")),(0,i.kt)("li",{parentName:"ul"},'"Project description": ',(0,i.kt)("inlineCode",{parentName:"li"},"SheetJS + Quasar")),(0,i.kt)("li",{parentName:"ul"},'"Author": (just press enter, it will use your git config settings)'),(0,i.kt)("li",{parentName:"ul"},'"Pick a Vue component style": ',(0,i.kt)("inlineCode",{parentName:"li"},"Composition API")),(0,i.kt)("li",{parentName:"ul"},'"Pick your CSS preprocessor": ',(0,i.kt)("inlineCode",{parentName:"li"},"None")),(0,i.kt)("li",{parentName:"ul"},'"Check the features needed for your project": Deselect everything'),(0,i.kt)("li",{parentName:"ul"},'"Install project dependencies": ',(0,i.kt)("inlineCode",{parentName:"li"},"No"))),(0,i.kt)("p",null,"2) Install dependencies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd SheetJSQuasar\nnpm i\nnpm i --save https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz\n")),(0,i.kt)("p",null,"3) Set up Cordova:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"quasar mode add cordova\n")),(0,i.kt)("p",null,"When prompted, enter the app id ",(0,i.kt)("inlineCode",{parentName:"p"},"org.sheetjs.quasar"),"."),(0,i.kt)("p",null,"It will create a new ",(0,i.kt)("inlineCode",{parentName:"p"},"src-cordova")," folder. Continue in that folder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd src-cordova\ncordova platform add ios\ncordova plugin add cordova-plugin-wkwebview-engine\ncordova plugin add cordova-plugin-file\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"If there is an error ",(0,i.kt)("inlineCode",{parentName:"p"},"Could not load API for iOS project"),", it needs to be reset:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cordova platform rm ios\ncordova platform add ios\ncordova plugin add cordova-plugin-file\n"))),(0,i.kt)("p",null,"Return to the project directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd ..\n")),(0,i.kt)("p",null,"4) Start the dev server:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"quasar dev -m ios\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"If the app is blank, delete the app and close the simulator, then restart dev")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/quasar4.png",alt:"Quasar Step 4"})),(0,i.kt)("p",null,"5) Add the Dialog plugin to ",(0,i.kt)("inlineCode",{parentName:"p"},"quasar.config.js"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="quasar.config.js"',title:'"quasar.config.js"'},"      // Quasar plugins\n      // highlight-next-line\n      plugins: ['Dialog']\n")),(0,i.kt)("p",null,"6) In the template section of ",(0,i.kt)("inlineCode",{parentName:"p"},"src/pages/IndexPage.vue"),", add a Save button and\na Load file picker component at the bottom of the page:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="src/pages/IndexPage.vue"',title:'"src/pages/IndexPage.vue"'},'    \x3c!-- highlight-start --\x3e\n    <q-btn-group>\n      <q-file label="Load File" filled label-color="orange" @input="updateFile"/>\n      <q-btn label="Save File" @click="saveFile" />\n    </q-btn-group>\n    \x3c!-- highlight-end --\x3e\n  </q-page>\n</template>\n')),(0,i.kt)("p",null,"This uses two functions that should be added to the component script:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/pages/IndexPage.vue"',title:'"src/pages/IndexPage.vue"'},"    const meta = ref<Meta>({\n      totalCount: 1200\n    });\n// highlight-start\n    function saveFile() {\n    }\n    async function updateFile(v) {\n    }\n    return { todos, meta, saveFile, updateFile };\n// highlight-end\n  }\n});\n\n")),(0,i.kt)("p",null,"The app should now show two buttons at the bottom:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/quasar6.png",alt:"Quasar Step 6"})),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"If the app is blank or not refreshing, delete the app and close the simulator,\nthen restart the dev process.")),(0,i.kt)("p",null,"7) Wire up the ",(0,i.kt)("inlineCode",{parentName:"p"},"updateFile")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/pages/IndexPage.vue"',title:'"src/pages/IndexPage.vue"'},"import { defineComponent, ref } from 'vue';\n// highlight-start\nimport { read, write, utils } from 'xlsx';\nimport { useQuasar } from 'quasar';\n// highlight-end\n\nexport default defineComponent({\n// ...\n// highlight-start\n    const $q = useQuasar();\n    function dialogerr(e) { $q.dialog({title: \"Error!\", message: e.message || String(e)}); }\n// highlight-end\n    function saveFile() {\n    }\n    async function updateFile(v) {\n// highlight-start\n      try {\n        const files = (v.target as HTMLInputElement).files;\n        if(!files || files.length == 0) return;\n\n        const wb = read(await files[0].arrayBuffer());\n\n        const data = utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]]);\n        todos.value = data.map(row => ({id: row.Index, content: row.Name}));\n      } catch(e) { dialogerr(e); }\n// highlight-end\n    }\n")),(0,i.kt)("p",null,"To test that reading works:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Download ",(0,i.kt)("a",{parentName:"li",href:"https://sheetjs.com/pres.numbers"},"https://sheetjs.com/pres.numbers")),(0,i.kt)("li",{parentName:"ul"},"In the simulator, click the Home icon to return to the home screen"),(0,i.kt)("li",{parentName:"ul"},'Click on the "Files" icon'),(0,i.kt)("li",{parentName:"ul"},"Click and drag ",(0,i.kt)("inlineCode",{parentName:"li"},"pres.numbers")," from a Finder window into the simulator.")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/quasar7a.png",alt:"Quasar Step 7 save file"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Make sure "On My iPhone" is highlighted and select "Save"'),(0,i.kt)("li",{parentName:"ul"},"Click the Home icon again then select the SheetJSQuasar app"),(0,i.kt)("li",{parentName:"ul"},'Click the "Load" button, then select "Choose File" and select ',(0,i.kt)("inlineCode",{parentName:"li"},"pres"),":")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/quasar7b.png",alt:"Quasar Step 7 load file"})),(0,i.kt)("p",null,"Once selected, the screen should refresh with new contents:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/quasar7c.png",alt:"Quasar Step 7 new data"})),(0,i.kt)("p",null,"8) Wire up the ",(0,i.kt)("inlineCode",{parentName:"p"},"saveFile")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'    function saveFile() {\n// highlight-start\n      /* generate workbook from state */\n      const ws = utils.json_to_sheet(todos.value);\n      const wb = utils.book_new();\n      utils.book_append_sheet(wb, ws, "SheetJSQuasar");\n      const u8: Uint8Array = write(wb, {bookType: "xlsx", type: "buffer"});\n\n      /* save to file */\n      window.requestFileSystem(window.PERSISTENT, 0, function(fs) {\n        try {\n          fs.root.getFile("SheetJSQuasar.xlsx", {create: true}, entry => {\n            const msg = `File stored at ${$q.cordova.file.documentsDirectory} ${entry.fullPath}`;\n            entry.createWriter(writer => {\n              try {\n                const data = new Blob([u8], {type: "application/vnd.ms-excel"});\n                writer.onwriteend = () => {\n                  try {\n                    $q.dialog({title: "Success!", message: msg});\n                  } catch(e) { dialogerr(e); }\n                };\n                writer.onerror = dialogerr;\n                writer.write(data);\n              } catch(e) { dialogerr(e); }\n            }, dialogerr);\n          }, dialogerr);\n        } catch(e) { dialogerr(e) }\n      }, dialogerr);\n// highlight-end\n    }\n')),(0,i.kt)("p",null,"The page should revert to the old contents."),(0,i.kt)("p",null,"To test that writing works:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Click "Save File".  You will see a popup with a location:')),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/mobile/quasar8.png",alt:"Quasar Step 8"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Find the file and verify the contents are correct.  Run in a new terminal:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'find ~/Library/Developer/CoreSimulator -name SheetJSQuasar.xlsx |\n  while read x; do echo "$x"; npx xlsx-cli "$x"; done\n')),(0,i.kt)("p",null,"Since the contents reverted, you should see"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"SheetJSQuasar\nid,content\n1,ct1\n2,ct2\n3,ct3\n4,ct4\n5,ct5\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Use "Load File" to select ',(0,i.kt)("inlineCode",{parentName:"p"},"pres.numbers")," again.  Wait for the app to refresh.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Click "Save File", then re-run the command:'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'find ~/Library/Developer/CoreSimulator -name SheetJSQuasar.xlsx |\n  while read x; do echo "$x"; npx xlsx-cli "$x"; done\n')),(0,i.kt)("p",null,"The contents from ",(0,i.kt)("inlineCode",{parentName:"p"},"pres.numbers")," should show up now, with a new header row:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"SheetJSQuasar\nid,content\n42,Bill Clinton\n43,GeorgeW Bush\n44,Barack Obama\n45,Donald Trump\n46,Joseph Biden\n"))))}d.isMDXComponent=!0}}]);