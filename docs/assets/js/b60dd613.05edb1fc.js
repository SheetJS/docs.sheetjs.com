"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5032],{9613:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,h=c["".concat(i,".").concat(m)]||c[m]||p[m]||s;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=c;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<s;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7073:function(e,t,n){n.d(t,{Z:function(){return o}});var a=n(9496),r=n(1626),s="tabItem_XTJJ";function o(e){var t=e.children,n=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,o),hidden:n},t)}},7632:function(e,t,n){n.d(t,{Z:function(){return m}});var a=n(2848),r=n(9496),s=n(8745),o=n(2586),l=n(1060),i=n(2876),u=n(1626),d="tabList_ECWZ",p="tabItem_T58J";function c(e){var t,n,s,c=e.lazy,m=e.block,h=e.defaultValue,b=e.values,f=e.groupId,k=e.className,v=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=b?b:v.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),w=(0,o.l)(g,(function(e,t){return e.value===t.value}));if(w.length>0)throw new Error('Docusaurus error: Duplicate values "'+w.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===h?h:null!=(t=null!=h?h:null==(n=v.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(s=v[0])?void 0:s.props.value;if(null!==y&&!g.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,l.U)(),S=N.tabGroupChoices,j=N.setTabGroupChoices,x=(0,r.useState)(y),T=x[0],L=x[1],E=[],O=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var _=S[f];null!=_&&_!==T&&g.some((function(e){return e.value===_}))&&L(_)}var C=function(e){var t=e.currentTarget,n=E.indexOf(t),a=g[n].value;a!==T&&(O(t),L(a),null!=f&&j(f,a))},X=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=E.indexOf(e.currentTarget)+1;n=E[a]||E[0];break;case"ArrowLeft":var r=E.indexOf(e.currentTarget)-1;n=E[r]||E[E.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,u.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":m},k)},g.map((function(e){var t=e.value,n=e.label,s=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:function(e){return E.push(e)},onKeyDown:X,onFocus:C,onClick:C},s,{className:(0,u.Z)("tabs__item",p,null==s?void 0:s.className,{"tabs__item--active":T===t})}),null!=n?n:t)}))),c?(0,r.cloneElement)(v.filter((function(e){return e.props.value===T}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},v.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function m(e){var t=(0,s.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}},2656:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return d},default:function(){return b},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return m}});var a=n(2848),r=n(9213),s=(n(9496),n(9613)),o=n(7632),l=n(7073),i=["components"],u={sidebar_position:9,title:"Databases"},d=void 0,p={unversionedId:"getting-started/demos/database",id:"getting-started/demos/database",title:"Databases",description:'"Database" is a catch-all term referring to traditional RDBMS as well as K/V',source:"@site/docs/04-getting-started/03-demos/10-database.md",sourceDirName:"04-getting-started/03-demos",slug:"/getting-started/demos/database",permalink:"/docs/getting-started/demos/database",draft:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,title:"Databases"},sidebar:"tutorialSidebar",previous:{title:"Bundlers",permalink:"/docs/getting-started/demos/bundler"},next:{title:"Interface Summary",permalink:"/docs/interface"}},c={},m=[{value:"Structured Tables",id:"structured-tables",level:2},{value:"Building Worksheets from Structured Tables",id:"building-worksheets-from-structured-tables",level:3},{value:"Building Schemas from Worksheets",id:"building-schemas-from-worksheets",level:3},{value:"SQL",id:"sql",level:2},{value:"SQLite",id:"sqlite",level:3},{value:"WebSQL",id:"websql",level:3},{value:"Objects, K/V and &quot;Schema-less&quot; Databases",id:"objects-kv-and-schema-less-databases",level:2}],h={toc:m};function b(e){var t=e.components,n=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,'"Database" is a catch-all term referring to traditional RDBMS as well as K/V\nstores, document databases, and other "NoSQL" storages. There are many external\ndatabase systems as well as browser APIs like WebSQL and ',(0,s.kt)("inlineCode",{parentName:"p"},"localStorage")),(0,s.kt)("p",null,"This demo discusses general strategies and provides examples for a variety of\ndatabase systems.  The examples are merely intended to demonstrate very basic\nfunctionality."),(0,s.kt)("h2",{id:"structured-tables"},"Structured Tables"),(0,s.kt)("p",null,"Database tables are a common import and export target for spreadsheets.  One\ncommon representation of a database table is an array of JS objects whose keys\nare column headers and whose values are the underlying data values. For example,"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,s.kt)("th",{parentName:"tr",align:"right"},"Index"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},"Barack Obama"),(0,s.kt)("td",{parentName:"tr",align:"right"},"44")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},"Donald Trump"),(0,s.kt)("td",{parentName:"tr",align:"right"},"45")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},"Joseph Biden"),(0,s.kt)("td",{parentName:"tr",align:"right"},"46")))),(0,s.kt)("p",null,"is naturally represented as an array of objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'[\n  { Name: "Barack Obama", Index: 44 },\n  { Name: "Donald Trump", Index: 45 },\n  { Name: "Joseph Biden", Index: 46 }\n]\n')),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"sheet_to_json")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"json_to_sheet")," helper functions work with objects of\nsimilar shape, converting to and from worksheet objects.  The corresponding\nworksheet would include a header row for the labels:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"XXX|      A       |   B   |\n---+--------------+-------+\n 1 | Name         | Index |\n 2 | Barack Obama |    44 |\n 3 | Donald Trump |    45 |\n 3 | Joseph Biden |    46 |\n")),(0,s.kt)("h3",{id:"building-worksheets-from-structured-tables"},"Building Worksheets from Structured Tables"),(0,s.kt)("p",null,"There are NodeJS connector libraries for many popular RDBMS systems.  Libraries\nhave facilities for connecting to a database, executing queries, and obtaining\nresults as arrays of JS objects that can be passed to ",(0,s.kt)("inlineCode",{parentName:"p"},"json_to_sheet"),".  The main\ndifferences surround API shape and supported data types."),(0,s.kt)("p",null,"For example, ",(0,s.kt)("inlineCode",{parentName:"p"},"better-sqlite3")," is a connector library for SQLite. The result of\na ",(0,s.kt)("inlineCode",{parentName:"p"},"SELECT")," query is an array of objects suitable for ",(0,s.kt)("inlineCode",{parentName:"p"},"json_to_sheet"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"var aoo = db.prepare(\"SELECT * FROM 'Presidents' LIMIT 100000\").all();\n// highlight-next-line\nvar worksheet = XLSX.utils.json_to_sheet(aoo);\n")),(0,s.kt)("p",null,"Other databases will require post-processing.  For example, MongoDB results\ninclude the Object ID (usually stored in the ",(0,s.kt)("inlineCode",{parentName:"p"},"_id")," key).  This can be removed\nbefore generating a worksheet:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const aoo = await db.collection('coll').find({}).toArray();\n// highlight-next-line\naoo.forEach((x) => delete x._id);\nconst ws = XLSX.utils.json_to_sheet(aoo);\n")),(0,s.kt)("h3",{id:"building-schemas-from-worksheets"},"Building Schemas from Worksheets"),(0,s.kt)("p",null,"When a strict schema is needed, the ",(0,s.kt)("inlineCode",{parentName:"p"},"sheet_to_json"),' helper function generates\narrays of JS objects that can be scanned to determine the column "types".'),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Document databases like MongoDB tend not to require schemas. Arrays of objects\ncan be used directly without setting up a schema:"),(0,s.kt)("pre",{parentName:"div"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const aoa = XLSX.utils.sheet_to_json(ws);\n// highlight-next-line\nawait db.collection('coll').insertMany(aoa, { ordered: true });\n")))),(0,s.kt)("p",null,"This example will fetch ",(0,s.kt)("a",{parentName:"p",href:"https://sheetjs.com/cd.xls"},"https://sheetjs.com/cd.xls"),", scan the columns of the\nfirst worksheet to determine data types, and generate 6 PostgreSQL statements."),(0,s.kt)("details",null,(0,s.kt)("summary",null,(0,s.kt)("b",null,"Explanation")," (click to show)"),(0,s.kt)("p",null,"The relevant ",(0,s.kt)("inlineCode",{parentName:"p"},"generate_sql")," function takes a worksheet name and a table name:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// define mapping between determined types and PostgreSQL types\nconst PG = { "n": "float8", "s": "text", "b": "boolean" };\n\nfunction generate_sql(ws, wsname) {\n\n  // generate an array of objects from the data\n  const aoo = XLSX.utils.sheet_to_json(ws);\n\n  // types will map column headers to types, while hdr holds headers in order\n  const types = {}, hdr = [];\n\n  // loop across each row object\n  aoo.forEach(row => \n    // Object.entries returns a row of [key, value] pairs.  Loop across those\n    Object.entries(row).forEach(([k,v]) => {\n\n      // If this is first time seeing key, mark unknown and append header array\n      if(!types[k]) { types[k] = "?"; hdr.push(k); }\n\n      // skip null and undefined\n      if(v == null) return;\n\n      // check and resolve type\n      switch(typeof v) {\n        case "string": // strings are the broadest type\n          types[k] = "s"; break;\n        case "number": // if column is not string, number is the broadest type\n          if(types[k] != "s") types[k] = "n"; break;\n        case "boolean": // only mark boolean if column is unknown or boolean\n          if("?b".includes(types[k])) types[k] = "b"; break;\n        default: types[k] = "s"; break; // default to string type\n      }\n    })\n  );\n\n  // The final array consists of the CREATE TABLE query and a series of INSERTs\n  return [\n    // generate CREATE TABLE query and return batch\n    `CREATE TABLE \\`${wsname}\\` (${hdr.map(h => \n      // column name must be wrapped in backticks\n      `\\`${h}\\` ${PG[types[h]]}`\n    ).join(", ")});`\n  ].concat(aoo.map(row => { // generate INSERT query for each row\n    // entries will be an array of [key, value] pairs for the data in the row\n    const entries = Object.entries(row);\n    // fields will hold the column names and values will hold the values\n    const fields = [], values = [];\n    // check each key/value pair in the row\n    entries.forEach(([k,v]) => {\n      // skip null / undefined\n      if(v == null) return;\n      // column name must be wrapped in backticks\n      fields.push(`\\`${k}\\``);\n      // when the field type is numeric, `true` -> 1 and `false` -> 0\n      if(types[k] == "n") values.push(typeof v == "boolean" ? (v ? 1 : 0) : v);\n      // otherwise, \n      else values.push(`\'${v.toString().replaceAll("\'", "\'\'")}\'`);\n    })\n    if(fields.length) return `INSERT INTO \\`${wsname}\\` (${fields.join(", ")}) VALUES (${values.join(", ")})`;\n  })).filter(x => x); // filter out skipped rows\n}\n'))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function SheetJSQLWriter() {\n  // define mapping between determined types and PostgreSQL types\n  const PG = { "n": "float8", "s": "text", "b": "boolean" };\n  function generate_sql(ws, wsname) {\n    const aoo = XLSX.utils.sheet_to_json(ws);\n    const types = {}, hdr = [];\n    // loop across each key in each column\n    aoo.forEach(row => Object.entries(row).forEach(([k,v]) => {\n      // set up type if header hasn\'t been seen\n      if(!types[k]) { types[k] = "?"; hdr.push(k); }\n      // check and resolve type\n      switch(typeof v) {\n        case "string": types[k] = "s"; break;\n        case "number": if(types[k] != "s") types[k] = "n"; break;\n        case "boolean": if("?b".includes(types[k])) types[k] = "b"; break;\n        default: types[k] = "s"; break;\n      }\n    }));\n    return [\n      // generate CREATE TABLE query and return batch\n      `CREATE TABLE \\`${wsname}\\` (${hdr.map(h => `\\`${h}\\` ${PG[types[h]]}`).join(", ")});`\n    ].concat(aoo.map(row => {\n      const entries = Object.entries(row);\n      const fields = [], values = [];\n      entries.forEach(([k,v]) => {\n        if(v == null) return;\n        fields.push(`\\`${k}\\``);\n        if(types[k] == "n") values.push(typeof v == "boolean" ? (v ? 1 : 0) : v);\n        else values.push(`\'${v.toString().replaceAll("\'", "\'\'")}\'`);\n      })\n      if(fields.length) return `INSERT INTO \\`${wsname}\\` (${fields.join(", ")}) VALUES (${values.join(", ")})`;\n    })).filter(x => x).slice(0, 5);\n  }\n  const [url, setUrl] = React.useState("https://sheetjs.com/cd.xls");\n  const set_url = React.useCallback((evt) => setUrl(evt.target.value));\n  const [out, setOut] = React.useState("");\n  const xport = React.useCallback(async() => {\n    console.log(url);\n    const ab = await (await fetch(url)).arrayBuffer();\n    const wb = XLSX.read(ab), wsname = wb.SheetNames[0];\n    setOut(generate_sql(wb.Sheets[wsname], wsname).join("\\n"));\n  });\n\n  return ( <> {out && (<pre>{out}</pre>)}\n    <b>URL: </b><input type="text" value={url} onChange={set_url} size="50"/>\n    <br/><button onClick={xport}><b>Fetch!</b></button>\n  </> );\n}\n')),(0,s.kt)("h2",{id:"sql"},"SQL"),(0,s.kt)("h3",{id:"sqlite"},"SQLite"),(0,s.kt)("p",null,"Most platforms offer a simple way to query SQLite databases."),(0,s.kt)("p",null,"The following example shows how to query for each table in an SQLite database,\nquery for the data for each table, add each non-empty table to a workbook, and\nexport as XLSX."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/jpwhite3/northwind-SQLite3/raw/master/Northwind_large.sqlite.zip"},"The Northwind database is available in SQLite form"),".\nDownload and expand the zip archive to reveal ",(0,s.kt)("inlineCode",{parentName:"p"},"Northwind_large.sqlite")),(0,s.kt)(o.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/better-sqlite3"},"The ",(0,s.kt)("inlineCode",{parentName:"a"},"better-sqlite3")," module"),"\nprovides a very simple API for working with SQLite databases.  ",(0,s.kt)("inlineCode",{parentName:"p"},"Statement#all"),"\nruns a prepared statement and returns an array of JS objects."),(0,s.kt)("p",null,"1) Install the dependencies:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm i --save https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz better-sqlite3\n")),(0,s.kt)("p",null,"2) Save the following to ",(0,s.kt)("inlineCode",{parentName:"p"},"node.mjs"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="node.mjs"',title:'"node.mjs"'},'/* Load SQLite3 connector library */\nimport Database from "better-sqlite3";\n\n/* Load SheetJS library */\nimport * as XLSX from \'xlsx/xlsx.mjs\';\nimport * as fs from \'fs\';\nXLSX.set_fs(fs);\n\n/* Initialize database */\nvar db = Database("Northwind_large.sqlite");\n\n/* Create new workbook */\nvar wb = XLSX.utils.book_new();\n\n/* Get list of table names */\nvar sql = db.prepare("SELECT name FROM sqlite_master WHERE type=\'table\'");\nvar result = sql.all();\n\n/* Loop across each name */\nresult.forEach(function(row) {\n  /* Get first 100K rows */\n    var aoo = db.prepare("SELECT * FROM \'" + row.name + "\' LIMIT 100000").all();\n    if(aoo.length > 0) {\n    /* Create Worksheet from the row objects */\n    var ws = XLSX.utils.json_to_sheet(aoo, {dense: true});\n    /* Add to Workbook */\n    XLSX.utils.book_append_sheet(wb, ws, row.name);\n  }\n});\n\n/* Write File */\nXLSX.writeFile(wb, "node.xlsx");\n')),(0,s.kt)("p",null,"3) Run ",(0,s.kt)("inlineCode",{parentName:"p"},"node node.mjs")," and open ",(0,s.kt)("inlineCode",{parentName:"p"},"node.xlsx"))),(0,s.kt)(l.Z,{value:"bun",label:"Bun",mdxType:"TabItem"},(0,s.kt)("p",null,"Bun ships with a built-in high-performance module ",(0,s.kt)("inlineCode",{parentName:"p"},"bun:sqlite"),"."),(0,s.kt)("p",null,"1) Install the dependencies:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm i --save https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz\n")),(0,s.kt)("p",null,"2) Save the following to ",(0,s.kt)("inlineCode",{parentName:"p"},"bun.mjs"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="bun.mjs"',title:'"bun.mjs"'},'/* Load SQLite3 connector library */\nimport { Database } from "bun:sqlite";\n\n/* Load SheetJS library */\nimport * as XLSX from \'xlsx/xlsx.mjs\';\nimport * as fs from \'fs\';\nXLSX.set_fs(fs);\n\n/* Initialize database */\nvar db = Database.open("Northwind_large.sqlite");\n\n/* Create new workbook */\nvar wb = XLSX.utils.book_new();\n\n/* Get list of table names */\nvar sql = db.prepare("SELECT name FROM sqlite_master WHERE type=\'table\'");\nvar result = sql.all();\n\n/* Loop across each name */\nresult.forEach(function(row) {\n  /* Get first 100K rows */\n    var aoo = db.prepare("SELECT * FROM \'" + row.name + "\' LIMIT 100000").all();\n    if(aoo.length > 0) {\n    /* Create Worksheet from the row objects */\n    var ws = XLSX.utils.json_to_sheet(aoo, {dense: true});\n    /* Add to Workbook */\n    XLSX.utils.book_append_sheet(wb, ws, row.name);\n  }\n});\n\n/* Write File */\nXLSX.writeFile(wb, "bun.xlsx");\n')),(0,s.kt)("p",null,"3) Run ",(0,s.kt)("inlineCode",{parentName:"p"},"bun bun.mjs")," and open ",(0,s.kt)("inlineCode",{parentName:"p"},"bun.xlsx")))),(0,s.kt)("h3",{id:"websql"},"WebSQL"),(0,s.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"This information is included for legacy deployments.  Web SQL is deprecated."),(0,s.kt)("p",{parentName:"div"},(0,s.kt)("a",{parentName:"p",href:"https://caniuse.com/sql-storage"},"https://caniuse.com/sql-storage")," has up-to-date info on browser support."))),(0,s.kt)("p",null,"WebSQL was a popular SQL-based in-browser database available on Chrome.  In\npractice, it is powered by SQLite, and most simple SQLite-compatible queries\nwork as-is in WebSQL."),(0,s.kt)("p",null,"The public demo ",(0,s.kt)("a",{parentName:"p",href:"http://sheetjs.com/sql"},"http://sheetjs.com/sql")," generates a database from workbook."),(0,s.kt)("h2",{id:"objects-kv-and-schema-less-databases"},'Objects, K/V and "Schema-less" Databases'),(0,s.kt)("p",null,'So-called "Schema-less" databases allow for arbitrary keys and values within the\nentries in the database.  K/V stores and Objects add additional restrictions.'),(0,s.kt)("p",null,"There is no natural way to translate arbitrarily shaped schemas to worksheets\nin a workbook.  One common trick is to dedicate one worksheet to holding named\nkeys.  For example, considering the JS object:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "title": "SheetDB",\n  "metadata": {\n    "author": "SheetJS",\n    "code": 7262\n  },\n  "data": [\n    { "Name": "Barack Obama", "Index": 44 },\n    { "Name": "Donald Trump", "Index": 45 },\n  ]\n}\n')),(0,s.kt)("p",null,"A dedicated worksheet should store the one-off named values:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"XXX|        A        |    B    |\n---+-----------------+---------+\n 1 | Path            | Value   |\n 2 | title           | SheetDB |\n 3 | metadata.author | SheetJS |\n 4 | metadata.code   |    7262 |\n")))}b.isMDXComponent=!0}}]);