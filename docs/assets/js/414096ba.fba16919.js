"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[104],{9613:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return N}});var n=a(9496);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),k=p(a),N=r,u=k["".concat(o,".").concat(N)]||k[N]||m[N]||l;return a?n.createElement(u,i(i({ref:t},s),{},{components:a})):n.createElement(u,i({ref:t},s))}));function N(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=k;var d={};for(var o in t)hasOwnProperty.call(t,o)&&(d[o]=t[o]);d.originalType=e,d.mdxType="string"==typeof e?e:r,i[1]=d;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},5593:function(e,t,a){a.r(t),a.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return N},frontMatter:function(){return d},metadata:function(){return p},toc:function(){return m}});var n=a(2848),r=a(9213),l=(a(9496),a(9613)),i=["components"],d={sidebar_position:9},o="Utility Functions",p={unversionedId:"api/utilities",id:"api/utilities",title:"Utility Functions",description:"The sheetto* functions accept a worksheet and an optional options object.",source:"@site/docs/08-api/09-utilities.md",sourceDirName:"08-api",slug:"/api/utilities",permalink:"/docs/api/utilities",draft:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Writing Files",permalink:"/docs/api/write-options"},next:{title:"File Formats",permalink:"/docs/miscellany/formats"}},s={},m=[{value:"Array of Arrays Input",id:"array-of-arrays-input",level:3},{value:"Array of Objects Input",id:"array-of-objects-input",level:3},{value:"HTML Table Input",id:"html-table-input",level:3},{value:"Formulae Output",id:"formulae-output",level:3},{value:"Delimiter-Separated Output",id:"delimiter-separated-output",level:3},{value:"UTF-16 Unicode Text",id:"utf-16-unicode-text",level:4},{value:"HTML Output",id:"html-output",level:3},{value:"JSON",id:"json",level:3}],k={toc:m};function N(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"utility-functions"},"Utility Functions"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"sheet_to_*")," functions accept a worksheet and an optional options object."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"*_to_sheet")," functions accept a data object and an optional options object."),(0,l.kt)("p",null,"The examples are based on the following worksheet:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"XXX| A | B | C | D | E | F | G |\n---+---+---+---+---+---+---+---+\n 1 | S | h | e | e | t | J | S |\n 2 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n 3 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |\n")),(0,l.kt)("h3",{id:"array-of-arrays-input"},"Array of Arrays Input"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.aoa_to_sheet")," takes an array of arrays of JS values and returns a\nworksheet resembling the input data.  Numbers, Booleans and Strings are stored\nas the corresponding styles.  Dates are stored as date or numbers.  Array holes\nand explicit ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined")," values are skipped.  ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," values may be stubbed. All\nother values are stored as strings.  The function takes an options argument:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"dateNF")),(0,l.kt)("td",{parentName:"tr",align:"center"},"FMT 14"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified date format in string output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"cellDates")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Store dates as type ",(0,l.kt)("inlineCode",{parentName:"td"},"d")," (default is ",(0,l.kt)("inlineCode",{parentName:"td"},"n"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"sheetStubs")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Create cell objects of type ",(0,l.kt)("inlineCode",{parentName:"td"},"z")," for ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," values")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"nullError")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, emit ",(0,l.kt)("inlineCode",{parentName:"td"},"#NULL!")," error cells for ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," values")))),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Examples")," (click to show)"),(0,l.kt)("p",null,"To generate the example sheet:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'var ws = XLSX.utils.aoa_to_sheet([\n  "SheetJS".split(""),\n  [1,2,3,4,5,6,7],\n  [2,3,4,5,6,7,8]\n]);\n'))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.sheet_add_aoa")," takes an array of arrays of JS values and updates an\nexisting worksheet object.  It follows the same process as ",(0,l.kt)("inlineCode",{parentName:"p"},"aoa_to_sheet")," and\naccepts an options argument:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"dateNF")),(0,l.kt)("td",{parentName:"tr",align:"center"},"FMT 14"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified date format in string output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"cellDates")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Store dates as type ",(0,l.kt)("inlineCode",{parentName:"td"},"d")," (default is ",(0,l.kt)("inlineCode",{parentName:"td"},"n"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"sheetStubs")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Create cell objects of type ",(0,l.kt)("inlineCode",{parentName:"td"},"z")," for ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," values")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"nullError")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, emit ",(0,l.kt)("inlineCode",{parentName:"td"},"#NULL!")," error cells for ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," values")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"origin")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified cell as starting point (see below)")))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"origin")," is expected to be one of:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"th"},"origin")),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(cell object)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified cell (cell object)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(string)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified cell (A1-style cell)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(number >= 0)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Start from the first column at specified row (0-indexed)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"-1"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Append to bottom of worksheet starting on first column")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(default)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Start from cell A1")))),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Examples")," (click to show)"),(0,l.kt)("p",null,"Consider the worksheet:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"XXX| A | B | C | D | E | F | G |\n---+---+---+---+---+---+---+---+\n 1 | S | h | e | e | t | J | S |\n 2 | 1 | 2 |   |   | 5 | 6 | 7 |\n 3 | 2 | 3 |   |   | 6 | 7 | 8 |\n 4 | 3 | 4 |   |   | 7 | 8 | 9 |\n 5 | 4 | 5 | 6 | 7 | 8 | 9 | 0 |\n")),(0,l.kt)("p",null,"This worksheet can be built up in the order ",(0,l.kt)("inlineCode",{parentName:"p"},"A1:G1, A2:B4, E2:G4, A5:G5"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'/* Initial row */\nvar ws = XLSX.utils.aoa_to_sheet([ "SheetJS".split("") ]);\n\n/* Write data starting at A2 */\nXLSX.utils.sheet_add_aoa(ws, [[1,2], [2,3], [3,4]], {origin: "A2"});\n\n/* Write data starting at E2 */\nXLSX.utils.sheet_add_aoa(ws, [[5,6,7], [6,7,8], [7,8,9]], {origin:{r:1, c:4}});\n\n/* Append row */\nXLSX.utils.sheet_add_aoa(ws, [[4,5,6,7,8,9,0]], {origin: -1});\n'))),(0,l.kt)("h3",{id:"array-of-objects-input"},"Array of Objects Input"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.json_to_sheet"),' takes an array of objects and returns a worksheet\nwith automatically-generated "headers" based on the keys of the objects.  The\ndefault column order is determined by the first appearance of the field using\n',(0,l.kt)("inlineCode",{parentName:"p"},"Object.keys"),".  The function accepts an options argument:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"header")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified field order (default ",(0,l.kt)("inlineCode",{parentName:"td"},"Object.keys"),") **")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"dateNF")),(0,l.kt)("td",{parentName:"tr",align:"center"},"FMT 14"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified date format in string output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"cellDates")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Store dates as type ",(0,l.kt)("inlineCode",{parentName:"td"},"d")," (default is ",(0,l.kt)("inlineCode",{parentName:"td"},"n"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"skipHeader")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, do not include header row in output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"nullError")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, emit ",(0,l.kt)("inlineCode",{parentName:"td"},"#NULL!")," error cells for ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," values")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"All fields from each row will be written.  If ",(0,l.kt)("inlineCode",{parentName:"li"},"header")," is an array and it does\nnot contain a particular field, the key will be appended to the array."),(0,l.kt)("li",{parentName:"ul"},"Cell types are deduced from the type of each value.  For example, a ",(0,l.kt)("inlineCode",{parentName:"li"},"Date"),"\nobject will generate a Date cell, while a string will generate a Text cell."),(0,l.kt)("li",{parentName:"ul"},"Null values will be skipped by default.  If ",(0,l.kt)("inlineCode",{parentName:"li"},"nullError")," is true, an error cell\ncorresponding to ",(0,l.kt)("inlineCode",{parentName:"li"},"#NULL!")," will be written to the worksheet.")),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Examples")," (click to show)"),(0,l.kt)("p",null,"The original sheet cannot be reproduced using plain objects since JS object keys\nmust be unique. After replacing the second ",(0,l.kt)("inlineCode",{parentName:"p"},"e")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"S")," with ",(0,l.kt)("inlineCode",{parentName:"p"},"e_1")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"S_1"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'var ws = XLSX.utils.json_to_sheet([\n  { S:1, h:2, e:3, e_1:4, t:5, J:6, S_1:7 },\n  { S:2, h:3, e:4, e_1:5, t:6, J:7, S_1:8 }\n], {header:["S","h","e","e_1","t","J","S_1"]});\n')),(0,l.kt)("p",null,"Alternatively, the header row can be skipped:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'var ws = XLSX.utils.json_to_sheet([\n  { A:"S", B:"h", C:"e", D:"e", E:"t", F:"J", G:"S" },\n  { A: 1,  B: 2,  C: 3,  D: 4,  E: 5,  F: 6,  G: 7  },\n  { A: 2,  B: 3,  C: 4,  D: 5,  E: 6,  F: 7,  G: 8  }\n], {header:["A","B","C","D","E","F","G"], skipHeader:true});\n'))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.sheet_add_json")," takes an array of objects and updates an existing\nworksheet object.  It follows the same process as ",(0,l.kt)("inlineCode",{parentName:"p"},"json_to_sheet")," and accepts\nan options argument:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"header")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified column order (default ",(0,l.kt)("inlineCode",{parentName:"td"},"Object.keys"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"dateNF")),(0,l.kt)("td",{parentName:"tr",align:"center"},"FMT 14"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified date format in string output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"cellDates")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Store dates as type ",(0,l.kt)("inlineCode",{parentName:"td"},"d")," (default is ",(0,l.kt)("inlineCode",{parentName:"td"},"n"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"skipHeader")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, do not include header row in output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"nullError")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, emit ",(0,l.kt)("inlineCode",{parentName:"td"},"#NULL!")," error cells for ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," values")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"origin")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified cell as starting point (see below)")))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"origin")," is expected to be one of:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"th"},"origin")),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(cell object)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified cell (cell object)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(string)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified cell (A1-style cell)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(number >= 0)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Start from the first column at specified row (0-indexed)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"-1"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Append to bottom of worksheet starting on first column")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(default)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Start from cell A1")))),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Examples")," (click to show)"),(0,l.kt)("p",null,"Consider the worksheet:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"XXX| A | B | C | D | E | F | G |\n---+---+---+---+---+---+---+---+\n 1 | S | h | e | e | t | J | S |\n 2 | 1 | 2 |   |   | 5 | 6 | 7 |\n 3 | 2 | 3 |   |   | 6 | 7 | 8 |\n 4 | 3 | 4 |   |   | 7 | 8 | 9 |\n 5 | 4 | 5 | 6 | 7 | 8 | 9 | 0 |\n")),(0,l.kt)("p",null,"This worksheet can be built up in the order ",(0,l.kt)("inlineCode",{parentName:"p"},"A1:G1, A2:B4, E2:G4, A5:G5"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'/* Initial row */\nvar ws = XLSX.utils.json_to_sheet([\n  { A: "S", B: "h", C: "e", D: "e", E: "t", F: "J", G: "S" }\n], {header: ["A", "B", "C", "D", "E", "F", "G"], skipHeader: true});\n\n/* Write data starting at A2 */\nXLSX.utils.sheet_add_json(ws, [\n  { A: 1, B: 2 }, { A: 2, B: 3 }, { A: 3, B: 4 }\n], {skipHeader: true, origin: "A2"});\n\n/* Write data starting at E2 */\nXLSX.utils.sheet_add_json(ws, [\n  { A: 5, B: 6, C: 7 }, { A: 6, B: 7, C: 8 }, { A: 7, B: 8, C: 9 }\n], {skipHeader: true, origin: { r: 1, c: 4 }, header: [ "A", "B", "C" ]});\n\n/* Append row */\nXLSX.utils.sheet_add_json(ws, [\n  { A: 4, B: 5, C: 6, D: 7, E: 8, F: 9, G: 0 }\n], {header: ["A", "B", "C", "D", "E", "F", "G"], skipHeader: true, origin: -1});\n'))),(0,l.kt)("h3",{id:"html-table-input"},"HTML Table Input"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.table_to_sheet")," takes a table DOM element and returns a worksheet\nresembling the input table.  Numbers are parsed.  All other data will be stored\nas strings."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.table_to_book")," produces a minimal workbook based on the worksheet."),(0,l.kt)("p",null,"Both functions accept options arguments:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"raw")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, every cell will hold raw strings")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"dateNF")),(0,l.kt)("td",{parentName:"tr",align:"center"},"FMT 14"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified date format in string output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"cellDates")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Store dates as type ",(0,l.kt)("inlineCode",{parentName:"td"},"d")," (default is ",(0,l.kt)("inlineCode",{parentName:"td"},"n"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"sheetRows")),(0,l.kt)("td",{parentName:"tr",align:"center"},"0"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If >0, read the first ",(0,l.kt)("inlineCode",{parentName:"td"},"sheetRows")," rows of the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"display")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, hidden rows and cells will not be parsed")))),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Examples")," (click to show)"),(0,l.kt)("p",null,"To generate the example sheet, start with the HTML table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<table id="sheetjs">\n<tr><td>S</td><td>h</td><td>e</td><td>e</td><td>t</td><td>J</td><td>S</td></tr>\n<tr><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr>\n<tr><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td></tr>\n</table>\n')),(0,l.kt)("p",null,"To process the table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var tbl = document.getElementById('sheetjs');\nvar wb = XLSX.utils.table_to_book(tbl);\n"))),(0,l.kt)("p",null,"Note: ",(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.read")," can handle HTML represented as strings."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.sheet_add_dom")," takes a table DOM element and updates an existing\nworksheet object.  It follows the same process as ",(0,l.kt)("inlineCode",{parentName:"p"},"table_to_sheet")," and accepts\nan options argument:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"raw")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, every cell will hold raw strings")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"dateNF")),(0,l.kt)("td",{parentName:"tr",align:"center"},"FMT 14"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified date format in string output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"cellDates")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Store dates as type ",(0,l.kt)("inlineCode",{parentName:"td"},"d")," (default is ",(0,l.kt)("inlineCode",{parentName:"td"},"n"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"sheetRows")),(0,l.kt)("td",{parentName:"tr",align:"center"},"0"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If >0, read the first ",(0,l.kt)("inlineCode",{parentName:"td"},"sheetRows")," rows of the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"display")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, hidden rows and cells will not be parsed")))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"origin")," is expected to be one of:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"th"},"origin")),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(cell object)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified cell (cell object)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(string)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified cell (A1-style cell)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(number >= 0)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Start from the first column at specified row (0-indexed)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"-1"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Append to bottom of worksheet starting on first column")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(default)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Start from cell A1")))),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Examples")," (click to show)"),(0,l.kt)("p",null,"A small helper function can create gap rows between tables:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function create_gap_rows(ws, nrows) {\n  var ref = XLSX.utils.decode_range(ws[\"!ref\"]);       // get original range\n  ref.e.r += nrows;                                    // add to ending row\n  ws[\"!ref\"] = XLSX.utils.encode_range(ref);           // reassign row\n}\n\n/* first table */\nvar ws = XLSX.utils.table_to_sheet(document.getElementById('table1'));\ncreate_gap_rows(ws, 1); // one row gap after first table\n\n/* second table */\nXLSX.utils.sheet_add_dom(ws, document.getElementById('table2'), {origin: -1});\ncreate_gap_rows(ws, 3); // three rows gap after second table\n\n/* third table */\nXLSX.utils.sheet_add_dom(ws, document.getElementById('table3'), {origin: -1});\n"))),(0,l.kt)("h3",{id:"formulae-output"},"Formulae Output"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.sheet_to_formulae")," generates an array of commands that represent\nhow a person would enter data into an application.  Each entry is of the form\n",(0,l.kt)("inlineCode",{parentName:"p"},"A1-cell-address=formula-or-value"),".  String literals are prefixed with a ",(0,l.kt)("inlineCode",{parentName:"p"},"'")," in\naccordance with Excel."),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Examples")," (click to show)"),(0,l.kt)("p",null,"For the example sheet:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"> var o = XLSX.utils.sheet_to_formulae(ws);\n> [o[0], o[5], o[10], o[15], o[20]];\n[ 'A1=\\'S', 'F1=\\'J', 'D2=4', 'B3=3', 'G3=8' ]\n"))),(0,l.kt)("h3",{id:"delimiter-separated-output"},"Delimiter-Separated Output"),(0,l.kt)("p",null,"As an alternative to the ",(0,l.kt)("inlineCode",{parentName:"p"},"writeFile")," CSV type, ",(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.sheet_to_csv")," also\nproduces CSV output.  The function takes an options argument:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"FS")),(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},'","')),(0,l.kt)("td",{parentName:"tr",align:"left"},'"Field Separator"  delimiter between fields')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"RS")),(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},'"\\n"')),(0,l.kt)("td",{parentName:"tr",align:"left"},'"Record Separator" delimiter between rows')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"dateNF")),(0,l.kt)("td",{parentName:"tr",align:"center"},"FMT 14"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified date format in string output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"strip")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Remove trailing field separators in each record **")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"blankrows")),(0,l.kt)("td",{parentName:"tr",align:"center"},"true"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Include blank lines in the CSV output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"skipHidden")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Skips hidden rows/columns in the CSV output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"forceQuotes")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Force quotes around fields")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"strip")," will remove trailing commas from each line under default ",(0,l.kt)("inlineCode",{parentName:"li"},"FS/RS")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"blankrows")," must be set to ",(0,l.kt)("inlineCode",{parentName:"li"},"false")," to skip blank lines."),(0,l.kt)("li",{parentName:"ul"},"Fields containing the record or field separator will automatically be wrapped\nin double quotes; ",(0,l.kt)("inlineCode",{parentName:"li"},"forceQuotes")," forces all cells to be wrapped in quotes."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"XLSX.write")," with ",(0,l.kt)("inlineCode",{parentName:"li"},"csv")," type will always prepend the UTF-8 byte-order mark for\nExcel compatibility.  ",(0,l.kt)("inlineCode",{parentName:"li"},"sheet_to_csv")," returns a JS string and omits the mark.\nUsing ",(0,l.kt)("inlineCode",{parentName:"li"},"XLSX.write")," with type ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," will also skip the mark.")),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Examples")," (click to show)"),(0,l.kt)("p",null,"For the example sheet:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'> console.log(XLSX.utils.sheet_to_csv(ws));\nS,h,e,e,t,J,S\n1,2,3,4,5,6,7\n2,3,4,5,6,7,8\n> console.log(XLSX.utils.sheet_to_csv(ws, {FS:"\\t"}));\nS   h   e   e   t   J   S\n1   2   3   4   5   6   7\n2   3   4   5   6   7   8\n> console.log(XLSX.utils.sheet_to_csv(ws,{FS:":",RS:"|"}));\nS:h:e:e:t:J:S|1:2:3:4:5:6:7|2:3:4:5:6:7:8|\n'))),(0,l.kt)("h4",{id:"utf-16-unicode-text"},"UTF-16 Unicode Text"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"txt")," output type uses the tab character as the field separator.  If the\n",(0,l.kt)("inlineCode",{parentName:"p"},"codepage")," library is available (included in full distribution but not core),\nthe output will be encoded in ",(0,l.kt)("inlineCode",{parentName:"p"},"CP1200")," and the BOM will be prepended."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.sheet_to_txt")," takes the same arguments as ",(0,l.kt)("inlineCode",{parentName:"p"},"sheet_to_csv"),"."),(0,l.kt)("h3",{id:"html-output"},"HTML Output"),(0,l.kt)("p",null,"As an alternative to the ",(0,l.kt)("inlineCode",{parentName:"p"},"writeFile")," HTML type, ",(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.sheet_to_html")," also\nproduces HTML output.  The function takes an options argument:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"id")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Specify the ",(0,l.kt)("inlineCode",{parentName:"td"},"id")," attribute for the ",(0,l.kt)("inlineCode",{parentName:"td"},"TABLE")," element")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"editable")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, set ",(0,l.kt)("inlineCode",{parentName:"td"},'contenteditable="true"')," for every TD")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"header")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Override header (default ",(0,l.kt)("inlineCode",{parentName:"td"},"html body"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"footer")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Override footer (default ",(0,l.kt)("inlineCode",{parentName:"td"},"/body /html"),")")))),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Examples")," (click to show)"),(0,l.kt)("p",null,"For the example sheet:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"> console.log(XLSX.utils.sheet_to_html(ws));\n// ...\n"))),(0,l.kt)("h3",{id:"json"},"JSON"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.sheet_to_json")," generates different types of JS objects. The function\ntakes an options argument:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"raw")),(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"true")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use raw values (true) or formatted strings (false)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"range")),(0,l.kt)("td",{parentName:"tr",align:"center"},"from WS"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Override Range (see table below)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"header")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Control output format (see table below)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"dateNF")),(0,l.kt)("td",{parentName:"tr",align:"center"},"FMT 14"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified date format in string output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"defval")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified value in place of null or undefined")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"blankrows")),(0,l.kt)("td",{parentName:"tr",align:"center"},"**"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Include blank lines in the output **")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"raw")," only affects cells which have a format code (",(0,l.kt)("inlineCode",{parentName:"li"},".z"),") field or a formatted\ntext (",(0,l.kt)("inlineCode",{parentName:"li"},".w"),") field."),(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("inlineCode",{parentName:"li"},"header")," is specified, the first row is considered a data row; if ",(0,l.kt)("inlineCode",{parentName:"li"},"header"),"\nis not specified, the first row is the header row and not considered data."),(0,l.kt)("li",{parentName:"ul"},"When ",(0,l.kt)("inlineCode",{parentName:"li"},"header")," is not specified, the conversion will automatically disambiguate\nheader entries by affixing ",(0,l.kt)("inlineCode",{parentName:"li"},"_")," and a count starting at ",(0,l.kt)("inlineCode",{parentName:"li"},"1"),".  For example, if\nthree columns have header ",(0,l.kt)("inlineCode",{parentName:"li"},"foo")," the output fields are ",(0,l.kt)("inlineCode",{parentName:"li"},"foo"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"foo_1"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"foo_2")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"null")," values are returned when ",(0,l.kt)("inlineCode",{parentName:"li"},"raw")," is true but are skipped when false."),(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("inlineCode",{parentName:"li"},"defval")," is not specified, null and undefined values are skipped normally.\nIf specified, all null and undefined points will be filled with ",(0,l.kt)("inlineCode",{parentName:"li"},"defval")),(0,l.kt)("li",{parentName:"ul"},"When ",(0,l.kt)("inlineCode",{parentName:"li"},"header")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"1"),", the default is to generate blank rows.  ",(0,l.kt)("inlineCode",{parentName:"li"},"blankrows")," must\nbe set to ",(0,l.kt)("inlineCode",{parentName:"li"},"false")," to skip blank rows."),(0,l.kt)("li",{parentName:"ul"},"When ",(0,l.kt)("inlineCode",{parentName:"li"},"header")," is not ",(0,l.kt)("inlineCode",{parentName:"li"},"1"),", the default is to skip blank rows.  ",(0,l.kt)("inlineCode",{parentName:"li"},"blankrows")," must\nbe true to generate blank rows")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"range")," is expected to be one of:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"th"},"range")),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(number)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use worksheet range but set starting row to the value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(string)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified range (A1-style bounded range string)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(default)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use worksheet range (",(0,l.kt)("inlineCode",{parentName:"td"},"ws['!ref']"),")")))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"header")," is expected to be one of:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"th"},"header")),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"1")),(0,l.kt)("td",{parentName:"tr",align:"left"},'Generate an array of arrays ("2D Array")')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},'"A"')),(0,l.kt)("td",{parentName:"tr",align:"left"},"Row object keys are literal column labels")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"array of strings"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified strings as keys in row objects")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(default)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Read and disambiguate first row as keys")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If header is not ",(0,l.kt)("inlineCode",{parentName:"li"},"1"),", the row object will contain the non-enumerable property\n",(0,l.kt)("inlineCode",{parentName:"li"},"__rowNum__")," that represents the row of the sheet corresponding to the entry."),(0,l.kt)("li",{parentName:"ul"},"If header is an array, the keys will not be disambiguated.  This can lead to\nunexpected results if the array values are not unique!")),(0,l.kt)("details",null,(0,l.kt)("summary",null,(0,l.kt)("b",null,"Examples")," (click to show)"),(0,l.kt)("p",null,"For the example sheet:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"> XLSX.utils.sheet_to_json(ws);\n[ { S: 1, h: 2, e: 3, e_1: 4, t: 5, J: 6, S_1: 7 },\n  { S: 2, h: 3, e: 4, e_1: 5, t: 6, J: 7, S_1: 8 } ]\n\n> XLSX.utils.sheet_to_json(ws, {header:\"A\"});\n[ { A: 'S', B: 'h', C: 'e', D: 'e', E: 't', F: 'J', G: 'S' },\n  { A: '1', B: '2', C: '3', D: '4', E: '5', F: '6', G: '7' },\n  { A: '2', B: '3', C: '4', D: '5', E: '6', F: '7', G: '8' } ]\n\n> XLSX.utils.sheet_to_json(ws, {header:[\"A\",\"E\",\"I\",\"O\",\"U\",\"6\",\"9\"]});\n[ { '6': 'J', '9': 'S', A: 'S', E: 'h', I: 'e', O: 'e', U: 't' },\n  { '6': '6', '9': '7', A: '1', E: '2', I: '3', O: '4', U: '5' },\n  { '6': '7', '9': '8', A: '2', E: '3', I: '4', O: '5', U: '6' } ]\n\n> XLSX.utils.sheet_to_json(ws, {header:1});\n[ [ 'S', 'h', 'e', 'e', 't', 'J', 'S' ],\n  [ '1', '2', '3', '4', '5', '6', '7' ],\n  [ '2', '3', '4', '5', '6', '7', '8' ] ]\n")),(0,l.kt)("p",null,"Example showing the effect of ",(0,l.kt)("inlineCode",{parentName:"p"},"raw"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"> ws['A2'].w = \"3\";                          // set A2 formatted string value\n\n> XLSX.utils.sheet_to_json(ws, {header:1, raw:false});\n[ [ 'S', 'h', 'e', 'e', 't', 'J', 'S' ],\n  [ '3', '2', '3', '4', '5', '6', '7' ],     // <-- A2 uses the formatted string\n  [ '2', '3', '4', '5', '6', '7', '8' ] ]\n\n> XLSX.utils.sheet_to_json(ws, {header:1});\n[ [ 'S', 'h', 'e', 'e', 't', 'J', 'S' ],\n  [ 1, 2, 3, 4, 5, 6, 7 ],                   // <-- A2 uses the raw value\n  [ 2, 3, 4, 5, 6, 7, 8 ] ]\n"))))}N.isMDXComponent=!0}}]);