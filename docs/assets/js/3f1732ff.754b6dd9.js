"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5238],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>c});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),p=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(a),c=r,h=u["".concat(i,".").concat(c)]||u[c]||m[c]||o;return a?n.createElement(h,s(s({ref:t},d),{},{components:a})):n.createElement(h,s({ref:t},d))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var p=2;p<o;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(7294),r=a(6010);const o="tabItem_Ymn6";function s(e){let{children:t,hidden:a,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,s),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>c});var n=a(7462),r=a(7294),o=a(6010),s=a(2389),l=a(7392),i=a(7094),p=a(2466);const d="tabList__CuJ",m="tabItem_LNqP";function u(e){var t;const{lazy:a,block:s,defaultValue:u,values:c,groupId:h,className:k}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=c??f.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),g=(0,l.l)(b,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===u?u:u??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==N&&!b.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:w,setTabGroupChoices:x}=(0,i.U)(),[y,v]=(0,r.useState)(N),T=[],{blockElementScrollPositionUntilNextRender:S}=(0,p.o5)();if(null!=h){const e=w[h];null!=e&&e!==y&&b.some((t=>t.value===e))&&v(e)}const X=e=>{const t=e.currentTarget,a=T.indexOf(t),n=b[a].value;n!==y&&(S(t),v(n),null!=h&&x(h,String(n)))},j=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;a=T[t]??T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;a=T[t]??T[T.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":s},k)},b.map((e=>{let{value:t,label:a,attributes:s}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:y===t?0:-1,"aria-selected":y===t,key:t,ref:e=>T.push(e),onKeyDown:j,onFocus:X,onClick:X},s,{className:(0,o.Z)("tabs__item",m,null==s?void 0:s.className,{"tabs__item--active":y===t})}),a??t)}))),a?(0,r.cloneElement)(f.filter((e=>e.props.value===y))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==y})))))}function c(e){const t=(0,s.Z)();return r.createElement(u,(0,n.Z)({key:String(t)},e))}},9628:(e,t,a)=>{a.d(t,{Z:()=>n});const n="0.18.12"},8296:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>u});var n=a(7462),r=(a(7294),a(3905)),o=a(9628),s=a(5488),l=a(5162);const i={sidebar_position:1},p="Data Import",d={unversionedId:"solutions/input",id:"solutions/input",title:"Data Import",description:"Parsing Workbooks",source:"@site/docs/06-solutions/01-input.md",sourceDirName:"06-solutions",slug:"/solutions/input",permalink:"/docs/solutions/input",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Data in Version Control",permalink:"/docs/demos/git"},next:{title:"Data Processing",permalink:"/docs/solutions/processing"}},m={},u=[{value:"Parsing Workbooks",id:"parsing-workbooks",level:2},{value:"API",id:"api",level:3},{value:"Examples",id:"examples",level:4},{value:"Example: Local File",id:"example-local-file",level:3},{value:"Example: User Submissions",id:"example-user-submissions",level:3},{value:"Example: Remote File",id:"example-remote-file",level:3},{value:"Example: Readable Streams",id:"example-readable-streams",level:3},{value:"Processing JSON and JS Data",id:"processing-json-and-js-data",level:2},{value:"API",id:"api-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"Processing HTML Tables",id:"processing-html-tables",level:2},{value:"API",id:"api-2",level:4},{value:"Examples",id:"examples-2",level:4}],c={toc:u};function h(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-import"},"Data Import"),(0,r.kt)("h2",{id:"parsing-workbooks"},"Parsing Workbooks"),(0,r.kt)("h3",{id:"api"},"API"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Extract data from spreadsheet bytes")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"var workbook = XLSX.read(data, opts);\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"read"),' method can extract data from spreadsheet bytes stored in a JS string,\n"binary string", NodeJS buffer or typed array (',(0,r.kt)("inlineCode",{parentName:"p"},"Uint8Array")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"ArrayBuffer"),")."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Read spreadsheet bytes from a local file and extract data")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"var workbook = XLSX.readFile(filename, opts);\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"readFile")," method attempts to read a spreadsheet file at the supplied path."),(0,r.kt)("p",null,"The second ",(0,r.kt)("inlineCode",{parentName:"p"},"opts")," argument is optional. ",(0,r.kt)("a",{parentName:"p",href:"../api/parse-options"},'"Parsing Options"'),"\ncovers the supported properties and behaviors."),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Browsers generally do not allow reading files by specifying filename (it is a\nsecurity risk), and running ",(0,r.kt)("inlineCode",{parentName:"p"},"XLSX.readFile")," in the browser will throw an error."),(0,r.kt)("p",{parentName:"admonition"},"Deno scripts must be invoked with ",(0,r.kt)("inlineCode",{parentName:"p"},"--allow-read")," to read from the filesystem.")),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Here are a few common scenarios (click on each subtitle to see the code)."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"../demos"},"demos")," cover special deployments in more detail."),(0,r.kt)("h3",{id:"example-local-file"},"Example: Local File"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"XLSX.readFile")," supports reading local files in platforms like NodeJS. In other\nplatforms like React Native, ",(0,r.kt)("inlineCode",{parentName:"p"},"XLSX.read")," should be called with file data."),(0,r.kt)("p",null,"In-browser processing where users drag-and-drop files or use a file element are\ncovered in ",(0,r.kt)("a",{parentName:"p",href:"#example-user-submissions"},'the "User Submissions" example.')),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"readFile")," uses ",(0,r.kt)("inlineCode",{parentName:"p"},"fs.readFileSync")," under the hood:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'var XLSX = require("xlsx");\n\nvar workbook = XLSX.readFile("test.xlsx");\n')),(0,r.kt)("p",null,"For Node ESM, ",(0,r.kt)("inlineCode",{parentName:"p"},"fs")," must be loaded manually:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import * as fs from "fs";\nimport { readFile, set_fs } from "xlsx/xlsx.mjs";\nset_fs(fs);\n\nconst workbook = readFile("test.xlsx");\n'))),(0,r.kt)(l.Z,{value:"electron",label:"Electron",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"readFile")," can be used in the renderer process:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/* From the renderer process */\nvar XLSX = require("xlsx");\n\nvar workbook = XLSX.readFile(path);\n')),(0,r.kt)("p",null,"Electron APIs have changed over time.  The ",(0,r.kt)("a",{parentName:"p",href:"../demos/desktop#electron"},(0,r.kt)("inlineCode",{parentName:"a"},"electron")," demo"),"\nshows a complete example and details the required version-specific settings.")),(0,r.kt)(l.Z,{value:"reactnative",label:"React Native",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../demos/mobile#rn-file-plugins"},"The React Native Demo")," covers tested plugins.")),(0,r.kt)(l.Z,{value:"extendscript",label:"Photoshop",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"readFile")," wraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"File")," logic in Photoshop and other ExtendScript targets.\nThe specified path should be an absolute path:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'#include "xlsx.extendscript.js"\n\n/* Read test.xlsx from the Documents folder */\nvar workbook = XLSX.readFile(Folder.myDocuments + "/test.xlsx");\n')),(0,r.kt)("p",null,"For user-configurable paths, ",(0,r.kt)("inlineCode",{parentName:"p"},"openDialog")," can show a file picker:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'#include "xlsx.extendscript.js"\n\n/* Ask user to select path */\nvar thisFile = File.openDialog("Select a spreadsheet");\nvar workbook = XLSX.readFile(thisFile.absoluteURI);\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"../demos/extendscript"},(0,r.kt)("inlineCode",{parentName:"a"},"extendscript")," demo")," includes a more complex example.")),(0,r.kt)(l.Z,{value:"deno",label:"Deno",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"readFile")," uses ",(0,r.kt)("inlineCode",{parentName:"p"},"Deno.readFileSync")," under the hood:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},`// @deno-types="https://cdn.sheetjs.com/xlsx-${o.Z}/package/types/index.d.ts"\nimport * as XLSX from 'https://cdn.sheetjs.com/xlsx-${o.Z}/package/xlsx.mjs';\n\nconst workbook = XLSX.readFile("test.xlsx");`)),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Applications reading files must be invoked with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--allow-read")," flag."))),(0,r.kt)(l.Z,{value:"bun",label:"Bun",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Jarred-Sumner/bun/issues/256"},"Bun ",(0,r.kt)("inlineCode",{parentName:"a"},"readFileSync"))," currently\nreturns a ",(0,r.kt)("inlineCode",{parentName:"p"},"Uint8Array"),".  The result should be wrapped in a ",(0,r.kt)("inlineCode",{parentName:"p"},"Buffer"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { readFileSync } from 'fs'\nimport { read } from './xlsx.mjs'\n\nconst workbook = read(Buffer.from(readFileSync(path)));\n")))),(0,r.kt)("h3",{id:"example-user-submissions"},"Example: User Submissions"),(0,r.kt)("p",null,"This example focuses on user-submitted files through a drag-and-drop event, HTML\nfile input element, or network request."),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"browser",label:"Browser",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For modern websites targeting Chrome 76+"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"File#arrayBuffer")," is recommended:"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"dnd",label:"Drag and Drop",mdxType:"TabItem"},(0,r.kt)("p",null,"Assume ",(0,r.kt)("inlineCode",{parentName:"p"},"drop_dom_element")," is the DOM element that will listen for changes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<div id="drop_dom_element">Drop files here</div>\n')),(0,r.kt)("p",null,"The event property is ",(0,r.kt)("inlineCode",{parentName:"p"},"e.dataTransfer"),".  The code snippet highlights the\ndifference between the drag-and-drop example and the file input example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// XLSX is a global from the standalone script\n\nasync function handleDropAsync(e) {\n  e.stopPropagation(); e.preventDefault();\n  // highlight-next-line\n  const f = e.dataTransfer.files[0];\n  /* f is a File */\n  const data = await f.arrayBuffer();\n  /* data is an ArrayBuffer */\n  const workbook = XLSX.read(data);\n\n  /* DO SOMETHING WITH workbook HERE */\n}\ndrop_dom_element.addEventListener("drop", handleDropAsync, false);\n'))),(0,r.kt)(l.Z,{value:"file",label:"HTML File Input Element",mdxType:"TabItem"},(0,r.kt)("p",null,"Starting with an HTML INPUT element with ",(0,r.kt)("inlineCode",{parentName:"p"},'type="file"'),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<input type="file" id="input_dom_element">\n')),(0,r.kt)("p",null,"The event property is ",(0,r.kt)("inlineCode",{parentName:"p"},"e.target"),".  The code snippet highlights the difference\nbetween the drag-and-drop example and the file input example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// XLSX is a global from the standalone script\n\nasync function handleFileAsync(e) {\n  // highlight-next-line\n  const file = e.target.files[0];\n  const data = await file.arrayBuffer();\n  /* data is an ArrayBuffer */\n  const workbook = XLSX.read(data);\n\n  /* DO SOMETHING WITH workbook HERE */\n}\ninput_dom_element.addEventListener("change", handleFileAsync, false);\n')))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://oss.sheetjs.com/sheetjs/"},"https://oss.sheetjs.com/sheetjs/")," demonstrates the FileReader technique."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For maximal compatibility (IE10+)"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"FileReader")," approach is recommended:"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"dnd",label:"Drag and Drop",mdxType:"TabItem"},(0,r.kt)("p",null,"Assume ",(0,r.kt)("inlineCode",{parentName:"p"},"drop_dom_element")," is the DOM element that will listen for changes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<div id="drop_dom_element">Drop files here</div>\n')),(0,r.kt)("p",null,"The event property is ",(0,r.kt)("inlineCode",{parentName:"p"},"e.dataTransfer"),".  The code snippet highlights the\ndifference between the drag-and-drop example and the file input example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function handleDrop(e) {\n  e.stopPropagation(); e.preventDefault();\n  // highlight-next-line\n  var f = e.dataTransfer.files[0];\n  /* f is a File */\n  var reader = new FileReader();\n  reader.onload = function(e) {\n    var data = e.target.result;\n    /* reader.readAsArrayBuffer(file) -> data will be an ArrayBuffer */\n    var workbook = XLSX.read(data);\n\n    /* DO SOMETHING WITH workbook HERE */\n  };\n  reader.readAsArrayBuffer(f);\n}\ndrop_dom_element.addEventListener("drop", handleDrop, false);\n'))),(0,r.kt)(l.Z,{value:"file",label:"HTML File Input Element",mdxType:"TabItem"},(0,r.kt)("p",null,"Starting with an HTML INPUT element with ",(0,r.kt)("inlineCode",{parentName:"p"},'type="file"'),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<input type="file" id="input_dom_element">\n')),(0,r.kt)("p",null,"The event property is ",(0,r.kt)("inlineCode",{parentName:"p"},"e.target"),".  The code snippet highlights the difference\nbetween the drag-and-drop example and the file input example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function handleFile(e) {\n  // highlight-next-line\n  var file = e.target.files[0];\n  var reader = new FileReader();\n  reader.onload = function(e) {\n    var data = e.target.result;\n    /* reader.readAsArrayBuffer(file) -> data will be an ArrayBuffer */\n    var workbook = XLSX.read(e.target.result);\n\n    /* DO SOMETHING WITH workbook HERE */\n  };\n  reader.readAsArrayBuffer(file);\n}\ninput_dom_element.addEventListener("change", handleFile, false);\n')))),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"../demos/legacy#internet-explorer"},(0,r.kt)("inlineCode",{parentName:"a"},"oldie")," demo")," shows an IE-compatible fallback scenario.")),(0,r.kt)(l.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"read")," can accept a NodeJS buffer.  ",(0,r.kt)("inlineCode",{parentName:"p"},"readFile")," can read files generated by a\nHTTP POST request body parser like ",(0,r.kt)("a",{parentName:"p",href:"https://npm.im/formidable"},(0,r.kt)("inlineCode",{parentName:"a"},"formidable")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const XLSX = require("xlsx");\nconst http = require("http");\nconst formidable = require("formidable");\n\nconst server = http.createServer((req, res) => {\n  const form = new formidable.IncomingForm();\n  form.parse(req, (err, fields, files) => {\n    /* grab the first file */\n    const f = Object.entries(files)[0][1];\n    const path = f.filepath;\n    const workbook = XLSX.readFile(path);\n\n    /* DO SOMETHING WITH workbook HERE */\n  });\n}).listen(process.env.PORT || 7262);\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"../demos/server"},(0,r.kt)("inlineCode",{parentName:"a"},"server")," demo")," has more advanced examples.")),(0,r.kt)(l.Z,{value:"deno",label:"Deno",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://drash.land/drash/"},"Drash")," is a HTTP server framework for Deno.  In a\n",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," request handler, the body parser can pull file data into a ",(0,r.kt)("inlineCode",{parentName:"p"},"Uint8Array"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},`// @deno-types="https://cdn.sheetjs.com/xlsx-${o.Z}/package/types/index.d.ts"\nimport * as XLSX from 'https://cdn.sheetjs.com/xlsx-${o.Z}/package/xlsx.mjs';\n/* load the codepage support library for extended support with older formats  */\nimport * as cptable from 'https://cdn.sheetjs.com/xlsx-${o.Z}/package/dist/cpexcel.full.mjs';\nXLSX.set_cptable(cptable);\n\nimport * as Drash from "https://deno.land/x/drash@v2.5.4/mod.ts";\n\nclass SheetResource extends Drash.Resource {\n  public paths = ["/"];\n\n  public POST(request: Drash.Request, response: Drash.Response) {\n    // highlight-next-line\n    const file = request.bodyParam<Drash.Types.BodyFile>("file");\n    if (!file) throw new Error("File is required!");\n    // highlight-next-line\n    var wb = XLSX.read(file.content, {type: "buffer"});\n    var html = XLSX.utils.sheet_to_html(wb.Sheets[wb.SheetNames[0]]);\n    return response.html(html);\n  }\n}\n\nconst server = new Drash.Server({ hostname: "", port: 7262, protocol: "http",\n  resources: [\n    // highlight-next-line\n    SheetResource,\n  ],\n});\n\nserver.run();`)),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Deno must be run with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--allow-net")," flag to enable network requests:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"deno run --allow-net test-server.ts\n")),(0,r.kt)("p",{parentName:"admonition"},"To test, submit a POST request to http://localhost:7262 including a file:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST -F "file=@test.xlsx" http://localhost:7262/\n'))))),(0,r.kt)("h3",{id:"example-remote-file"},"Example: Remote File"),(0,r.kt)("p",null,'This example focuses on fetching files ("Ajax" in browser parlance) using APIs\nlike ',(0,r.kt)("inlineCode",{parentName:"p"},"XMLHttpRequest")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch")," as well as third-party libraries."),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"browser",label:"Browser",mdxType:"TabItem"},(0,r.kt)("p",null,"For modern websites targeting Chrome 42+, ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch")," is recommended:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// XLSX is a global from the standalone script\n\n(async() => {\n  const url = "http://oss.sheetjs.com/test_files/formula_stress_test.xlsx";\n  const data = await (await fetch(url)).arrayBuffer();\n  /* data is an ArrayBuffer */\n  const workbook = XLSX.read(data);\n\n  /* DO SOMETHING WITH workbook HERE */\n})();\n')),(0,r.kt)("p",null,"For broader support, the ",(0,r.kt)("inlineCode",{parentName:"p"},"XMLHttpRequest")," approach is recommended:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'var url = "http://oss.sheetjs.com/test_files/formula_stress_test.xlsx";\n\n/* set up async GET request */\nvar req = new XMLHttpRequest();\nreq.open("GET", url, true);\nreq.responseType = "arraybuffer";\n\nreq.onload = function(e) {\n  var workbook = XLSX.read(req.response);\n\n  /* DO SOMETHING WITH workbook HERE */\n};\n\nreq.send();\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"../demos/network"},(0,r.kt)("inlineCode",{parentName:"a"},"xhr")," demo")," includes a longer discussion and more examples."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://oss.sheetjs.com/sheetjs/ajax.html"},"http://oss.sheetjs.com/sheetjs/ajax.html")," shows fallback approaches for IE6+.")),(0,r.kt)(l.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,r.kt)("p",null,"Node 17.5 and 18.0 have native support for fetch:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const XLSX = require("xlsx");\n\nconst url = "http://oss.sheetjs.com/test_files/formula_stress_test.xlsx";\nconst data = await (await fetch(url)).arrayBuffer();\n/* data is an ArrayBuffer */\nconst workbook = XLSX.read(data);\n')),(0,r.kt)("p",null,"For broader compatibility, third-party modules are recommended."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://npm.im/request"},(0,r.kt)("inlineCode",{parentName:"a"},"request"))," requires a ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," encoding to yield Buffers:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'var XLSX = require("xlsx");\nvar request = require("request");\n\nvar url = "http://oss.sheetjs.com/test_files/formula_stress_test.xlsx";\nrequest({url: url, encoding: null}, function(err, resp, body) {\n  var workbook = XLSX.read(body);\n\n  /* DO SOMETHING WITH workbook HERE */\n});\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://axios-http.com/"},(0,r.kt)("inlineCode",{parentName:"a"},"axios"))," works the same way in browser and in NodeJS:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const XLSX = require("xlsx");\nconst axios = require("axios");\n\nconst url = "http://oss.sheetjs.com/test_files/formula_stress_test.xlsx";\n(async() => {\n  const res = await axios.get(url, {responseType: "arraybuffer"});\n  /* res.data is a Buffer */\n  const workbook = XLSX.read(res.data);\n\n  /* DO SOMETHING WITH workbook HERE */\n})();\n'))),(0,r.kt)(l.Z,{value:"bun",label:"Bun",mdxType:"TabItem"},(0,r.kt)("p",null,"Bun has native support for ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch"),".  Using the ",(0,r.kt)("a",{parentName:"p",href:"../getting-started/installation/nodejs"},"NodeJS package"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import * as XLSX from 'xlsx/xlsx.mjs';\n/* load the codepage support library for extended support with older formats  */\nimport * as cptable from 'xlsx/dist/cpexcel.full.mjs';\nXLSX.set_cptable(cptable);\n\nconst url = \"http://oss.sheetjs.com/test_files/formula_stress_test.xlsx\";\n// highlight-next-line\nconst data = await (await fetch(url)).arrayBuffer();\n/* data is an ArrayBuffer */\nconst workbook = XLSX.read(data);\n"))),(0,r.kt)(l.Z,{value:"deno",label:"Deno",mdxType:"TabItem"},(0,r.kt)("p",null,"Deno has native support for ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},`// @deno-types="https://cdn.sheetjs.com/xlsx-${o.Z}/package/types/index.d.ts"\nimport * as XLSX from 'https://cdn.sheetjs.com/xlsx-${o.Z}/package/xlsx.mjs';\n/* load the codepage support library for extended support with older formats  */\nimport * as cptable from 'https://cdn.sheetjs.com/xlsx-${o.Z}/package/dist/cpexcel.full.mjs';\nXLSX.set_cptable(cptable);\n\nconst url = "http://oss.sheetjs.com/test_files/formula_stress_test.xlsx";\n// highlight-next-line\nconst data = await (await fetch(url)).arrayBuffer();\n/* data is an ArrayBuffer */\nconst workbook = XLSX.read(data);`)),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Deno must be run with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--allow-net")," flag to enable network requests:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"deno run --allow-net test-fetch.ts\n")))),(0,r.kt)(l.Z,{value:"electron",label:"Electron",mdxType:"TabItem"},(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"net")," module in the main process can make HTTP/HTTPS requests to external\nresources.  Responses should be manually concatenated using ",(0,r.kt)("inlineCode",{parentName:"p"},"Buffer.concat"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const XLSX = require("xlsx");\nconst { net } = require("electron");\n\nconst url = "http://oss.sheetjs.com/test_files/formula_stress_test.xlsx";\nconst req = net.request(url);\nreq.on("response", (res) => {\n  const bufs = []; // this array will collect all of the buffers\n  res.on("data", (chunk) => { bufs.push(chunk); });\n  res.on("end", () => {\n    const workbook = XLSX.read(Buffer.concat(bufs));\n\n    /* DO SOMETHING WITH workbook HERE */\n  });\n});\nreq.end();\n')))),(0,r.kt)("h3",{id:"example-readable-streams"},"Example: Readable Streams"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The recommended approach is to buffer streams in memory and process once all of\nthe data has been collected. A proper streaming parse is technically impossible."),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Technical details")," (click to show)"),(0,r.kt)("p",{parentName:"admonition"},'XLSX, XLSB, NUMBERS, and ODS files are ultimately ZIP files that contain binary\nand XML entries.  The ZIP file format stores the table of contents ("end of\ncentral directory" record) at the end of the file, so a proper parse of a ZIP\nfile requires scanning from the end.  Streams do not provide random access into\nthe data, so the only correct approach involves buffering the entire stream.'),(0,r.kt)("p",{parentName:"admonition"},'XLS, XLR, QPW, and Works 4 for Mac files use the "Compound File Binary Format".\nIt is a container format that can hold multiple "files" and "folders".  It also\nhas a table of contents ("directory sectors") but these can be placed anywhere\nin the file!  The only correct approach involves buffering enough of the stream\nto find the full table of contents, but the added complexity has little benefit\nwhen testing against real-world files generated by various versions of Excel and\nother tools.'))),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"browser",label:"Browser",mdxType:"TabItem"},(0,r.kt)("p",null,"When dealing with ",(0,r.kt)("inlineCode",{parentName:"p"},"ReadableStream"),", the easiest approach is to buffer the stream\nand process the whole thing at the end:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// XLSX is a global from the standalone script\n\nasync function process_RS(stream) {\n  /* collect data */\n  const buffers = [];\n  const reader = stream.getReader();\n  for(;;) {\n    const res = await reader.read();\n    if(res.value) buffers.push(res.value);\n    if(res.done) break;\n  }\n\n  /* concat */\n  const out = new Uint8Array(buffers.reduce((acc, v) => acc + v.length, 0));\n\n  let off = 0;\n  for(const u8 of buffers) {\n    out.set(u8, off);\n    off += u8.length;\n  }\n\n  return out;\n}\n\nconst data = await process_RS(stream);\n/* data is Uint8Array */\nconst workbook = XLSX.read(data, {type: 'array'});\n"))),(0,r.kt)(l.Z,{value:"nodejs",label:"NodeJS",mdxType:"TabItem"},(0,r.kt)("p",null,"When dealing with Readable Streams, the easiest approach is to buffer the stream\nand process the whole thing at the end:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'var fs = require("fs");\nvar XLSX = require("xlsx");\n\nfunction process_RS(stream, cb) {\n  var buffers = [];\n  stream.on("data", function(data) { buffers.push(data); });\n  stream.on("end", function() {\n    var buffer = Buffer.concat(buffers);\n    var workbook = XLSX.read(buffer, {type:"buffer"});\n\n    /* DO SOMETHING WITH workbook IN THE CALLBACK */\n    cb(workbook);\n  });\n}\n'))),(0,r.kt)(l.Z,{value:"deno",label:"Deno",mdxType:"TabItem"},(0,r.kt)("p",null,"In addition to the browser ",(0,r.kt)("inlineCode",{parentName:"p"},"ReadableStream")," API, Deno has its own ",(0,r.kt)("inlineCode",{parentName:"p"},"Reader"),"\n",(0,r.kt)("a",{parentName:"p",href:"https://doc.deno.land/deno/stable/~/Deno.Reader"},"interface"),"."),(0,r.kt)("p",null,"For these streams, ",(0,r.kt)("inlineCode",{parentName:"p"},"std")," provides a ",(0,r.kt)("inlineCode",{parentName:"p"},"readAll")," method to collect data into a\n",(0,r.kt)("inlineCode",{parentName:"p"},"Uint8Array"),".  This example reads from a file using ",(0,r.kt)("inlineCode",{parentName:"p"},"Deno.open")," and prints the\nworksheet names array:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},`// @deno-types="https://cdn.sheetjs.com/xlsx-${o.Z}/package/types/index.d.ts"\nimport * as XLSX from 'https://cdn.sheetjs.com/xlsx-${o.Z}/package/xlsx.mjs';\n\nimport { readAll } from "https://deno.land/std/streams/conversion.ts";\n\n/* Simple Deno.Reader from a file */\nconst file = await Deno.open("test.xlsx", {read: true});\n\n/* \`content\` will be a Uint8Array holding the full contents of the stream */\nconst content  = await readAll(file);\n\n/* Since this is a Uint8Array, \`XLSX.read\` "just works" */\nconst wb = XLSX.read(content);\nconsole.log(wb.SheetNames);`)))),(0,r.kt)("p",null,"More detailed examples are covered in the ",(0,r.kt)("a",{parentName:"p",href:"../demos/"},"included demos")),(0,r.kt)("h2",{id:"processing-json-and-js-data"},"Processing JSON and JS Data"),(0,r.kt)("p",null,"JSON and JS data tend to represent single worksheets.  This section will use a\nfew utility functions to generate workbooks."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Create a new Workbook")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"var workbook = XLSX.utils.book_new();\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"book_new")," utility function creates an empty workbook with no worksheets."),(0,r.kt)("p",null,"Spreadsheet software generally require at least one worksheet and enforce the\nrequirement in the user interface.  This library enforces the requirement at\nwrite time, throwing errors if an empty workbook is passed to write functions."),(0,r.kt)("h4",{id:"api-1"},"API"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Create a worksheet from an array of arrays of JS values")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"var worksheet = XLSX.utils.aoa_to_sheet(aoa, opts);\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"aoa_to_sheet"),' utility function walks an "array of arrays" in row-major\norder, generating a worksheet object.  The following snippet generates a sheet\nwith cell ',(0,r.kt)("inlineCode",{parentName:"p"},"A1")," set to the string ",(0,r.kt)("inlineCode",{parentName:"p"},"A1"),", cell ",(0,r.kt)("inlineCode",{parentName:"p"},"B1")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"B1"),", etc:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'var worksheet = XLSX.utils.aoa_to_sheet([\n  ["A1", "B1", "C1"],\n  ["A2", "B2", "C2"],\n  ["A3", "B3", "C3"]\n]);\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../api/utilities#array-of-arrays-input"},'"Array of Arrays Input"')," describes the function and the\noptional ",(0,r.kt)("inlineCode",{parentName:"p"},"opts")," argument in more detail."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Create a worksheet from an array of JS objects")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"var worksheet = XLSX.utils.json_to_sheet(jsa, opts);\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"json_to_sheet")," utility function walks an array of JS objects in order,\ngenerating a worksheet object.  By default, it will generate a header row and\none row per object in the array.  The optional ",(0,r.kt)("inlineCode",{parentName:"p"},"opts")," argument has settings to\ncontrol the column order and header output."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../api/utilities#array-of-objects-input"},'"Array of Objects Input"')," describes the function and\nthe optional ",(0,r.kt)("inlineCode",{parentName:"p"},"opts")," argument in more detail."),(0,r.kt)("h4",{id:"examples-1"},"Examples"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../getting-started/example"},'"Complete Example"'),' contains a detailed example\n"Get Data from a JSON Endpoint and Generate a Workbook"'),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/myliang/x-spreadsheet"},(0,r.kt)("inlineCode",{parentName:"a"},"x-spreadsheet"))," is an interactive\ndata grid for previewing and modifying structured data in the web browser.  The\n",(0,r.kt)("a",{parentName:"p",href:"../demos/grid#x-spreadsheet"},"demo")," includes more detailed examples."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../demos/ml"},'"Typed Arrays and ML"')," covers strategies for\ncreating worksheets from ML library exports (datasets stored in Typed Arrays)."),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Records from a database query (SQL or no-SQL)")," (click to show)"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"../demos/database/"},(0,r.kt)("inlineCode",{parentName:"a"},"database")," demo")," includes examples of working with\ndatabases and query results.")),(0,r.kt)("h2",{id:"processing-html-tables"},"Processing HTML Tables"),(0,r.kt)("h4",{id:"api-2"},"API"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Create a worksheet by scraping an HTML TABLE in the page")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"var worksheet = XLSX.utils.table_to_sheet(dom_element, opts);\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"table_to_sheet")," utility function takes a DOM TABLE element and iterates\nthrough the rows to generate a worksheet.  The ",(0,r.kt)("inlineCode",{parentName:"p"},"opts")," argument is optional.\n",(0,r.kt)("a",{parentName:"p",href:"../api/utilities#html-table-input"},'"HTML Table Input"')," describes the function in more detail."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Create a workbook by scraping an HTML TABLE in the page")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"var workbook = XLSX.utils.table_to_book(dom_element, opts);\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"table_to_book")," utility function follows the same logic as ",(0,r.kt)("inlineCode",{parentName:"p"},"table_to_sheet"),".\nAfter generating a worksheet, it creates a blank workbook and appends the\nspreadsheet."),(0,r.kt)("p",null,"The options argument supports the same options as ",(0,r.kt)("inlineCode",{parentName:"p"},"table_to_sheet"),", with the\naddition of a ",(0,r.kt)("inlineCode",{parentName:"p"},"sheet")," property to control the worksheet name.  If the property\nis missing or no options are specified, the default name ",(0,r.kt)("inlineCode",{parentName:"p"},"Sheet1")," is used."),(0,r.kt)("h4",{id:"examples-2"},"Examples"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"../demos/headless"},"Headless Demo"),' includes examples of\nserver-side spreadsheet generation from HTML TABLE elements using headless\nChromium ("Puppeteer") and other browsers ("Playwright")'),(0,r.kt)("p",null,"Here are a few common scenarios (click on each subtitle to see the code):"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"HTML TABLE element in a webpage")," (click to show)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- include the standalone script and shim --\x3e\n<script src="https://cdn.sheetjs.com/xlsx-latest/package/dist/shim.min.js"><\/script>\n<script src="https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"><\/script>\n\n\x3c!-- example table with id attribute --\x3e\n<table id="tableau">\n  <tr><td>Sheet</td><td>JS</td></tr>\n  <tr><td>12345</td><td>67</td></tr>\n</table>\n\n\x3c!-- this block should appear after the table HTML and the standalone script --\x3e\n<script type="text/javascript">\n  var workbook = XLSX.utils.table_to_book(document.getElementById("tableau"));\n\n  /* DO SOMETHING WITH workbook HERE */\n<\/script>\n')),(0,r.kt)("p",null,"Multiple tables on a web page can be converted to individual worksheets:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/* create new workbook */\nvar workbook = XLSX.utils.book_new();\n\n/* convert table "table1" to worksheet named "Sheet1" */\nvar sheet1 = XLSX.utils.table_to_sheet(document.getElementById("table1"));\nXLSX.utils.book_append_sheet(workbook, sheet1, "Sheet1");\n\n/* convert table "table2" to worksheet named "Sheet2" */\nvar sheet2 = XLSX.utils.table_to_sheet(document.getElementById("table2"));\nXLSX.utils.book_append_sheet(workbook, sheet2, "Sheet2");\n\n/* workbook now has 2 worksheets */\n')),(0,r.kt)("p",null,"Alternatively, the HTML code can be extracted and parsed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'var htmlstr = document.getElementById("tableau").outerHTML;\nvar workbook = XLSX.read(htmlstr, {type:"string"});\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Chrome/Chromium Extension")," (click to show)"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"../demos/chromium/"},(0,r.kt)("inlineCode",{parentName:"a"},"chrome")," demo")," shows a complete example and details the required\npermissions and other settings."),(0,r.kt)("p",null,"In an extension, it is recommended to generate the workbook in a content script\nand pass the object back to the extension:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/* in the worker script */\nchrome.runtime.onMessage.addListener(function(msg, sender, cb) {\n  /* pass a message like { sheetjs: true } from the extension to scrape */\n  if(!msg || !msg.sheetjs) return;\n  /* create a new workbook */\n  var workbook = XLSX.utils.book_new();\n  /* loop through each table element */\n  var tables = document.getElementsByTagName("table")\n  for(var i = 0; i < tables.length; ++i) {\n    var worksheet = XLSX.utils.table_to_sheet(tables[i]);\n    XLSX.utils.book_append_sheet(workbook, worksheet, "Table" + i);\n  }\n  /* pass back to the extension */\n  return cb(workbook);\n});\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"NodeJS HTML Tables without a browser")," (click to show)"),(0,r.kt)("p",null,"NodeJS does not include a DOM implementation and Puppeteer requires a hefty\nChromium build.  ",(0,r.kt)("a",{parentName:"p",href:"https://npm.im/jsdom"},(0,r.kt)("inlineCode",{parentName:"a"},"jsdom"))," is a lightweight alternative:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const XLSX = require("xlsx");\nconst { readFileSync } = require("fs");\nconst { JSDOM } = require("jsdom");\n\n/* obtain HTML string.  This example reads from test.html */\nconst html_str = fs.readFileSync("test.html", "utf8");\n/* get first TABLE element */\nconst doc = new JSDOM(html_str).window.document.querySelector("table");\n/* generate workbook */\nconst workbook = XLSX.utils.table_to_book(doc);\n'))))}h.isMDXComponent=!0}}]);