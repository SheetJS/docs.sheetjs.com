"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5743],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),h=p(n),u=o,m=h["".concat(l,".").concat(u)]||h[u]||d[u]||s;return n?a.createElement(m,r(r({ref:t},c),{},{components:n})):a.createElement(m,r({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var p=2;p<s;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7429:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const s={title:"Data in Version Control"},r=void 0,i={unversionedId:"demos/git",id:"demos/git",title:"Data in Version Control",description:"Git is a popular system for organizing a historical record of source code and",source:"@site/docs/03-demos/45-git.md",sourceDirName:"03-demos",slug:"/demos/git",permalink:"/docs/demos/git",draft:!1,tags:[],version:"current",sidebarPosition:45,frontMatter:{title:"Data in Version Control"},sidebar:"tutorialSidebar",previous:{title:"Legacy Frameworks",permalink:"/docs/demos/legacy"},next:{title:"Data Import",permalink:"/docs/solutions/input"}},l={},p=[{value:"Flat Data",id:"flat-data",level:2},{value:"Data Source",id:"data-source",level:3},{value:"Action",id:"action",level:3},{value:"Post-Processing Data",id:"post-processing-data",level:3},{value:"Post-Process Script",id:"post-process-script",level:4},{value:"Complete Example",id:"complete-example",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Git is a popular system for organizing a historical record of source code and\nchanges. Git can also store and track binary data artifacts, but data tools\nare more effective in processing data stored in plain text formats like CSV."),(0,o.kt)("p",null,"Many official data releases by governments and organizations include XLSX or\nXLS files. SheetJS trivializes the conversion to CSV. For example, in NodeJS:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const XLSX = require("xlsx");\n\n(async() => {\n  /* Download Data */\n  const f = await fetch("https://sheetjs.com/pres.xlsx");\n  const data = await f.arrayBuffer();\n\n  /* Parse workbook */\n  // highlight-next-line\n  const wb = XLSX.read(data);\n\n  /* Convert first worksheet to CSV */\n  const ws = wb.Sheets[wb.SheetNames[0]];\n  // highlight-next-line\n  const csv = XLSX.utils.sheet_to_csv(ws);\n  console.log(csv);\n})();\n')),(0,o.kt)("p",null,"GitHub's ",(0,o.kt)("a",{parentName:"p",href:"https://githubnext.com/projects/flat-data/"},'"Flat Data"')," project\nexplores storing and comparing versions of structured CSV and JSON data.  The\nofficial ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/githubocto/flat-demo-xlsx"},'"Excel to CSV"')," example\nuses SheetJS under the hood to generate CSV data from an XLSX file."),(0,o.kt)("p",null,"This demo covers implementation details elided in the official write-up."),(0,o.kt)("h2",{id:"flat-data"},"Flat Data"),(0,o.kt)("p",null,"As a project from the company, the entire lifecycle uses GitHub offerings:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"GitHub offers free hosting for Git repositories"),(0,o.kt)("li",{parentName:"ul"},"GitHub Actions provide the main engine for running tasks at regular intervals"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"githubocto/flat")," Action to help fetch data and automate post-processing"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"flat-postprocessing")," Post-processing helper functions and examples"),(0,o.kt)("li",{parentName:"ul"},'"Flat Viewer": Web viewer for structured CSV and JSON data on GitHub')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"A GitHub account is required. At the time of writing (2022 August 29), free\nGitHub accounts have no Actions usage limits for public repositories."),(0,o.kt)("p",{parentName:"admonition"},"Using private GitHub repositories is not recommended because the Flat Viewer\ncannot access private repositories.")),(0,o.kt)("h3",{id:"data-source"},"Data Source"),(0,o.kt)("p",null,"Any publicly available spreadsheet can be a valid data source. The process will\nfetch the data on specified intervals or events."),(0,o.kt)("p",null,"This demo endpoint ",(0,o.kt)("a",{parentName:"p",href:"https://livesheet.deno.dev/"},"https://livesheet.deno.dev/")," generates XLSX files."),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Server Details")," (click to show)"),(0,o.kt)("p",null,"This demo is hosted on Deno Deploy."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// @deno-types="https://cdn.sheetjs.com/xlsx-latest/package/types/index.d.ts"\nimport { utils, writeXLSX } from \'https://cdn.sheetjs.com/xlsx-latest/package/xlsx.mjs\';\n\nimport * as Drash from "https://deno.land/x/drash@v2.5.4/mod.ts";\n\nconst rand = (x:number, n = 10): number => ((x + n * (Math.random() - 0.5) + 10)|0)%10;\n\nclass HomeResource extends Drash.Resource {\n  public paths = ["/"];\n\n  // see https://github.com/drashland/drash/issues/194\n  public OPTIONS(request: Drash.Request, response: Drash.Response) {\n    const allHttpMethods: string[] = [ "GET", "POST", "PUT", "DELETE" ];\n    response.headers.set("Allow", allHttpMethods.join()); // Use this\n    response.headers.set("Access-Control-Allow-Methods", allHttpMethods.join()); // or this\n    response.headers.set("access-control-allow-origin", "*");\n    response.status_code = 204;\n    return response;\n  }\n\n  public GET(request: Drash.Request, response: Drash.Response): void {\n    // create a workbook with some random data\n    let data: any[][] = [ "ABCDEFG".split("") ];\n    for(let i = 0; i < 10; ++i) data = data.concat([\n      [5,4,3,3,7,9,5].map(v => rand(v)),\n      [5,4,3,3,7,9,5].map(v => rand(v, 8)),\n      [5,4,3,3,7,9,5].map(v => rand(v, 6)),\n      [5,4,3,3,7,9,5].map(v => rand(v, 4)),\n      [5,4,3,3,7,9,5].map(v => rand(v, 2)),\n      [5,4,3,3,7,9,5].map(v => rand(v, 0))\n    ]);\n    const ws = utils.aoa_to_sheet(data);\n    const wb = utils.book_new(); utils.book_append_sheet(wb, ws, "data");\n    // write the workbook to XLSX as a Uint8Array\n    const file = writeXLSX(wb, { type: "buffer"});\n    // set headers\n    response.headers.set("Content-Disposition", \'attachment; filename="LiveSheet.xlsx"\');\n    // send data\n    return response.send("application/vnd.ms-excel", file);\n  }\n}\n\n// Create and run your server\nconst server = new Drash.Server({\n  hostname: "",\n  port: 3000,\n  protocol: "http",\n  resources: [ HomeResource ],\n});\n\nserver.run();\n\nconsole.log(`Server running at ${server.address}.`);\n'))),(0,o.kt)("h3",{id:"action"},"Action"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"githubocto/flat")," action can be added as a step in a workflow:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"      - name: Fetch data\n        uses: githubocto/flat@v3\n        with:\n          http_url: https://livesheet.deno.dev/\n          downloaded_filename: data.xlsx\n          postprocess: ./postprocess.ts\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"http_url")," will be fetched and saved to ",(0,o.kt)("inlineCode",{parentName:"p"},"downloaded_filename")," in the repo.\nThis can be approximated with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl -L -o data.xlsx https://livesheet.deno.dev/\n")),(0,o.kt)("p",null,"After saving, the ",(0,o.kt)("inlineCode",{parentName:"p"},"postprocess")," script will be run. When a ",(0,o.kt)("inlineCode",{parentName:"p"},".ts")," file is the\nscript, it will run the script in the Deno runtime. The ",(0,o.kt)("inlineCode",{parentName:"p"},"postprocess")," script is\nexpected to read the downloaded file and create or overwrite files in the repo.\nThis can be approximated with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"deno run -A ./postprocess.ts data.xlsx\n")),(0,o.kt)("p",null,"The action will then compare the contents of the repo, creating a new commit if\nthe source data or artifacts from the ",(0,o.kt)("inlineCode",{parentName:"p"},"postprocess")," script changed."),(0,o.kt)("h3",{id:"post-processing-data"},"Post-Processing Data"),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"flat-postprocessing")," library includes a number of utilities for different\ndata formats.  The ",(0,o.kt)("inlineCode",{parentName:"p"},"readXLSX")," helper uses SheetJS under the hood."),(0,o.kt)("p",{parentName:"admonition"},"The library uses an older version of the SheetJS library. To use the latest\nreleases, the examples import from the SheetJS CDN:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// @deno-types=\"https://cdn.sheetjs.com/xlsx-latest/package/types/index.d.ts\"\nimport * as XLSX from 'https://cdn.sheetjs.com/xlsx-latest/package/xlsx.mjs';\n"))),(0,o.kt)("h4",{id:"post-process-script"},"Post-Process Script"),(0,o.kt)("p",null,"The first argument to the post-processing script is the filename.  The file can\nbe read with ",(0,o.kt)("inlineCode",{parentName:"p"},"XLSX.readFile")," directly.  On the export side, ",(0,o.kt)("inlineCode",{parentName:"p"},"writeCSV")," from the\n",(0,o.kt)("inlineCode",{parentName:"p"},"flat")," library can write data generated from ",(0,o.kt)("inlineCode",{parentName:"p"},"XLSX.utils.sheet_to_csv"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="postprocess.ts"',title:'"postprocess.ts"'},'import { writeCSV } from "https://deno.land/x/flat/mod.ts";\n// @deno-types="https://cdn.sheetjs.com/xlsx-latest/package/types/index.d.ts"\nimport * as XLSX from \'https://cdn.sheetjs.com/xlsx-latest/package/xlsx.mjs\';\n/* load the codepage support library for extended support with older formats  */\nimport * as cptable from \'https://cdn.sheetjs.com/xlsx-latest/package/dist/cpexcel.full.mjs\';\nXLSX.set_cptable(cptable);\n\n/* get the file path for the downloaded file and generate the CSV path */\nconst in_file = Deno.args[0];\nconst out_file = in_file.replace(/.xlsx$/, ".csv");\n\n/* read file */\n// highlight-next-line\nconst workbook = XLSX.readFile(in_file);\n\n/* generate CSV from first worksheet */\nconst first_sheet = workbook.Sheets[workbook.SheetNames[0]];\n// highlight-next-line\nconst csv = XLSX.utils.sheet_to_csv(first_sheet);\n\n/* write CSV */\n// highlight-next-line\nawait writeCSV(out_file, csv);\n')),(0,o.kt)("h2",{id:"complete-example"},"Complete Example"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"This was tested on 2022 August 29 using the GitHub UI.")),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Complete Example")," (click to show)"),(0,o.kt)("p",null,"0) Create a free GitHub account or sign into the GitHub web interface."),(0,o.kt)("p",null,'1) Create a new repository (click the "+" icon in the upper-right corner).'),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"When prompted, enter a repository name of your choosing."),(0,o.kt)("li",{parentName:"ul"},'Ensure "Public" is selected'),(0,o.kt)("li",{parentName:"ul"},'Check "Add a README file"'),(0,o.kt)("li",{parentName:"ul"},'Click "Create repository" at the bottom.')),(0,o.kt)("p",null,"You will be redirected to the new project."),(0,o.kt)("p",null,'2) In the browser URL bar, change "github.com" to "github.dev". For example, if\nthe URL was originally ',(0,o.kt)("inlineCode",{parentName:"p"},"https://github.com/SheetJS/flat-sheet")," , the new URL\nshould be ",(0,o.kt)("inlineCode",{parentName:"p"},"https://github.dev/SheetJS/flat-sheet")," . Press Enter."),(0,o.kt)("p",null,'3) In the left "EXPLORER" panel, double-click just below README.md.  A text box\nwill appear just above README.  Type ',(0,o.kt)("inlineCode",{parentName:"p"},"postprocess.ts")," and press Enter."),(0,o.kt)("p",null,"   The main panel will show a ",(0,o.kt)("inlineCode",{parentName:"p"},"postprocess.ts")," tab.  Copy the following code to\nthe main editor window:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="postprocess.ts"',title:'"postprocess.ts"'},'import { writeCSV } from "https://deno.land/x/flat/mod.ts";\n// @deno-types="https://cdn.sheetjs.com/xlsx-latest/package/types/index.d.ts"\nimport * as XLSX from \'https://cdn.sheetjs.com/xlsx-latest/package/xlsx.mjs\';\n/* load the codepage support library for extended support with older formats  */\nimport * as cptable from \'https://cdn.sheetjs.com/xlsx-latest/package/dist/cpexcel.full.mjs\';\nXLSX.set_cptable(cptable);\n\n/* get the file path for the downloaded file and generate the CSV path */\nconst in_file = Deno.args[0];\nconst out_file = in_file.replace(/.xlsx$/, ".csv");\n\n/* read file */\nconst workbook = XLSX.readFile(in_file);\n\n/* generate CSV */\nconst first_sheet = workbook.Sheets[workbook.SheetNames[0]];\nconst csv = XLSX.utils.sheet_to_csv(first_sheet);\n\n/* write CSV */\nawait writeCSV(out_file, csv);\n')),(0,o.kt)("p",null,'4) In the left "EXPLORER" panel, double-click just below README.md.  A text box\nwill appear.  Type ',(0,o.kt)("inlineCode",{parentName:"p"},".github/workflows/data.yaml")," and press Enter."),(0,o.kt)("p",null,"   Copy the following code into the main area.  It will create an action that\nruns roughly once an hour:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".github/workflows/data.yaml"',title:'".github/workflows/data.yaml"'},"name: flatsheet\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 * * * *'\n\njobs:\n  scheduled:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Setup deno\n        uses: denoland/setup-deno@main\n        with:\n          deno-version: v1.x\n      - name: Check out repo\n        uses: actions/checkout@v2\n      - name: Fetch data\n        uses: githubocto/flat@v3\n        with:\n          http_url: https://livesheet.deno.dev/\n          downloaded_filename: data.xlsx\n          postprocess: ./postprocess.ts\n")),(0,o.kt)("p",null,"5) Click on the source control icon (a little blue circle with the number 2).\nIn the left panel, select Message box, type ",(0,o.kt)("inlineCode",{parentName:"p"},"init")," and press ",(0,o.kt)("inlineCode",{parentName:"p"},"Ctrl+Enter")," on\nWindows (",(0,o.kt)("inlineCode",{parentName:"p"},"Command+Enter")," on Mac)."),(0,o.kt)("p",null,"6) Click the ",(0,o.kt)("inlineCode",{parentName:"p"},"\u2630"),' icon and click "Go to Repository" to return to the repo page.'),(0,o.kt)("p",null,'7) Click "Actions" to see the workflows. In the left column, click ',(0,o.kt)("inlineCode",{parentName:"p"},"flatsheet"),"."),(0,o.kt)("p",null,"   This is the page for the action.  Every time the action is run, a new entry\nwill be added to the list."),(0,o.kt)("p",null,'   Click "Run workflow", then click the "Run workflow" button in the popup.\nThis will start a new run.  After about 30 seconds, a new row should show up\nin the main area.  The icon should be a white ',(0,o.kt)("inlineCode",{parentName:"p"},"\u2713")," in a green circle."),(0,o.kt)("p",null,'8) Click "Code" to return to the main view.  It should have a file listing that\nincludes ',(0,o.kt)("inlineCode",{parentName:"p"},"data.xlsx")," (downloaded file) and ",(0,o.kt)("inlineCode",{parentName:"p"},"data.csv")," (generated data)"),(0,o.kt)("p",null,'   Now repeat step 7 to run the action a second time.  Click "Code" again.'),(0,o.kt)("p",null,'9) Go to the URL bar and change "github.com" to "flatgithub.com".  For example,\nif the URL was originally ',(0,o.kt)("inlineCode",{parentName:"p"},"https://github.com/SheetJS/flat-sheet")," , the new\nURL should be ",(0,o.kt)("inlineCode",{parentName:"p"},"https://flatgithub.com/SheetJS/flat-sheet")," . Press Enter."),(0,o.kt)("p",null,'   You will see the "Flat Viewer".  In the top bar, the "Commit" option allows\nfor switching to an older version of the data.'),(0,o.kt)("p",null,"   The update process will run once an hour.  If you return in a few hours and\nrefresh the page, there should be more commits in the selection list.")))}d.isMDXComponent=!0}}]);