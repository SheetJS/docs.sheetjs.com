"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6083],{9613:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=s(n),u=a,b=m["".concat(p,".").concat(u)]||m[u]||c[u]||o;return n?r.createElement(b,l(l({ref:t},d),{},{components:n})):r.createElement(b,l({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7111:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c}});var r=n(2848),a=n(9213),o=(n(9496),n(9613)),l=["components"],i={sidebar_position:6},p="Clipboard Data",s={unversionedId:"getting-started/demos/clipboard",id:"getting-started/demos/clipboard",title:"Clipboard Data",description:"Spreadsheet software like Excel typically support copying and pasting cells and",source:"@site/docs/04-getting-started/03-demos/06-clipboard.md",sourceDirName:"04-getting-started/03-demos",slug:"/getting-started/demos/clipboard",permalink:"/docs/getting-started/demos/clipboard",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Salesforce LWC",permalink:"/docs/getting-started/demos/salesforce"},next:{title:"Headless Automation",permalink:"/docs/getting-started/demos/headless"}},d={},c=[{value:"Browser Reading (paste)",id:"browser-reading-paste",level:2},{value:"Live Demo",id:"live-demo",level:3},{value:"Browser Writing (copy)",id:"browser-writing-copy",level:2},{value:"Live Demo",id:"live-demo-1",level:3}],m={toc:c};function u(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"clipboard-data"},"Clipboard Data"),(0,o.kt)("p",null,'Spreadsheet software like Excel typically support copying and pasting cells and\ndata. This is implemented through the Clipboard ("Pasteboard" in OSX parlance).'),(0,o.kt)("p",null,"When copying a selection of cells, Excel for Windows stores a screenshot of the\nselected cells as an image.  It also creates and stores a number of strings and\nfiles for the various formats, including TSV, CSV, HTML, RTF, SYLK, DIF, XLSB,\nXLS (both '97-2004 and '95), and SpreadsheetML 2003."),(0,o.kt)("p",null,"Not all Clipboard APIs offer access to all clipboard types."),(0,o.kt)("h2",{id:"browser-reading-paste"},"Browser Reading (paste)"),(0,o.kt)("p",null,"Clipboard data can be read from a ",(0,o.kt)("inlineCode",{parentName:"p"},"paste")," event, accessible from the event\n",(0,o.kt)("inlineCode",{parentName:"p"},"clipboardData")," property:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"document.onpaste = function(e) {\n  /* get TSV */\n  var str = e.clipboardData.getData('text/html');\n  /* parse */\n  var wb = XLSX.read(str, {type: \"string\"});\n  /* DO SOMETHING WITH wb HERE */\n};\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"getData")," accepts one argument: the desired MIME type. Chrome 103 supports:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"MIME type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Data format"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"text/plain")),(0,o.kt)("td",{parentName:"tr",align:"left"},"TSV (tab separated values)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"text/html")),(0,o.kt)("td",{parentName:"tr",align:"left"},"HTML")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"text/rtf")),(0,o.kt)("td",{parentName:"tr",align:"left"},"RTF (rich text format)")))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"getData")," returns a string compatible with the ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," type for ",(0,o.kt)("inlineCode",{parentName:"p"},"XLSX.read"),"."),(0,o.kt)("h3",{id:"live-demo"},"Live Demo"),(0,o.kt)("p",null,'Open a file in Excel, copy some cells, then come back to this window.  Click on\n"RESULT" below and paste (Control+V for Windows, Command+V for Mac).'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function Clipboard() {\n  const [csvs, setCSVs] = React.useState([ "", "", "" ]);\n\n  /* Set up paste handler */\n  React.useEffect(async() => {\n    document.onpaste = function(e) {\n      /* this demo will read 3 different clipboard data types */\n      var mime_arr = [ \'text/plain\', \'text/html\', \'text/rtf\' ];\n      /* get clipboard data for each type */\n      var data_arr = mime_arr.map(mime => e.clipboardData.getData(mime));\n      /* parse each data string into a workbook */\n      var wb_arr = data_arr.map(str => XLSX.read(str, {type: "string"}));\n      /* get first worksheet from each workbook */\n      var ws_arr = wb_arr.map(wb => wb.Sheets[wb.SheetNames[0]]);\n      /* generate CSV for each "first worksheet" */\n      var result = ws_arr.map(ws => XLSX.utils.sheet_to_csv(ws));\n      setCSVs(result);\n    };\n  }, []);\n\n  return (\n    <>\n      {csvs[0] && (<pre><b>Data from clipboard TSV  (text/plain)</b><br/>{csvs[0]}</pre>)}\n      {csvs[1] && (<pre><b>Data from clipboard HTML (text/html)</b><br/>{csvs[1]}</pre>)}\n      {csvs[2] && (<pre><b>Data from clipboard RTF  (text/rtf)</b><br/>{csvs[2]}</pre>)}\n      {csvs.every(x => !x) && <b>Copy data in Excel, click here, and paste (Control+V)</b>}\n    </>\n  );\n}\n')),(0,o.kt)("h2",{id:"browser-writing-copy"},"Browser Writing (copy)"),(0,o.kt)("p",null,"Clipboard data can be written from a ",(0,o.kt)("inlineCode",{parentName:"p"},"copy")," event, accessible from the event\n",(0,o.kt)("inlineCode",{parentName:"p"},"clipboardData")," property:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'document.oncopy = function(e) {\n  /* get HTML of first worksheet in workbook */\n  var str = XLSX.write(wb, {type: "string", bookType: "html"});\n  /* set HTML clipboard data */\n  e.clipboardData.setData(\'text/html\', str);\n\n  /* prevent the browser from copying the normal data */\n  e.preventDefault();\n};\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"setData")," accepts two arguments: MIME type and new data. Chrome 103 supports:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"MIME type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Data format"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"text/plain")),(0,o.kt)("td",{parentName:"tr",align:"left"},"TSV (tab separated values)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"text/html")),(0,o.kt)("td",{parentName:"tr",align:"left"},"HTML")))),(0,o.kt)("p",null,"Browsers do not currently support assigning to the ",(0,o.kt)("inlineCode",{parentName:"p"},"text/rtf")," clipboard type."),(0,o.kt)("h3",{id:"live-demo-1"},"Live Demo"),(0,o.kt)("p",null,"This demo creates a simple workbook from the following HTML table:"),(0,o.kt)("table",{id:"srcdata"},(0,o.kt)("tr",null,(0,o.kt)("td",null,"SheetJS"),(0,o.kt)("td",null,"Clipboard"),(0,o.kt)("td",null,"Demo")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"bookType"),(0,o.kt)("td",null,"RTF")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"source"),(0,o.kt)("td",null,"HTML Table"))),(0,o.kt)("p",null,"Create a new file in Excel then come back to this window.  Select the text\nbelow and copy (Control+C for Windows, Command+C for Mac).  Go back to the\nexcel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function Clipboard() {\n  /* Set up copy handler */\n  React.useEffect(async() => {\n    document.oncopy = function(e) {\n      /* generate workbook from table */\n      var wb = XLSX.utils.table_to_book(document.getElementById("srcdata"));\n      /* get HTML of first worksheet in workbook */\n      var str = XLSX.write(wb, {type: "string", bookType: "html"});\n      /* set HTML clipboard data */\n      e.clipboardData.setData(\'text/html\', str);\n      /* prevent the browser from copying the normal data */\n      e.preventDefault();\n    };\n  }, []);\n\n  return (\n    <b>Select this text, copy (Control+C), and paste in Excel</b>\n  );\n}\n')))}u.isMDXComponent=!0}}]);