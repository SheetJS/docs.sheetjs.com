"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8825],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=s.createContext({}),p=function(e){var t=s.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return s.createElement(i.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},u=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,c=u["".concat(i,".").concat(m)]||u[m]||h[m]||a;return n?s.createElement(c,l(l({ref:t},d),{},{components:n})):s.createElement(c,l({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=u;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<a;p++)l[p]=n[p];return s.createElement.apply(null,l)}return s.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1874:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var s=n(7462),r=(n(7294),n(3905));const a={title:"HTTP Server Processing"},l=void 0,o={unversionedId:"demos/server",id:"demos/server",title:"HTTP Server Processing",description:"Server-Side JS platforms like NodeJS and Deno have built-in APIs for listening",source:"@site/docs/03-demos/35-server.md",sourceDirName:"03-demos",slug:"/demos/server",permalink:"/docs/demos/server",draft:!1,tags:[],version:"current",sidebarPosition:35,frontMatter:{title:"HTTP Server Processing"},sidebar:"tutorialSidebar",previous:{title:"HTTP Network Requests",permalink:"/docs/demos/network"},next:{title:"NoSQL Data Stores",permalink:"/docs/demos/nosql"}},i={},p=[{value:"Overview",id:"overview",level:2},{value:"Reading Data",id:"reading-data",level:4},{value:"Writing Data",id:"writing-data",level:4},{value:"Deno",id:"deno",level:2},{value:"Drash",id:"drash",level:3},{value:"NodeJS",id:"nodejs",level:2},{value:"Express",id:"express",level:3},{value:"NestJS",id:"nestjs",level:3},{value:"Fastify",id:"fastify",level:3}],d={toc:p};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,s.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Server-Side JS platforms like NodeJS and Deno have built-in APIs for listening\non network interfaces.  They provide wrappers for requests and responses."),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("h4",{id:"reading-data"},"Reading Data"),(0,r.kt)("p",null,"Typically servers receive form data with content type ",(0,r.kt)("inlineCode",{parentName:"p"},"multipart/form-data")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"application/x-www-form-urlencoded"),'. The platforms themselves typically do not\nprovide "body parsing" functions, instead leaning on the community to supply\nmodules to take the encoded data and split into form fields and files.'),(0,r.kt)("p",null,"NodeJS servers typically use a parser like ",(0,r.kt)("inlineCode",{parentName:"p"},"formidable"),". In the example below,\n",(0,r.kt)("inlineCode",{parentName:"p"},"formidable")," will write to file and ",(0,r.kt)("inlineCode",{parentName:"p"},"XLSX.readFile")," will read the file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'var XLSX = require("xlsx"); // This is using the CommonJS build\nvar formidable = require("formidable");\n\nrequire("http").createServer(function(req, res) {\n  if(req.method !== "POST") return res.end("");\n\n  /* parse body and implement logic in callback */\n  // highlight-next-line\n  (new formidable.IncomingForm()).parse(req, function(err, fields, files) {\n    /* if successful, files is an object whose keys are param names */\n    // highlight-next-line\n    var file = files["upload"]; // <input type="file" id="upload" name="upload">\n    /* file.path is a location in the filesystem, usually in a temp folder */\n    // highlight-next-line\n    var wb = XLSX.readFile(file.filepath);\n    // print the first worksheet back as a CSV\n    res.end(XLSX.utils.sheet_to_csv(wb.Sheets[wb.SheetNames[0]]));\n  });\n}).listen(process.env.PORT || 3000);\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"XLSX.read")," will accept NodeJS buffers as well as ",(0,r.kt)("inlineCode",{parentName:"p"},"Uint8Array"),", Base64 strings,\nbinary strings, and plain Arrays of bytes.  This covers the interface types of\na wide variety of frameworks."),(0,r.kt)("h4",{id:"writing-data"},"Writing Data"),(0,r.kt)("p",null,"Typically server libraries use a response API that accepts ",(0,r.kt)("inlineCode",{parentName:"p"},"Uint8Array")," data.\n",(0,r.kt)("inlineCode",{parentName:"p"},"XLSX.write")," with the option ",(0,r.kt)("inlineCode",{parentName:"p"},'type: "buffer"')," will generate data.  To force the\nresponse to be treated as an attachment, set the ",(0,r.kt)("inlineCode",{parentName:"p"},"Content-Disposition")," header:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'var XLSX = require("xlsx"); // This is using the CommonJS build\n\nrequire("http").createServer(function(req, res) {\n  if(req.method !== "GET") return res.end("");\n  var wb = XLSX.read("S,h,e,e,t,J,S\\n5,4,3,3,7,9,5", {type: "binary"});\n  // highlight-start\n  res.setHeader(\'Content-Disposition\', \'attachment; filename="SheetJS.xlsx"\');\n  res.end(XLSX.write(wb, {type:"buffer", bookType: "xlsx"}));\n  // highlight-end\n}).listen(process.env.PORT || 3000);\n')),(0,r.kt)("h2",{id:"deno"},"Deno"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Many hosted services like Deno Deploy do not offer filesystem access."),(0,r.kt)("p",{parentName:"admonition"},"This breaks web frameworks that use the filesystem in body parsing.")),(0,r.kt)("p",null,"Deno provides the basic elements to implement a server.  It does not provide a\nbody parser out of the box."),(0,r.kt)("h3",{id:"drash"},"Drash"),(0,r.kt)("p",null,"In testing, ",(0,r.kt)("a",{parentName:"p",href:"https://drash.land/drash/"},"Drash")," had an in-memory body parser\nwhich could handle file uploads on hosted services like Deno Deploy."),(0,r.kt)("p",null,"The service ",(0,r.kt)("a",{parentName:"p",href:"https://s2c.sheetjs.com"},"https://s2c.sheetjs.com")," is hosted on Deno Deploy using Drash!"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Reading Data")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Request#bodyParam")," reads body parameters.  For uploaded files, the ",(0,r.kt)("inlineCode",{parentName:"p"},"content"),"\nproperty is a ",(0,r.kt)("inlineCode",{parentName:"p"},"Uint8Array"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// @deno-types="https://cdn.sheetjs.com/xlsx-latest/package/types/index.d.ts"\nimport { read, utils } from \'https://cdn.sheetjs.com/xlsx-latest/package/xlsx.mjs\';\n\nimport * as Drash from "https://deno.land/x/drash@v2.5.4/mod.ts";\n\nclass ParseResource extends Drash.Resource {\n  public paths = ["/"];\n\n  public POST(request: Drash.Request, response: Drash.Response) {\n    // assume a form upload like <input type="file" id="upload" name="upload">\n    // highlight-next-line\n    const file = request.bodyParam<Drash.Types.BodyFile>("upload");\n    if (!file) throw new Error("File is required!");\n    // highlight-next-line\n    var wb = read(file.content, {type: "buffer"});\n    return response.html( utils.sheet_to_html(wb.Sheets[wb.SheetNames[0]]));\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Writing Data")),(0,r.kt)("p",null,"Headers are manually set with ",(0,r.kt)("inlineCode",{parentName:"p"},"Response#headers.set")," while the raw body is set\nwith ",(0,r.kt)("inlineCode",{parentName:"p"},"Response#send"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// @deno-types="https://cdn.sheetjs.com/xlsx-latest/package/types/index.d.ts"\nimport { read, utils } from \'https://cdn.sheetjs.com/xlsx-latest/package/xlsx.mjs\';\n\nimport * as Drash from "https://deno.land/x/drash@v2.5.4/mod.ts";\n\nclass WriteResource extends Drash.Resource {\n  public paths = ["/export"];\n\n  public GET(request: Drash.Request, response: Drash.Response): void {\n    // create some fixed workbook\n    const data = ["SheetJS".split(""), [5,4,3,3,7,9,5]];\n    const ws = utils.aoa_to_sheet(data);\n    const wb = utils.book_new(); utils.book_append_sheet(wb, ws, "data");\n    // write the workbook to XLSX as a Uint8Array\n    // highlight-next-line\n    const file = write(wb, { bookType: "xlsx", type: "buffer"});\n    // set headers\n    response.headers.set("Content-Disposition", \'attachment; filename="SheetJSDrash.xlsx"\');\n    // send data\n    // highlight-next-line\n    return response.send("application/vnd.ms-excel", file);\n  }\n}\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Complete Example")," (click to show)"),(0,r.kt)("p",null,"1) Save the following script to ",(0,r.kt)("inlineCode",{parentName:"p"},"SheetJSDrash.ts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="SheetJSDrash.ts"',title:'"SheetJSDrash.ts"'},'/*! sheetjs (C) 2013-present SheetJS -- http://sheetjs.com */\n// @deno-types="https://cdn.sheetjs.com/xlsx-latest/package/types/index.d.ts"\nimport { read, utils, set_cptable } from \'https://cdn.sheetjs.com/xlsx-latest/package/xlsx.mjs\';\nimport * as cptable from \'https://cdn.sheetjs.com/xlsx-latest/package/dist/cpexcel.full.mjs\';\nset_cptable(cptable);\n\nimport * as Drash from "https://deno.land/x/drash@v2.5.4/mod.ts";\n\nclass ParseResource extends Drash.Resource {\n  public paths = ["/"];\n\n  public POST(request: Drash.Request, response: Drash.Response) {\n    const file = request.bodyParam<Drash.Types.BodyFile>("file");\n    if (!file) throw new Error("File is required!");\n    var wb = read(file.content, {type: "buffer"});\n    return response.html( utils.sheet_to_html(wb.Sheets[wb.SheetNames[0]]));\n  }\n\n  public GET(request: Drash.Request, response: Drash.Response): void {\n    return response.html(`\\\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>SheetJS Spreadsheet to HTML Conversion Service</title>\n    <meta charset="utf-8" />\n  </head>\n  <body>\n<pre><h3><a href="//sheetjs.com/">SheetJS</a> Spreadsheet Conversion Service</h3>\n<b>API</b>\n\nSend a POST request to https://s2c.sheetjs.com/ with the file in the "file" body parameter:\n\n$ curl -X POST -F"file=@test.xlsx" https://s2c.sheetjs.com/\n\nThe response will be an HTML TABLE generated from the first worksheet.\n\n<b>Try it out!</b><form action="/" method="post" enctype="multipart/form-data">\n\n<input type="file" name="file" />\n\nUse the file input element to select a file, then click "Submit"\n\n<button type="submit">Submit</button>\n</form>\n</pre>\n  </body>\n</html>`,\n    );\n  }\n}\n\nconst server = new Drash.Server({\n  hostname: "",\n  port: 3000,\n  protocol: "http",\n  resources: [ ParseResource ],\n});\n\nserver.run();\n\nconsole.log(`Server running at ${server.address}.`);\n')),(0,r.kt)("p",null,"2) Run the server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"deno run --allow-net SheetJSDrash.ts\n")),(0,r.kt)("p",null,"3) Download the test file ",(0,r.kt)("a",{parentName:"p",href:"https://sheetjs.com/pres.numbers"},"https://sheetjs.com/pres.numbers")),(0,r.kt)("p",null,"4) Open http://localhost:3000/ in your browser."),(0,r.kt)("p",null,'Click "Choose File" and select ',(0,r.kt)("inlineCode",{parentName:"p"},"pres.numbers"),'.  Then click "Submit"'),(0,r.kt)("p",null,"The page should show the contents of the file as an HTML table.")),(0,r.kt)("h2",{id:"nodejs"},"NodeJS"),(0,r.kt)("h3",{id:"express"},"Express"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"express-formidable")," middleware is powered by the ",(0,r.kt)("inlineCode",{parentName:"p"},"formidable")," parser.  It\nadds a ",(0,r.kt)("inlineCode",{parentName:"p"},"files")," property to the request."),(0,r.kt)("p",null,"When downloading binary data, Express handles ",(0,r.kt)("inlineCode",{parentName:"p"},"Buffer")," data in ",(0,r.kt)("inlineCode",{parentName:"p"},"res.end"),".  The\nconvenience ",(0,r.kt)("inlineCode",{parentName:"p"},"attachment")," method adds the required header:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// Header \'Content-Disposition: attachment; filename="SheetJS.xlsx"\'\nres.attachment("SheetJS.xlsx");\n')),(0,r.kt)("p",null,"The following demo Express server will respond to POST requests to ",(0,r.kt)("inlineCode",{parentName:"p"},"/upload"),"\nwith a CSV output of the first sheet.  It will also respond to GET requests to\n",(0,r.kt)("inlineCode",{parentName:"p"},"/download"),", responding with a fixed XLSX worksheet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="SheetJSExpressCSV.js"',title:'"SheetJSExpressCSV.js"'},'var XLSX = require(\'xlsx\'), express = require(\'express\');\n\n/* create app */\nvar app = express();\n/* add express-formidable middleware */\n// highlight-next-line\napp.use(require(\'express-formidable\')());\n/* route for handling uploaded data */\napp.post(\'/upload\', function(req, res) {\n  // highlight-start\n  var f = req.files["upload"]; // <input type="file" id="upload" name="upload">\n  var wb = XLSX.readFile(f.path);\n  // highlight-end\n  /* respond with CSV data from the first sheet */\n  res.status(200).end(XLSX.utils.sheet_to_csv(wb.Sheets[wb.SheetNames[0]]));\n});\napp.get(\'/download\', function(req, res) {\n  /* generate workbook object */\n  var ws = XLSX.utils.aoa_to_sheet(["SheetJS".split(""), [5,4,3,3,7,9,5]]);\n  var wb = XLSX.utils.book_new(); XLSX.utils.book_append_sheet(wb, ws, "Data");\n  // highlight-start\n  /* generate buffer */\n  var buf = XLSX.write(wb, {type: "buffer", bookType: "xlsx"});\n  /* set headers */\n  res.attachment("SheetJSExpress.xlsx");\n  /* respond with file data */\n  res.status(200).end(buf);\n  // highlight-end\n});\napp.listen(+process.env.PORT||3000);\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Testing")," (click to show)"),(0,r.kt)("p",null,"0) Save the code sample to ",(0,r.kt)("inlineCode",{parentName:"p"},"SheetJSExpressCSV.js")),(0,r.kt)("p",null,"1) Install dependencies:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz express express-formidable\n")),(0,r.kt)("p",null,"2) Start server (note: it will not print anything to console when running)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"node SheetJSExpressCSV.js\n")),(0,r.kt)("p",null,"3) Test POST requests using ",(0,r.kt)("a",{parentName:"p",href:"https://sheetjs.com/pres.numbers"},"https://sheetjs.com/pres.numbers"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -LO https://sheetjs.com/pres.numbers\ncurl -X POST -F upload=@pres.numbers http://localhost:3000/upload\n")),(0,r.kt)("p",null,"The response should show the data in CSV rows."),(0,r.kt)("p",null,"4) Test GET requests by opening http://localhost:3000/download in your browser."),(0,r.kt)("p",null,"It should prompt to download ",(0,r.kt)("inlineCode",{parentName:"p"},"SheetJSExpress.xlsx"))),(0,r.kt)("h3",{id:"nestjs"},"NestJS"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/techniques/file-upload"},"The NestJS docs")," have detailed\ninstructions for file upload support. In the controller, the ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," property\nworks with ",(0,r.kt)("inlineCode",{parentName:"p"},"XLSX.readFile"),"."),(0,r.kt)("p",null,"When downloading binary data, NestJS expects ",(0,r.kt)("inlineCode",{parentName:"p"},"StreamableFile"),"-wrapped Buffers."),(0,r.kt)("p",null,"The following demo NestJS Controller will respond to POST requests to ",(0,r.kt)("inlineCode",{parentName:"p"},"/upload"),"\nwith a CSV output of the first sheet.  It will also respond to GET requests to\n",(0,r.kt)("inlineCode",{parentName:"p"},"/download"),", responding with a fixed export:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/sheetjs/sheetjs.controller.js"',title:'"src/sheetjs/sheetjs.controller.js"'},"import { Controller, Get, Header, Post, StreamableFile, UploadedFile, UseInterceptors } from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { readFile, utils } from 'xlsx';\n\n@Controller('sheetjs')\nexport class SheetjsController {\n  @Post('upload') //  <input type=\"file\" id=\"upload\" name=\"upload\">\n  @UseInterceptors(FileInterceptor('upload'))\n  async uploadXlsxFile(@UploadedFile() file: Express.Multer.File) {\n    /* file.path is a path to the workbook */\n    // highlight-next-line\n    const wb = readFile(file.path);\n    /* generate CSV of first worksheet */\n    return utils.sheet_to_csv(wb.Sheets[wb.SheetNames[0]]);\n  }\n\n  @Get('download')\n  @Header('Content-Disposition', 'attachment; filename=\"SheetJSNest.xlsx\"')\n  async downloadXlsxFile(): Promise<StreamableFile> {\n    var ws = utils.aoa_to_sheet([\"SheetJS\".split(\"\"), [5,4,3,3,7,9,5]]);\n    var wb = utils.book_new(); utils.book_append_sheet(wb, ws, \"Data\");\n    // highlight-start\n    /* generate buffer */\n    var buf = write(wb, {type: \"buffer\", bookType: \"xlsx\"});\n    /* Return a streamable file */\n    return new StreamableFile(buf);\n    // highlight-end\n  }\n}\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Testing")," (click to show)"),(0,r.kt)("p",null,"1) Create a new project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx @nestjs/cli new -p npm sheetjs-nest\ncd sheetjs-nest\nnpm i --save https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz\nnpm i --save-dev @types/multer\nmkdir -p upload\n")),(0,r.kt)("p",null,"2) Create a new controller and a new module:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx @nestjs/cli generate module sheetjs\nnpx @nestjs/cli generate controller sheetjs\n")),(0,r.kt)("p",null,"3) Add ",(0,r.kt)("inlineCode",{parentName:"p"},"multer")," to the new module by editing ",(0,r.kt)("inlineCode",{parentName:"p"},"src/sheetjs/sheetjs.module.ts"),".\nChanges are highlighted below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/sheetjs/sheetjs.module.ts"',title:'"src/sheetjs/sheetjs.module.ts"'},"import { Module } from '@nestjs/common';\nimport { SheetjsController } from './sheetjs.controller';\n// highlight-next-line\nimport { MulterModule } from '@nestjs/platform-express';\n\n@Module({\n// highlight-start\n  imports: [\n    MulterModule.register({\n      dest: './upload',\n    }),\n  ],\n// highlight-end\n  controllers: [SheetjsController]\n})\nexport class SheetjsModule {}\n")),(0,r.kt)("p",null,"4) Copy the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/sheetjs/sheetjs.controller.ts")," example from earlier, replacing\nthe contents of the existing file."),(0,r.kt)("p",null,"5) Start the server with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx @nestjs/cli start\n")),(0,r.kt)("p",null,"3) Test POST requests using ",(0,r.kt)("a",{parentName:"p",href:"https://sheetjs.com/pres.numbers"},"https://sheetjs.com/pres.numbers"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -LO https://sheetjs.com/pres.numbers\ncurl -X POST -F upload=@pres.numbers http://localhost:3000/sheetjs/upload\n")),(0,r.kt)("p",null,"The response should show the data in CSV rows."),(0,r.kt)("p",null,"4) Test GET requests by opening http://localhost:3000/sheetjs/download in your browser."),(0,r.kt)("p",null,"It should prompt to download ",(0,r.kt)("inlineCode",{parentName:"p"},"SheetJSNest.xlsx"))),(0,r.kt)("h3",{id:"fastify"},"Fastify"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This demo was verified on 2022 August 24 using ",(0,r.kt)("inlineCode",{parentName:"p"},"fastify@4.5.2"))),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Reading Data")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@fastify/multipart"),", which uses ",(0,r.kt)("inlineCode",{parentName:"p"},"busbuy")," under the hood, can be registered:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/* load SheetJS Library */\nconst XLSX = require(\"xlsx\");\n/* load fastify and enable body parsing */\nconst fastify = require('fastify')({logger: true});\n// highlight-next-line\nfastify.register(require('@fastify/multipart'), { attachFieldsToBody: true });\n")),(0,r.kt)("p",null,"Once registered with the option ",(0,r.kt)("inlineCode",{parentName:"p"},"attachFieldsToBody"),", route handlers can use\n",(0,r.kt)("inlineCode",{parentName:"p"},"req.body")," directly:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/* POST / reads submitted file and exports to requested format */\nfastify.post('/', async(req, reply) => {\n  /* \"file\" is the name of the field in the HTML form*/\n  const file = req.body.upload;\n  /* toBuffer returns a promise that resolves to a Buffer */\n  // highlight-next-line\n  const buf = await file.toBuffer();\n  /* `XLSX.read` can read the Buffer */\n  const wb = XLSX.read(buf);\n  /* reply with a CSV */\n  reply.send(XLSX.utils.sheet_to_csv(wb.Sheets[wb.SheetNames[0]]));\n});\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Out of the box, Fastify will return an error ",(0,r.kt)("inlineCode",{parentName:"p"},"FST_ERR_CTP_BODY_TOO_LARGE")," when\nprocessing large spreadsheets (",(0,r.kt)("inlineCode",{parentName:"p"},"statusCode 413"),").  This is a Fastify issue."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://www.fastify.io/docs/latest/Reference/Server/#bodylimit"},(0,r.kt)("inlineCode",{parentName:"a"},"bodyLimit")),"\nin the docs explains the setting. It can be overridden during server creation:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/* increase request body size limit to 5MB = 5 * 1024 * 1024 bytes */\nconst fastify = require('fastify')({bodyLimit: 5 * 1024 * 1024});\n"))),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Writing Data")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Content-Disposition")," header must be set manually:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/* GET / returns a workbook */\nfastify.get(\'/\', (req, reply) => {\n  /* make a workbook */\n  var wb = XLSX.read("S,h,e,e,t,J,S\\n5,4,3,3,7,9,5", {type: "binary"});\n\n  /* write to Buffer */\n  const buf = XLSX.write(wb, {type:"buffer", bookType: "xlsx"});\n\n  /* set Content-Disposition header and send data */\n  // highlight-next-line\n  reply.header(\'Content-Disposition\', \'attachment; filename="SheetJSFastify.xlsx"\').send(buf);\n});\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Testing")," (click to show)"),(0,r.kt)("p",null,"0) Save the following snippet to ",(0,r.kt)("inlineCode",{parentName:"p"},"SheetJSFastify.js"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/* load SheetJS Library */\nconst XLSX = require("xlsx");\n/* load fastify and enable body parsing */\nconst fastify = require(\'fastify\')({logger: true});\nfastify.register(require(\'@fastify/multipart\'), { attachFieldsToBody: true });\n\n/* GET / returns a workbook */\nfastify.get(\'/\', (req, reply) => {\n  /* make a workbook */\n  var wb = XLSX.read("S,h,e,e,t,J,S\\n5,4,3,3,7,9,5", {type: "binary"});\n\n  /* write to Buffer */\n  const buf = XLSX.write(wb, {type:"buffer", bookType: "xlsx"});\n\n  /* set Content-Disposition header and send data */\n  reply.header(\'Content-Disposition\', \'attachment; filename="SheetJSFastify.xlsx"\').send(buf);\n});\n\n/* POST / reads submitted file and exports to requested format */\nfastify.post(\'/\', async(req, reply) => {\n\n  /* "file" is the name of the field in the HTML form*/\n  const file = req.body.upload;\n\n  /* toBuffer returns a promise that resolves to a Buffer */\n  const wb = XLSX.read(await file.toBuffer());\n\n  /* send back a CSV */\n  reply.send(XLSX.utils.sheet_to_csv(wb.Sheets[wb.SheetNames[0]]));\n});\n\n/* start */\nfastify.listen({port: process.env.PORT || 3000}, (err, addr) => { if(err) throw err; });\n')),(0,r.kt)("p",null,"1) Install dependencies:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz fastify @fastify/multipart\n")),(0,r.kt)("p",null,"2) Start server"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"node SheetJSFastify.js\n")),(0,r.kt)("p",null,"3) Test POST requests using ",(0,r.kt)("a",{parentName:"p",href:"https://sheetjs.com/pres.numbers"},"https://sheetjs.com/pres.numbers"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -LO https://sheetjs.com/pres.numbers\ncurl -X POST -F upload=@pres.numbers http://localhost:3000/\n")),(0,r.kt)("p",null,"The response should show the data in CSV rows."),(0,r.kt)("p",null,"4) Test GET requests by opening http://localhost:3000/ in your browser."),(0,r.kt)("p",null,"It should prompt to download ",(0,r.kt)("inlineCode",{parentName:"p"},"SheetJSFastify.xlsx"))))}h.isMDXComponent=!0}}]);