"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[104],{9613:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return u}});var n=a(9496);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),s=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),k=s(a),u=r,N=k["".concat(d,".").concat(u)]||k[u]||m[u]||l;return a?n.createElement(N,i(i({ref:t},p),{},{components:a})):n.createElement(N,i({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=k;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},5593:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return d},default:function(){return u},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return m}});var n=a(2848),r=a(9213),l=(a(9496),a(9613)),i=["components"],o={sidebar_position:9},d="Utility Functions",s={unversionedId:"api/utilities",id:"api/utilities",title:"Utility Functions",description:"The sheetto* functions accept a worksheet and an optional options object.",source:"@site/docs/08-api/09-utilities.md",sourceDirName:"08-api",slug:"/api/utilities",permalink:"/docs/api/utilities",draft:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Writing Files",permalink:"/docs/api/write-options"},next:{title:"File Formats",permalink:"/docs/miscellany/formats"}},p={},m=[{value:"Array of Arrays Input",id:"array-of-arrays-input",level:3},{value:"Array of Objects Input",id:"array-of-objects-input",level:3},{value:"HTML Table Input",id:"html-table-input",level:3},{value:"Delimiter-Separated Output",id:"delimiter-separated-output",level:3},{value:"HTML Output",id:"html-output",level:3},{value:"Array Output",id:"array-output",level:3},{value:"Formulae Output",id:"formulae-output",level:3}],k={toc:m};function u(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"utility-functions"},"Utility Functions"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"sheet_to_*")," functions accept a worksheet and an optional options object."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"*_to_sheet")," functions accept a data object and an optional options object."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"sheet_add_*")," functions accept worksheet, data, and optional options."),(0,l.kt)("p",null,"The examples are based on the following worksheet:"),(0,l.kt)("table",null,(0,l.kt)("tr",null,(0,l.kt)("td",null,"S"),(0,l.kt)("td",null,"h"),(0,l.kt)("td",null,"e"),(0,l.kt)("td",null,"e"),(0,l.kt)("td",null,"t"),(0,l.kt)("td",null,"J"),(0,l.kt)("td",null,"S")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"1"),(0,l.kt)("td",null,"2"),(0,l.kt)("td",null," "),(0,l.kt)("td",null," "),(0,l.kt)("td",null,"5"),(0,l.kt)("td",null,"6"),(0,l.kt)("td",null,"7")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"2"),(0,l.kt)("td",null,"3"),(0,l.kt)("td",null," "),(0,l.kt)("td",null," "),(0,l.kt)("td",null,"6"),(0,l.kt)("td",null,"7"),(0,l.kt)("td",null,"8")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"3"),(0,l.kt)("td",null,"4"),(0,l.kt)("td",null," "),(0,l.kt)("td",null," "),(0,l.kt)("td",null,"7"),(0,l.kt)("td",null,"8"),(0,l.kt)("td",null,"9")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"4"),(0,l.kt)("td",null,"5"),(0,l.kt)("td",null,"6"),(0,l.kt)("td",null,"7"),(0,l.kt)("td",null,"8"),(0,l.kt)("td",null,"9"),(0,l.kt)("td",null,"0"))),(0,l.kt)("h3",{id:"array-of-arrays-input"},"Array of Arrays Input"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Create a worksheet from an array of arrays")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var ws = XLSX.utils.aoa_to_sheet(aoa, opts);\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.aoa_to_sheet")," takes an array of arrays of JS values and returns a\nworksheet resembling the input data.  Numbers, Booleans and Strings are stored\nas the corresponding styles.  Dates are stored as date or numbers.  Array holes\nand explicit ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined")," values are skipped.  ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," values may be stubbed. All\nother values are stored as strings.  The function takes an options argument:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"dateNF")),(0,l.kt)("td",{parentName:"tr",align:"center"},"FMT 14"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified date format in string output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"cellDates")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Store dates as type ",(0,l.kt)("inlineCode",{parentName:"td"},"d")," (default is ",(0,l.kt)("inlineCode",{parentName:"td"},"n"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"sheetStubs")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Create cell objects of type ",(0,l.kt)("inlineCode",{parentName:"td"},"z")," for ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," values")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"nullError")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, emit ",(0,l.kt)("inlineCode",{parentName:"td"},"#NULL!")," error cells for ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," values")))),(0,l.kt)("p",null,"The example worksheet can be generated with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'var ws = XLSX.utils.aoa_to_sheet([\n  ["S", "h", "e", "e", "t", "J", "S"],\n  [  1,   2,    ,    ,   5,   6,   7],\n  [  2,   3,    ,    ,   6,   7,   8],\n  [  3,   4,    ,    ,   7,   8,   9],\n  [  4,   5,   6,   7,   8,   9,   0]\n]);\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Add data from an array of arrays to an existing worksheet")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"XLSX.utils.sheet_add_aoa(ws, aoa, opts);\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.sheet_add_aoa")," takes an array of arrays of JS values and updates an\nexisting worksheet object.  It follows the same process as ",(0,l.kt)("inlineCode",{parentName:"p"},"aoa_to_sheet")," and\naccepts an options argument:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"dateNF")),(0,l.kt)("td",{parentName:"tr",align:"center"},"FMT 14"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified date format in string output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"cellDates")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Store dates as type ",(0,l.kt)("inlineCode",{parentName:"td"},"d")," (default is ",(0,l.kt)("inlineCode",{parentName:"td"},"n"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"sheetStubs")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Create cell objects of type ",(0,l.kt)("inlineCode",{parentName:"td"},"z")," for ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," values")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"nullError")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, emit ",(0,l.kt)("inlineCode",{parentName:"td"},"#NULL!")," error cells for ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," values")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"origin")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified cell as starting point (see below)")))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"origin")," is expected to be one of:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"th"},"origin")),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(cell object)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified cell (cell object)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(string)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified cell (A1-style cell)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(number >= 0)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Start from the first column at specified row (0-indexed)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"-1"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Append to bottom of worksheet starting on first column")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(default)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Start from cell A1")))),(0,l.kt)("p",null,"The example worksheet can be built up in the order ",(0,l.kt)("inlineCode",{parentName:"p"},"A1:G1, A2:B4, E2:G4, A5:G5"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'/* Initial row */\nvar ws = XLSX.utils.aoa_to_sheet([ "SheetJS".split("") ]);\n\n/* Write data starting at A2 */\nXLSX.utils.sheet_add_aoa(ws, [[1,2], [2,3], [3,4]], {origin: "A2"});\n\n/* Write data starting at E2 */\nXLSX.utils.sheet_add_aoa(ws, [[5,6,7], [6,7,8], [7,8,9]], {origin:{r:1, c:4}});\n\n/* Append row */\nXLSX.utils.sheet_add_aoa(ws, [[4,5,6,7,8,9,0]], {origin: -1});\n')),(0,l.kt)("h3",{id:"array-of-objects-input"},"Array of Objects Input"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Create a worksheet from an array of objects")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var ws = XLSX.utils.json_to_sheet(aoo, opts);\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.json_to_sheet"),' takes an array of objects and returns a worksheet\nwith automatically-generated "headers" based on the keys of the objects.  The\ndefault column order is determined by the first appearance of the field using\n',(0,l.kt)("inlineCode",{parentName:"p"},"Object.keys"),".  The function accepts an options argument:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"header")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified field order (default ",(0,l.kt)("inlineCode",{parentName:"td"},"Object.keys"),") **")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"dateNF")),(0,l.kt)("td",{parentName:"tr",align:"center"},"FMT 14"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified date format in string output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"cellDates")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Store dates as type ",(0,l.kt)("inlineCode",{parentName:"td"},"d")," (default is ",(0,l.kt)("inlineCode",{parentName:"td"},"n"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"skipHeader")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, do not include header row in output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"nullError")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, emit ",(0,l.kt)("inlineCode",{parentName:"td"},"#NULL!")," error cells for ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," values")))),(0,l.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"All fields from each row will be written! ",(0,l.kt)("inlineCode",{parentName:"p"},"header")," hints at a particular order\nbut is not exclusive. To remove fields from the export, filter the data source."),(0,l.kt)("p",{parentName:"div"},"Some data sources have special options to filter properties.  For example,\nMongoDB will add the ",(0,l.kt)("inlineCode",{parentName:"p"},"_id")," field when finding data from a collection:"),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const aoo_with_id = await coll.find({}).toArray();\nconst ws = XLSX.utils.json_to_sheet(aoo_with_id); // includes _id column\n")),(0,l.kt)("p",{parentName:"div"},"This can be filtered out through the ",(0,l.kt)("inlineCode",{parentName:"p"},"projection")," property:"),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const aoo = await coll.find({}, {projection:{_id:0}}).toArray(); // no _id !\nconst ws = XLSX.utils.json_to_sheet(aoo);\n")),(0,l.kt)("p",{parentName:"div"},"If a data source does not provide a filter option, it can be filtered manually:"),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const aoo = data.map(obj => Object.fromEntries(Object.entries(obj).filter(r => headers.indexOf(r[0]) > -1)));\n")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("inlineCode",{parentName:"li"},"header")," is an array, missing keys will be added in order of first use."),(0,l.kt)("li",{parentName:"ul"},"Cell types are deduced from the type of each value.  For example, a ",(0,l.kt)("inlineCode",{parentName:"li"},"Date"),"\nobject will generate a Date cell, while a string will generate a Text cell."),(0,l.kt)("li",{parentName:"ul"},"Null values will be skipped by default.  If ",(0,l.kt)("inlineCode",{parentName:"li"},"nullError")," is true, an error cell\ncorresponding to ",(0,l.kt)("inlineCode",{parentName:"li"},"#NULL!")," will be written to the worksheet.")),(0,l.kt)("p",null,"The example sheet cannot be reproduced using plain objects since JS object keys\nmust be unique. After replacing the second ",(0,l.kt)("inlineCode",{parentName:"p"},"e")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"S")," with ",(0,l.kt)("inlineCode",{parentName:"p"},"e_1")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"S_1"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'var ws = XLSX.utils.json_to_sheet([\n  { S:1, h:2,    ,      , t:5, J:6, S_1:7 },\n  { S:2, h:3,    ,      , t:6, J:7, S_1:8 }\n  { S:3, h:4,    ,      , t:7, J:8, S_1:9 }\n  { S:4, h:5, e:6, e_1:7, t:8, J:9, S_1:0 }\n], {header:["S","h","e","e_1","t","J","S_1"]});\n')),(0,l.kt)("p",null,"Alternatively, a different set of unique headers can be used with ",(0,l.kt)("inlineCode",{parentName:"p"},"skipHeader"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'var ws = XLSX.utils.json_to_sheet([\n  { A:"S", B:"h", C:"e", D:"e", E:"t", F:"J", G:"S" },\n  { A:  1, B:  2,      ,      , E:  5, F:  6, G:  7  },\n  { A:  2, B:  3,      ,      , E:  6, F:  7, G:  8  }\n  { A:  3, B:  4,      ,      , E:  7, F:  8, G:  9  },\n  { A:  4, B:  5, C:  6, D:  7, E:  8, F:  9, G:  0  },\n], {header:["A","B","C","D","E","F","G"], skipHeader:true});\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Add data from an array of objects to an existing worksheet")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"XLSX.utils.sheet_add_json(ws, aoo, opts);\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.sheet_add_json")," takes an array of objects and updates an existing\nworksheet object.  It follows the same process as ",(0,l.kt)("inlineCode",{parentName:"p"},"json_to_sheet")," and accepts\nan options argument:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"header")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified column order (default ",(0,l.kt)("inlineCode",{parentName:"td"},"Object.keys"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"dateNF")),(0,l.kt)("td",{parentName:"tr",align:"center"},"FMT 14"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified date format in string output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"cellDates")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Store dates as type ",(0,l.kt)("inlineCode",{parentName:"td"},"d")," (default is ",(0,l.kt)("inlineCode",{parentName:"td"},"n"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"skipHeader")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, do not include header row in output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"nullError")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, emit ",(0,l.kt)("inlineCode",{parentName:"td"},"#NULL!")," error cells for ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," values")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"origin")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified cell as starting point (see below)")))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"origin")," is expected to be one of:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"th"},"origin")),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(cell object)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified cell (cell object)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(string)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified cell (A1-style cell)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(number >= 0)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Start from the first column at specified row (0-indexed)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"-1"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Append to bottom of worksheet starting on first column")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(default)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Start from cell A1")))),(0,l.kt)("p",null,"This example worksheet can be built up in the order ",(0,l.kt)("inlineCode",{parentName:"p"},"A1:G1, A2:B4, E2:G4, A5:G5"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'/* Initial row */\nvar ws = XLSX.utils.json_to_sheet([\n  { A: "S", B: "h", C: "e", D: "e", E: "t", F: "J", G: "S" }\n], {header: ["A", "B", "C", "D", "E", "F", "G"], skipHeader: true});\n\n/* Write data starting at A2 */\nXLSX.utils.sheet_add_json(ws, [\n  { A: 1, B: 2 }, { A: 2, B: 3 }, { A: 3, B: 4 }\n], {skipHeader: true, origin: "A2"});\n\n/* Write data starting at E2 */\nXLSX.utils.sheet_add_json(ws, [\n  { A: 5, B: 6, C: 7 }, { A: 6, B: 7, C: 8 }, { A: 7, B: 8, C: 9 }\n], {skipHeader: true, origin: { r: 1, c: 4 }, header: [ "A", "B", "C" ]});\n\n/* Append row */\nXLSX.utils.sheet_add_json(ws, [\n  { A: 4, B: 5, C: 6, D: 7, E: 8, F: 9, G: 0 }\n], {header: ["A", "B", "C", "D", "E", "F", "G"], skipHeader: true, origin: -1});\n')),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"If the ",(0,l.kt)("inlineCode",{parentName:"p"},"header")," option is an array, ",(0,l.kt)("inlineCode",{parentName:"p"},"sheet_add_json")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"sheet_to_json")," will\nappend missing elements."),(0,l.kt)("p",{parentName:"div"},"This design enables consistent header order across calls:"),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function SheetJSHeaderOrder() {\n  /* Use shared header */\n  const header = [];\n  const ws1 = XLSX.utils.json_to_sheet([ {C: 2, D: 3}, ], {header});\n  XLSX.utils.sheet_add_json(ws1, [ {D: 1, C: 4}, ], {header, origin: -1, skipHeader: true});\n\n  /* only use header in first call */\n  const ws2 = XLSX.utils.json_to_sheet([ {C: 2, D: 3}, ], {header:[]});\n  XLSX.utils.sheet_add_json(ws2, [ {D: 1, C: 4}, ], {origin: -1, skipHeader: true});\n\n  return (<pre>\n    <b>Objects</b>\n    {"\\n[\\n  { C: 2, D: 3 },\\n  { D: 1, C: 4 } // different key order\\n]\\n"}<br/>\n    <b>Worksheet when same `header` array is passed to `sheet_add_json`</b>\n    <div dangerouslySetInnerHTML={{__html:XLSX.utils.sheet_to_html(ws1)}}/>\n    <i>New contents of `header`</i><br/>\n    {JSON.stringify(header)}<br/>\n    <br/>\n    <b>Worksheet when no `header` property is passed to `sheet_add_json`</b>\n    <div dangerouslySetInnerHTML={{__html:XLSX.utils.sheet_to_html(ws2)}}/>\n  </pre>)\n}\n')))),(0,l.kt)("h3",{id:"html-table-input"},"HTML Table Input"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Create a worksheet or workbook from an HTML DOM TABLE")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var ws = XLSX.utils.table_to_sheet(elt, opts);\nvar wb = XLSX.utils.table_to_book(elt, opts);\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.table_to_sheet")," takes a table DOM element and returns a worksheet\nresembling the input table.  Numbers are parsed.  All other data will be stored\nas strings."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.table_to_book")," produces a minimal workbook based on the worksheet."),(0,l.kt)("p",null,"Both functions accept options arguments:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"raw")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, every cell will hold raw strings")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"dateNF")),(0,l.kt)("td",{parentName:"tr",align:"center"},"FMT 14"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified date format in string output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"cellDates")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Store dates as type ",(0,l.kt)("inlineCode",{parentName:"td"},"d")," (default is ",(0,l.kt)("inlineCode",{parentName:"td"},"n"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"sheetRows")),(0,l.kt)("td",{parentName:"tr",align:"center"},"0"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If >0, read the first ",(0,l.kt)("inlineCode",{parentName:"td"},"sheetRows")," rows of the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"display")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, hidden rows and cells will not be parsed")))),(0,l.kt)("p",null,"To generate the example sheet, assuming the table has ID ",(0,l.kt)("inlineCode",{parentName:"p"},"sheetjs"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var tbl = document.getElementById('sheetjs');\nvar ws = XLSX.utils.table_to_sheet(tbl);\n")),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},(0,l.kt)("inlineCode",{parentName:"p"},"table_to_book")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"table_to_sheet")," act on HTML DOM elements.  Starting from\nan HTML string, there are two parsing approaches:"),(0,l.kt)("p",{parentName:"div"},"A) Table Phantasm: create a DIV with the desired HTML."),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},'/* create element from the source */\nvar elt = document.createElement("div");\nelt.innerHTML = html_source;\ndocument.body.appendChild(elt);\n\n/* generate worksheet */\nvar ws = XLSX.utils.table_to_sheet(elt.getElementsByTagName("TABLE")[0]);\n\n/* remove element */\ndocument.body.removeChild(elt);\n')),(0,l.kt)("p",{parentName:"div"},"B) Raw HTML: use ",(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.read")," to read the text in the same manner as CSV."),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},'var wb = XLSX.read(html_source, { type: "string" });\nvar ws = wb.Sheets[wb.SheetNames[0]];\n')))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Add data from a HTML DOM TABLE to an existing worksheet")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"XLSX.utils.sheet_add_dom(ws, elt, opts);\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.sheet_add_dom")," takes a table DOM element and updates an existing\nworksheet object.  It follows the same process as ",(0,l.kt)("inlineCode",{parentName:"p"},"table_to_sheet")," and accepts\nan options argument:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"raw")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, every cell will hold raw strings")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"dateNF")),(0,l.kt)("td",{parentName:"tr",align:"center"},"FMT 14"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified date format in string output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"cellDates")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Store dates as type ",(0,l.kt)("inlineCode",{parentName:"td"},"d")," (default is ",(0,l.kt)("inlineCode",{parentName:"td"},"n"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"sheetRows")),(0,l.kt)("td",{parentName:"tr",align:"center"},"0"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If >0, read the first ",(0,l.kt)("inlineCode",{parentName:"td"},"sheetRows")," rows of the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"display")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, hidden rows and cells will not be parsed")))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"origin")," is expected to be one of:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"th"},"origin")),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(cell object)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified cell (cell object)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(string)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified cell (A1-style cell)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(number >= 0)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Start from the first column at specified row (0-indexed)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"-1"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Append to bottom of worksheet starting on first column")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(default)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Start from cell A1")))),(0,l.kt)("p",null,"A common use case for ",(0,l.kt)("inlineCode",{parentName:"p"},"sheet_add_dom")," involves adding multiple tables to a\nsingle worksheet, usually with a few blank rows in between each table:"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"/files/multitable.png",alt:"Multi-Table Export in Excel"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function MultiTable() {\n  const headers = ["Table 1", "Table2", "Table 3"];\n\n  /* Callback invoked when the button is clicked */\n  const xport = React.useCallback(async () => {\n    /* This function creates gap rows */\n    function create_gap_rows(ws, nrows) {\n      var ref = XLSX.utils.decode_range(ws["!ref"]);       // get original range\n      ref.e.r += nrows;                                    // add to ending row\n      ws["!ref"] = XLSX.utils.encode_range(ref);           // reassign row\n    }\n\n    /* first table */\n    const ws = XLSX.utils.aoa_to_sheet([[headers[0]]]);\n    XLSX.utils.sheet_add_dom(ws, document.getElementById(\'table1\'), {origin: -1});\n    create_gap_rows(ws, 1); // one row gap after first table\n\n    /* second table */\n    XLSX.utils.sheet_add_aoa(ws, [[headers[1]]], {origin: -1});\n    XLSX.utils.sheet_add_dom(ws, document.getElementById(\'table2\'), {origin: -1});\n    create_gap_rows(ws, 2); // two rows gap after second table\n\n    /* third table */\n    XLSX.utils.sheet_add_aoa(ws, [[headers[2]]], {origin: -1});\n    XLSX.utils.sheet_add_dom(ws, document.getElementById(\'table3\'), {origin: -1});\n\n    /* create workbook and export */\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, "Export");\n    XLSX.writeFile(wb, "SheetJSMultiTablexport.xlsx");\n  });\n\n  return (\n    <>\n      <button onClick={xport}><b>Export XLSX!</b></button><br/><br/>\n      <b>{headers[0]}</b><br/>\n      <table id="table1">\n        <tr><td>A2</td><td>B2</td></tr>\n        <tr><td>A3</td><td>B3</td></tr>\n      </table>\n      <b>{headers[1]}</b><br/>\n      <table id="table2">\n        <tr><td>A6</td><td>B6</td><td>C6</td></tr>\n        <tr><td>A7</td><td>B7</td><td>C7</td></tr>\n      </table>\n      <br/>\n      <b>{headers[2]}</b><br/>\n      <table id="table3">\n        <tr><td>A11</td><td>B11</td></tr>\n        <tr><td>A12</td><td>B12</td></tr>\n      </table>\n    </>\n  );\n}\n')),(0,l.kt)("h3",{id:"delimiter-separated-output"},"Delimiter-Separated Output"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var csv = XLSX.utils.sheet_to_csv(ws, opts);\n")),(0,l.kt)("p",null,"As an alternative to the ",(0,l.kt)("inlineCode",{parentName:"p"},"writeFile")," CSV type, ",(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.sheet_to_csv")," also\nproduces CSV output.  The function takes an options argument:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"FS")),(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},'","')),(0,l.kt)("td",{parentName:"tr",align:"left"},'"Field Separator"  delimiter between fields')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"RS")),(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},'"\\n"')),(0,l.kt)("td",{parentName:"tr",align:"left"},'"Record Separator" delimiter between rows')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"dateNF")),(0,l.kt)("td",{parentName:"tr",align:"center"},"FMT 14"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified date format in string output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"strip")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Remove trailing field separators in each record **")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"blankrows")),(0,l.kt)("td",{parentName:"tr",align:"center"},"true"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Include blank lines in the CSV output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"skipHidden")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Skips hidden rows/columns in the CSV output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"forceQuotes")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Force quotes around fields")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"strip")," will remove trailing commas from each line under default ",(0,l.kt)("inlineCode",{parentName:"li"},"FS/RS")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"blankrows")," must be set to ",(0,l.kt)("inlineCode",{parentName:"li"},"false")," to skip blank lines."),(0,l.kt)("li",{parentName:"ul"},"Fields containing the record or field separator will automatically be wrapped\nin double quotes; ",(0,l.kt)("inlineCode",{parentName:"li"},"forceQuotes")," forces all cells to be wrapped in quotes."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"XLSX.write")," with ",(0,l.kt)("inlineCode",{parentName:"li"},"csv")," type will always prepend the UTF-8 byte-order mark for\nExcel compatibility.  ",(0,l.kt)("inlineCode",{parentName:"li"},"sheet_to_csv")," returns a JS string and omits the mark.\nUsing ",(0,l.kt)("inlineCode",{parentName:"li"},"XLSX.write")," with type ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," will also skip the mark.")),(0,l.kt)("p",null,"Starting from the example worksheet:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function SheetJSCSVTest() {\n  var ws = XLSX.utils.aoa_to_sheet([\n    ["S", "h", "e", "e", "t", "J", "S"],\n    [  1,   2,    ,    ,   5,   6,   7],\n    [  2,   3,    ,    ,   6,   7,   8],\n    [  3,   4,    ,    ,   7,   8,   9],\n    [  4,   5,   6,   7,   8,   9,   0]\n  ]);\n  return ( <pre>\n    <b>Worksheet (as HTML)</b>\n    <div dangerouslySetInnerHTML={{__html: XLSX.utils.sheet_to_html(ws)}}/>\n    <b>XLSX.utils.sheet_to_csv(ws)</b><br/>\n    {XLSX.utils.sheet_to_csv(ws)}<br/><br/>\n    <b>XLSX.utils.sheet_to_csv(ws, {\'{\'} FS: "\\t" {\'}\'})</b><br/>\n    {XLSX.utils.sheet_to_csv(ws, { FS: "\\t" })}<br/><br/>\n    <b>XLSX.utils.sheet_to_csv(ws, {\'{\'} FS: ":", RS: "|" {\'}\'})</b><br/>\n    {XLSX.utils.sheet_to_csv(ws, { FS: ":", RS: "|" })}<br/>\n  </pre> );\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"UTF-16 Text Output")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var txt = XLSX.utils.sheet_to_txt(ws, opts);\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"txt")," output type uses the tab character as the field separator.  If the\n",(0,l.kt)("inlineCode",{parentName:"p"},"codepage")," library is available (included in full distribution but not core),\nthe output will be encoded in ",(0,l.kt)("inlineCode",{parentName:"p"},"CP1200")," and the BOM will be prepended."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.sheet_to_txt")," takes the same arguments as ",(0,l.kt)("inlineCode",{parentName:"p"},"sheet_to_csv"),"."),(0,l.kt)("h3",{id:"html-output"},"HTML Output"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var html = XLSX.utils.sheet_to_html(ws, opts);\n")),(0,l.kt)("p",null,"As an alternative to the ",(0,l.kt)("inlineCode",{parentName:"p"},"writeFile")," HTML type, ",(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.sheet_to_html")," also\nproduces HTML output.  The function takes an options argument:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"id")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Specify the ",(0,l.kt)("inlineCode",{parentName:"td"},"id")," attribute for the ",(0,l.kt)("inlineCode",{parentName:"td"},"TABLE")," element")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"editable")),(0,l.kt)("td",{parentName:"tr",align:"center"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, set ",(0,l.kt)("inlineCode",{parentName:"td"},'contenteditable="true"')," for every TD")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"header")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Override header (default ",(0,l.kt)("inlineCode",{parentName:"td"},"html body"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"footer")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Override footer (default ",(0,l.kt)("inlineCode",{parentName:"td"},"/body /html"),")")))),(0,l.kt)("p",null,"Starting from the example worksheet:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function SheetJSHTML() {\n  var ws = XLSX.utils.aoa_to_sheet([\n    ["S", "h", "e", "e", "t", "J", "S"],\n    [  1,   2,    ,    ,   5,   6,   7],\n    [  2,   3,    ,    ,   6,   7,   8],\n    [  3,   4,    ,    ,   7,   8,   9],\n    [  4,   5,   6,   7,   8,   9,   0]\n  ]);\n  return ( <pre>\n    <b>XLSX.utils.sheet_to_html(ws)</b>\n    <div dangerouslySetInnerHTML={{__html: XLSX.utils.sheet_to_html(ws)}}/>\n  </pre> );\n}\n')),(0,l.kt)("h3",{id:"array-output"},"Array Output"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var arr = XLSX.utils.sheet_to_json(ws, opts);\n\nvar aoa = XLSX.utils.sheet_to_json(ws, {header: 1, ...other_opts});\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.sheet_to_json")," generates different types of JS objects. The function\ntakes an options argument:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Option Name"),(0,l.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"raw")),(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"true")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use raw values (true) or formatted strings (false)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"range")),(0,l.kt)("td",{parentName:"tr",align:"center"},"from WS"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Override Range (see table below)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"header")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Control output format (see table below)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"dateNF")),(0,l.kt)("td",{parentName:"tr",align:"center"},"FMT 14"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified date format in string output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"defval")),(0,l.kt)("td",{parentName:"tr",align:"center"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified value in place of null or undefined")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"blankrows")),(0,l.kt)("td",{parentName:"tr",align:"center"},"**"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Include blank lines in the output **")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"raw")," only affects cells which have a format code (",(0,l.kt)("inlineCode",{parentName:"li"},".z"),") field or a formatted\ntext (",(0,l.kt)("inlineCode",{parentName:"li"},".w"),") field."),(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("inlineCode",{parentName:"li"},"header")," is specified, the first row is considered a data row; if ",(0,l.kt)("inlineCode",{parentName:"li"},"header"),"\nis not specified, the first row is the header row and not considered data."),(0,l.kt)("li",{parentName:"ul"},"When ",(0,l.kt)("inlineCode",{parentName:"li"},"header")," is not specified, the conversion will automatically disambiguate\nheader entries by affixing ",(0,l.kt)("inlineCode",{parentName:"li"},"_")," and a count starting at ",(0,l.kt)("inlineCode",{parentName:"li"},"1"),".  For example, if\nthree columns have header ",(0,l.kt)("inlineCode",{parentName:"li"},"foo")," the output fields are ",(0,l.kt)("inlineCode",{parentName:"li"},"foo"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"foo_1"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"foo_2")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"null")," values are returned when ",(0,l.kt)("inlineCode",{parentName:"li"},"raw")," is true but are skipped when false."),(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("inlineCode",{parentName:"li"},"defval")," is not specified, null and undefined values are skipped normally.\nIf specified, all null and undefined points will be filled with ",(0,l.kt)("inlineCode",{parentName:"li"},"defval")),(0,l.kt)("li",{parentName:"ul"},"When ",(0,l.kt)("inlineCode",{parentName:"li"},"header")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"1"),", the default is to generate blank rows.  ",(0,l.kt)("inlineCode",{parentName:"li"},"blankrows")," must\nbe set to ",(0,l.kt)("inlineCode",{parentName:"li"},"false")," to skip blank rows."),(0,l.kt)("li",{parentName:"ul"},"When ",(0,l.kt)("inlineCode",{parentName:"li"},"header")," is not ",(0,l.kt)("inlineCode",{parentName:"li"},"1"),", the default is to skip blank rows.  ",(0,l.kt)("inlineCode",{parentName:"li"},"blankrows")," must\nbe true to generate blank rows")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"range")," is expected to be one of:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"th"},"range")),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(number)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use worksheet range but set starting row to the value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(string)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified range (A1-style bounded range string)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(default)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use worksheet range (",(0,l.kt)("inlineCode",{parentName:"td"},"ws['!ref']"),")")))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"header")," is expected to be one of:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"th"},"header")),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"1")),(0,l.kt)("td",{parentName:"tr",align:"left"},'Generate an array of arrays ("2D Array")')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},'"A"')),(0,l.kt)("td",{parentName:"tr",align:"left"},"Row object keys are literal column labels")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"array of strings"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use specified strings as keys in row objects")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"(default)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Read and disambiguate first row as keys")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If header is not ",(0,l.kt)("inlineCode",{parentName:"li"},"1"),", the row object will contain the non-enumerable property\n",(0,l.kt)("inlineCode",{parentName:"li"},"__rowNum__")," that represents the row of the sheet corresponding to the entry."),(0,l.kt)("li",{parentName:"ul"},"If header is an array, the keys will not be disambiguated.  This can lead to\nunexpected results if the array values are not unique!")),(0,l.kt)("p",null,"For the example worksheet:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function SheetJSToJSON() {\n  /* original data */\n  var ws = XLSX.utils.aoa_to_sheet([\n    ["S", "h", "e", "e", "t", "J", "S"],\n    [  1,   2,    ,    ,   5,   6,   7],\n    [  2,   3,    ,    ,   6,   7,   8],\n    [  3,   4,    ,    ,   7,   8,   9],\n    [  4,   5,   6,   7,   8,   9,   0]\n  ]);\n\n  /* display JS objects with some whitespace */\n  const aoo = o => o.map(r => "  " + JSON.stringify(r).replace(/,"/g, \', "\').replace(/:/g, ": ").replace(/"([A-Za-z_]\\w*)":/g, \'$1:\')).join("\\n");\n  const aoa = o => o.map(r => "  " + JSON.stringify(r).replace(/,/g, \', \').replace(/null/g, "")).join("\\n");\n\n  return ( <pre>\n    <b>Worksheet (as HTML)</b>\n    <div dangerouslySetInnerHTML={{__html: XLSX.utils.sheet_to_html(ws)}}/>\n    <b>XLSX.utils.sheet_to_json(ws, {\'{\'} header: 1 {\'}\'}) [array of arrays]</b><br/>\n    [<br/>{aoa(XLSX.utils.sheet_to_json(ws, { header: 1 }))}<br/>]<br/><br/>\n    <b>XLSX.utils.sheet_to_json(ws) [objects with header disambiguation]</b><br/>\n    [<br/>{aoo(XLSX.utils.sheet_to_json(ws))}<br/>]<br/><br/>\n    <b>XLSX.utils.sheet_to_json(ws, {\'{\'} header: "A" {\'}\'}) [column names as keys]</b><br/>\n    [<br/>{aoo(XLSX.utils.sheet_to_json(ws, { header: "A" }))}<br/>]<br/><br/>\n    <b>XLSX.utils.sheet_to_json(ws, {\'{\'} header: ["A","E","I","O","U","6","9"] {\'}\'})</b><br/>\n    [<br/>{aoo(XLSX.utils.sheet_to_json(ws, { header: ["A","E","I","O","U","6","9"] }))}<br/>]<br/>\n  </pre> );\n}\n')),(0,l.kt)("h3",{id:"formulae-output"},"Formulae Output"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var fmla_arr = XLSX.utils.sheet_to_formulae(ws);\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"XLSX.utils.sheet_to_formulae")," generates an array of commands that represent\nhow a person would enter data into an application."),(0,l.kt)("p",null,"Cells without formulae are written as ",(0,l.kt)("inlineCode",{parentName:"p"},"A1-cell-address=value"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"A1=1                   // A1 is the numeric value 1\nB1=TRUE                // B1 is the logical value TRUE\n")),(0,l.kt)("p",null,"String literals are prefixed with a ",(0,l.kt)("inlineCode",{parentName:"p"},"'")," in accordance with Excel:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'A5=\'A4+A3              // A5 is the string "A4+A3"\n')),(0,l.kt)("p",null,"Cells with formulae are written as ",(0,l.kt)("inlineCode",{parentName:"p"},"A1-cell-address=formula"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"A5=A4+A3               // A5 is a cell with formula =A4+A3\n")),(0,l.kt)("p",null,"Array formulae are written as ",(0,l.kt)("inlineCode",{parentName:"p"},"A1-range=formula"),".  They do not include the\ndisplayed curly braces:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"A4:B4=A2:B2*A3:B3      // A4:B4 array formula {=A2:B2*A3:B3}\n")),(0,l.kt)("p",null,"Single-cell array formulae are written with single-cell ranges:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"C4:C4=SUM(A2:A3*B2:B3) // C4 array formula {=SUM(A2:A3*B2:B3)}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function SheetJSToJSON() {\n  var ws = XLSX.utils.aoa_to_sheet([\n    ["A", "B", "C"],\n    [1, 2, { t: "n", f: "SUM(A2:B2)" }],\n    [3, 4, { t: "n", f: "A3+B3" }]\n  ]);\n  XLSX.utils.sheet_set_array_formula(ws, "A4:B4", "A2:B2*A3:B3");\n  XLSX.utils.sheet_set_array_formula(ws, "C4", "SUM(A2:A3*B2:B3)");\n\n  var __html = `\\\n<i>Values</i>\n[\n  ["A", "B", "C"],\n  [1,  2],\n  [3,  4]\n]\n<i>Formulae</i>\nC2     =SUM(A2:B2)\nC3     =A3+B3\n<i>Array Formulae</i>\nA4:B4  {=A2:B2*A3:B3}\nC4     {=SUM(A2:A3*B2:B3)}\n\n`;\n\n  return ( <pre>\n    <b>Original worksheet</b>\n    <div dangerouslySetInnerHTML={{__html}}/>\n    <b>XLSX.utils.sheet_to_formulae(ws).join("\\n")</b><br/>\n    <br/>{XLSX.utils.sheet_to_formulae(ws).join("\\n")}\n  </pre> );\n}\n')))}u.isMDXComponent=!0}}]);