"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[800],{9613:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),h=p(n),c=r,u=h["".concat(s,".").concat(c)]||h[c]||m[c]||i;return n?a.createElement(u,l(l({ref:t},d),{},{components:n})):a.createElement(u,l({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7603:function(e,t,n){n(9496),n(2934),n(3662)},993:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return h}});var a=n(2848),r=n(9213),i=(n(9496),n(9613)),l=(n(7603),n(6269)),o=["components"],s={},p="Spreadsheet Features",d={unversionedId:"csf/features/index",id:"csf/features/index",title:"Spreadsheet Features",description:"Even for basic features like date storage, the official Excel formats store the",source:"@site/docs/07-csf/07-features/index.md",sourceDirName:"07-csf/07-features",slug:"/csf/features/",permalink:"/docs/csf/features/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Workbook Object",permalink:"/docs/csf/book"},next:{title:"Formulae",permalink:"/docs/csf/features/formulae"}},m={},h=[{value:"Row and Column Properties",id:"row-and-column-properties",level:2},{value:"Number Formats",id:"number-formats",level:2},{value:"Cell Comments",id:"cell-comments",level:2},{value:"Sheet Visibility",id:"sheet-visibility",level:2},{value:"VBA and Macros",id:"vba-and-macros",level:2},{value:"Round-tripping Macro Enabled Files",id:"round-tripping-macro-enabled-files",level:4},{value:"Code Names",id:"code-names",level:4},{value:"Macrosheets",id:"macrosheets",level:4},{value:"Detecting Macros in Workbooks",id:"detecting-macros-in-workbooks",level:4}],c={toc:h};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"spreadsheet-features"},"Spreadsheet Features"),(0,i.kt)("p",null,"Even for basic features like date storage, the official Excel formats store the\nsame content in different ways.  The parsers are expected to convert from the\nunderlying file format representation to the Common Spreadsheet Format.  Writers\nare expected to convert from CSF back to the underlying file format."),(0,i.kt)("p",null,"The following topics are covered in sub-pages:"),(0,i.kt)("ul",null,(0,l.jA)().items.map((function(e,t){var n,r,l,o=null!=(n=e.customProps)&&n.icon?{listStyleImage:'url("'+e.customProps.icon+'")'}:{};return(0,i.kt)("li",(0,a.Z)({style:o},null!=(r=e.customProps)&&r.class?{className:e.customProps.class}:{}),(0,i.kt)("a",{href:e.href},e.label),(null==(l=e.customProps)?void 0:l.summary)&&" - "+e.customProps.summary)}))),(0,i.kt)("h2",{id:"row-and-column-properties"},"Row and Column Properties"),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Format Support")," (click to show)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Row Properties"),": XLSX/M, XLSB, BIFF8 XLS, XLML, SYLK, DOM, ODS"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Column Properties"),": XLSX/M, XLSB, BIFF8 XLS, XLML, SYLK, DOM")),(0,i.kt)("p",null,"Row and Column properties are not extracted by default when reading from a file\nand are not persisted by default when writing to a file. The option\n",(0,i.kt)("inlineCode",{parentName:"p"},"cellStyles: true")," must be passed to the relevant read or write function."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Column Properties")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"!cols")," array in each worksheet, if present, is a collection of ",(0,i.kt)("inlineCode",{parentName:"p"},"ColInfo"),"\nobjects which have the following properties:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'type ColInfo = {\n  /* visibility */\n  hidden?: boolean; // if true, the column is hidden\n\n  /* column width is specified in one of the following ways: */\n  wpx?:    number;  // width in screen pixels\n  width?:  number;  // width in Excel "Max Digit Width", width*256 is integral\n  wch?:    number;  // width in characters\n\n  /* other fields for preserving features from files */\n  level?:  number;  // 0-indexed outline / group level\n  MDW?:    number;  // Excel "Max Digit Width" unit, always integral\n};\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Row Properties")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"!rows")," array in each worksheet, if present, is a collection of ",(0,i.kt)("inlineCode",{parentName:"p"},"RowInfo"),"\nobjects which have the following properties:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"type RowInfo = {\n  /* visibility */\n  hidden?: boolean; // if true, the row is hidden\n\n  /* row height is specified in one of the following ways: */\n  hpx?:    number;  // height in screen pixels\n  hpt?:    number;  // height in points\n\n  level?:  number;  // 0-indexed outline / group level\n};\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Outline / Group Levels Convention")),(0,i.kt)("p",null,"The Excel UI displays the base outline level as ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," and the max level as ",(0,i.kt)("inlineCode",{parentName:"p"},"8"),".\nFollowing JS conventions, SheetJS uses 0-indexed outline levels wherein the base\noutline level is ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," and the max level is ",(0,i.kt)("inlineCode",{parentName:"p"},"7"),"."),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Why are there three width types?")," (click to show)"),(0,i.kt)("p",null,"There are three different width types corresponding to the three different ways\nspreadsheets store column widths:"),(0,i.kt)("p",null,"SYLK and other plain text formats use raw character count. Contemporaneous tools\nlike Visicalc and Multiplan were character based.  Since the characters had the\nsame width, it sufficed to store a count.  This tradition was continued into the\nBIFF formats."),(0,i.kt)("p",null,"SpreadsheetML (2003) tried to align with HTML by standardizing on screen pixel\ncount throughout the file.  Column widths, row heights, and other measures use\npixels.  When the pixel and character counts do not align, Excel rounds values."),(0,i.kt)("p",null,'XLSX internally stores column widths in a nebulous "Max Digit Width" form.  The\nMax Digit Width is the width of the largest digit when rendered (generally the\n"0" character is the widest).  The internal width must be an integer multiple of\nthe the width divided by 256.  ECMA-376 describes a formula for converting\nbetween pixels and the internal width.  This represents a hybrid approach.'),(0,i.kt)("p",null,"Read functions attempt to populate all three properties.  Write functions will\ntry to cycle specified values to the desired type.  In order to avoid potential\nconflicts, manipulation should delete the other properties first.  For example,\nwhen changing the pixel width, delete the ",(0,i.kt)("inlineCode",{parentName:"p"},"wch")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"width")," properties.")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Implementation details")," (click to show)"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Row Heights")),(0,i.kt)("p",null,"Excel internally stores row heights in points.  The default resolution is 72 DPI\nor 96 PPI, so the pixel and point size should agree.  For different resolutions\nthey may not agree, so the library separates the concepts."),(0,i.kt)("p",null,"Even though all of the information is made available, writers are expected to\nfollow the priority order:"),(0,i.kt)("p",null,"1) use ",(0,i.kt)("inlineCode",{parentName:"p"},"hpx")," pixel height if available\n2) use ",(0,i.kt)("inlineCode",{parentName:"p"},"hpt")," point height if available"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Column Widths")),(0,i.kt)("p",null,"Given the constraints, it is possible to determine the MDW without actually\ninspecting the font!  The parsers guess the pixel width by converting from width\nto pixels and back, repeating for all possible MDW and selecting the MDW that\nminimizes the error.  XLML actually stores the pixel width, so the guess works\nin the opposite direction."),(0,i.kt)("p",null,"Even though all of the information is made available, writers are expected to\nfollow the priority order:"),(0,i.kt)("p",null,"1) use ",(0,i.kt)("inlineCode",{parentName:"p"},"width")," field if available\n2) use ",(0,i.kt)("inlineCode",{parentName:"p"},"wpx")," pixel width if available\n3) use ",(0,i.kt)("inlineCode",{parentName:"p"},"wch")," character count if available")),(0,i.kt)("h2",{id:"number-formats"},"Number Formats"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"cell.w")," formatted text for each cell is produced from ",(0,i.kt)("inlineCode",{parentName:"p"},"cell.v")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"cell.z"),"\nformat.  If the format is not specified, the Excel ",(0,i.kt)("inlineCode",{parentName:"p"},"General")," format is used.\nThe format can either be specified as a string or as an index into the format\ntable.  Parsers are expected to populate ",(0,i.kt)("inlineCode",{parentName:"p"},"workbook.SSF")," with the number format\ntable.  Writers are expected to serialize the table."),(0,i.kt)("p",null,"The following example creates a custom format from scratch:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'var wb = {\n  SheetNames: ["Sheet1"],\n  Sheets: {\n    Sheet1: {\n      "!ref":"A1:C1",\n      A1: { t:"n", v:10000 },                    // <-- General format\n      B1: { t:"n", v:10000, z: "0%" },           // <-- Builtin format\n      C1: { t:"n", v:10000, z: "\\"T\\"\\ #0.00" }  // <-- Custom format\n    }\n  }\n}\n')),(0,i.kt)("p",null,"The rules are slightly different from how Excel displays custom number formats.\nIn particular, literal characters must be wrapped in double quotes or preceded\nby a backslash. For more info, see the Excel documentation article\n",(0,i.kt)("inlineCode",{parentName:"p"},"Create or delete a custom number format")," or ECMA-376 18.8.31 (Number Formats)"),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Default Number Formats")," (click to show)"),(0,i.kt)("p",null,"The default formats are listed in ECMA-376 18.8.30:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"right"},"ID"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Format"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"0"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"General"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"1"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"0"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"2"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"0.00"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"3"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"#,##0"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"4"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"#,##0.00"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"9"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"0%"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"10"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"0.00%"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"11"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"0.00E+00"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"12"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"# ?/?"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"13"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"# ??/??"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"14"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"m/d/yy")," (see below)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"15"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"d-mmm-yy"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"16"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"d-mmm"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"17"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"mmm-yy"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"18"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"h:mm AM/PM"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"19"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"h:mm:ss AM/PM"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"20"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"h:mm"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"21"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"h:mm:ss"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"22"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"m/d/yy h:mm"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"37"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"#,##0 ;(#,##0)"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"38"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"#,##0 ;[Red](#,##0)"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"39"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"#,##0.00;(#,##0.00)"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"40"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"#,##0.00;[Red](#,##0.00)"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"45"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"mm:ss"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"46"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"[h]:mm:ss"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"47"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"mmss.0"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"48"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"##0.0E+0"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"right"},"49"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"@")))))),(0,i.kt)("p",null,"Format 14 (",(0,i.kt)("inlineCode",{parentName:"p"},"m/d/yy"),") is localized by Excel: even though the file specifies that\nnumber format, it will be drawn differently based on system settings.  It makes\nsense when the producer and consumer of files are in the same locale, but that\nis not always the case over the Internet.  To get around this ambiguity, parse\nfunctions accept the ",(0,i.kt)("inlineCode",{parentName:"p"},"dateNF")," option to override the interpretation of that\nspecific format string."),(0,i.kt)("h2",{id:"cell-comments"},"Cell Comments"),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Format Support")," (click to show)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Simple Notes/Comments"),": XLSX/M, XLSB, BIFF8 XLS (read only), XLML, ODS (read only)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Threaded Comments"),": XLSX/M, XLSB (read only)")),(0,i.kt)("p",null,"Cell comments are objects stored in the ",(0,i.kt)("inlineCode",{parentName:"p"},"c")," array of cell objects.  The actual\ncontents of the comment are split into blocks based on the comment author.  The\n",(0,i.kt)("inlineCode",{parentName:"p"},"a")," field of each comment object is the author of the comment and the ",(0,i.kt)("inlineCode",{parentName:"p"},"t")," field\nis the plain text representation."),(0,i.kt)("p",null,"For example, the following snippet appends a cell comment into cell ",(0,i.kt)("inlineCode",{parentName:"p"},"A1"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'if(!ws.A1.c) ws.A1.c = [];\nws.A1.c.push({a:"SheetJS", t:"I\'m a little comment, short and stout!"});\n')),(0,i.kt)("p",null,"Note: XLSB enforces a 54 character limit on the Author name.  Names longer than\n54 characters may cause issues with other formats."),(0,i.kt)("p",null,"To mark a comment as normally hidden, set the ",(0,i.kt)("inlineCode",{parentName:"p"},"hidden")," property:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'if(!ws.A1.c) ws.A1.c = [];\nws.A1.c.push({a:"SheetJS", t:"This comment is visible"});\n\nif(!ws.A2.c) ws.A2.c = [];\nws.A2.c.hidden = true;\nws.A2.c.push({a:"SheetJS", t:"This comment will be hidden"});\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Threaded Comments")),(0,i.kt)("p",null,"Introduced in Excel 365, threaded comments are plain text comment snippets with\nauthor metadata and parent references. They are supported in XLSX and XLSB."),(0,i.kt)("p",null,"To mark a comment as threaded, each comment part must have a true ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," property:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'if(!ws.A1.c) ws.A1.c = [];\nws.A1.c.push({a:"SheetJS", t:"This is not threaded"});\n\nif(!ws.A2.c) ws.A2.c = [];\nws.A2.c.hidden = true;\nws.A2.c.push({a:"SheetJS", t:"This is threaded", T: true});\nws.A2.c.push({a:"JSSheet", t:"This is also threaded", T: true});\n')),(0,i.kt)("p",null,"There is no Active Directory or Office 365 metadata associated with authors in a thread."),(0,i.kt)("h2",{id:"sheet-visibility"},"Sheet Visibility"),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Format Support")," (click to show)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Hidden Sheets"),": XLSX/M, XLSB, BIFF8/BIFF5 XLS, XLML"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Very Hidden Sheets"),": XLSX/M, XLSB, BIFF8/BIFF5 XLS, XLML")),(0,i.kt)("p",null,'Excel enables hiding sheets in the lower tab bar.  The sheet data is stored in\nthe file but the UI does not readily make it available.  Standard hidden sheets\nare revealed in the "Unhide" menu.  Excel also has "very hidden" sheets which\ncannot be revealed in the menu.  It is only accessible in the VB Editor!'),(0,i.kt)("p",null,"The visibility setting is stored in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Hidden")," property of sheet props array."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Value"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Definition"),(0,i.kt)("th",{parentName:"tr",align:"left"},'VB Editor "Visible" Property'))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"0"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Visible"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"-1 - xlSheetVisible"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"1"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Hidden"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"}," 0 - xlSheetHidden"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"2"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Very Hidden"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"}," 2 - xlSheetVeryHidden"))))),(0,i.kt)("p",null,"If the respective Sheet entry does not exist or if the ",(0,i.kt)("inlineCode",{parentName:"p"},"Hidden")," property is not\nset, the worksheet is visible."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"List all worksheets and their visibilities")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"wb.Workbook.Sheets.map(function(x) { return [x.name, x.Hidden] })\n// [ [ 'Visible', 0 ], [ 'Hidden', 1 ], [ 'VeryHidden', 2 ] ]\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Check if worksheet is visible")),(0,i.kt)("p",null,"Non-Excel formats do not support the Very Hidden state.  The best way to test\nif a sheet is visible is to check if the ",(0,i.kt)("inlineCode",{parentName:"p"},"Hidden")," property is logical truth:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"wb.Workbook.Sheets.map(function(x) { return [x.name, !x.Hidden] })\n// [ [ 'Visible', true ], [ 'Hidden', false ], [ 'VeryHidden', false ] ]\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Live Example")," (click to show)"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"pathname:///files/sheet_visibility.xlsx"},"This test file")," has three sheets:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'"Visible" is visible'),(0,i.kt)("li",{parentName:"ul"},'"Hidden" is hidden'),(0,i.kt)("li",{parentName:"ul"},'"VeryHidden" is very hidden')),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/files/sheet_visibility.png",alt:"Screenshot"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Live demo")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function Visibility(props) {\n  const [sheets, setSheets] = React.useState([]);\n  const names = [ "Visible", "Hidden", "Very Hidden" ];\n\n  React.useEffect(async() => {\n    const f = await fetch("/files/sheet_visibility.xlsx");\n    const ab = await f.arrayBuffer();\n    const wb = XLSX.read(ab);\n\n    /* State will be set to the `Sheets` property array */\n    setSheets(wb.Workbook.Sheets);\n  }, []);\n\n  return (<table>\n    <thead><tr><th>Name</th><th>Value</th><th>Hidden</th></tr></thead>\n    <tbody>{sheets.map((x,i) => (<tr key={i}>\n\n      <td>{x.name}</td>\n\n      <td>{x.Hidden} - {names[x.Hidden]}</td>\n\n      <td>{!x.Hidden ? "No" : "Yes"}</td>\n\n    </tr>))}</tbody></table>);\n}\n\n'))),(0,i.kt)("h2",{id:"vba-and-macros"},"VBA and Macros"),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Format Support")," (click to show)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"VBA Modules"),": XLSM, XLSB, BIFF8 XLS")),(0,i.kt)("p",null,"VBA Macros are stored in a special data blob that is exposed in the ",(0,i.kt)("inlineCode",{parentName:"p"},"vbaraw"),"\nproperty of the workbook object when the ",(0,i.kt)("inlineCode",{parentName:"p"},"bookVBA")," option is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),".  They are\nsupported in ",(0,i.kt)("inlineCode",{parentName:"p"},"XLSM"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"XLSB"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"BIFF8 XLS")," formats.  The supported format\nwriters automatically insert the data blobs if it is present in the workbook and\nassociate with the worksheet names."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"vbaraw")," property stores raw bytes. ",(0,i.kt)("a",{parentName:"p",href:"https://sheetjs.com/pro"},"SheetJS Pro"),"\noffers a special component for extracting macro text from the VBA blob, editing\nthe VBA project, and exporting new VBA blobs."),(0,i.kt)("h4",{id:"round-tripping-macro-enabled-files"},"Round-tripping Macro Enabled Files"),(0,i.kt)("p",null,"In order to preserve macro when reading and writing files, the ",(0,i.kt)("inlineCode",{parentName:"p"},"bookVBA")," option\nmust be set to true when reading and when writing.  In addition, the output file\nformat must support macros.  ",(0,i.kt)("inlineCode",{parentName:"p"},"XLSX")," notably does not support macros, and ",(0,i.kt)("inlineCode",{parentName:"p"},"XLSM"),"\nshould be used in its place:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"/* Reading data */\nvar wb = XLSX.read(data, { bookVBA: true }); // read file and distill VBA blob\nvar vbablob = wb.vbaraw;\n")),(0,i.kt)("h4",{id:"code-names"},"Code Names"),(0,i.kt)("p",null,"By default, Excel will use ",(0,i.kt)("inlineCode",{parentName:"p"},"ThisWorkbook")," or a translation ",(0,i.kt)("inlineCode",{parentName:"p"},"DieseArbeitsmappe"),"\nfor the workbook.  Each worksheet will be identified using the default ",(0,i.kt)("inlineCode",{parentName:"p"},"Sheet#"),"\nnaming pattern even if the worksheet names have changed."),(0,i.kt)("p",null,"A custom workbook code name will be stored in ",(0,i.kt)("inlineCode",{parentName:"p"},"wb.Workbook.WBProps.CodeName"),".\nFor exports, assigning the property will override the default value."),(0,i.kt)("p",null,"Worksheet and Chartsheet code names are in the worksheet properties object at\n",(0,i.kt)("inlineCode",{parentName:"p"},"wb.Workbook.Sheets[i].CodeName"),".  Macrosheets and Dialogsheets are ignored."),(0,i.kt)("p",null,"The readers and writers preserve the code names, but they have to be manually\nset when adding a VBA blob to a different workbook."),(0,i.kt)("h4",{id:"macrosheets"},"Macrosheets"),(0,i.kt)("p",null,'Older versions of Excel also supported a non-VBA "macrosheet" sheet type that\nstored automation commands.  These are exposed in objects with the ',(0,i.kt)("inlineCode",{parentName:"p"},"!type"),"\nproperty set to ",(0,i.kt)("inlineCode",{parentName:"p"},'"macro"'),"."),(0,i.kt)("p",null,"Under the hood, Excel treats Macrosheets as normal worksheets with special\ninterpretation of the function expressions."),(0,i.kt)("h4",{id:"detecting-macros-in-workbooks"},"Detecting Macros in Workbooks"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"vbaraw")," field will only be set if macros are present.  Macrosheets will be\nexplicitly flagged.  Combining the two checks yields a simple function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function wb_has_macro(wb/*:workbook*/)/*:boolean*/ {\n  if(!!wb.vbaraw) return true;\n  const sheets = wb.SheetNames.map((n) => wb.Sheets[n]);\n  return sheets.some((ws) => !!ws && ws['!type']=='macro');\n}\n")))}u.isMDXComponent=!0}}]);