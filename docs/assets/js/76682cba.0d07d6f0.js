"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[423],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1509:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:20,title:"Content and Site Generation"},o=void 0,l={unversionedId:"demos/content",id:"demos/content",title:"Content and Site Generation",description:"With the advent of server-side frameworks and content management systems, it is",source:"@site/docs/03-demos/20-content.md",sourceDirName:"03-demos",slug:"/demos/content",permalink:"/docs/demos/content",draft:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20,title:"Content and Site Generation"},sidebar:"tutorialSidebar",previous:{title:"iOS and Android Apps",permalink:"/docs/demos/mobile"},next:{title:"Data Import",permalink:"/docs/solutions/input"}},s={},p=[{value:"GatsbyJS",id:"gatsbyjs",level:2},{value:"NuxtJS",id:"nuxtjs",level:2},{value:"nuxt.config.js configuration",id:"nuxtconfigjs-configuration",level:4},{value:"Template Use",id:"template-use",level:4},{value:"Nuxt Content Demo",id:"nuxt-content-demo",level:3}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"With the advent of server-side frameworks and content management systems, it is\npossible to build sites whose source of truth is a spreadsheet!  This demo\nexplores a number of approaches."),(0,r.kt)("h2",{id:"gatsbyjs"},"GatsbyJS"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.gatsbyjs.com/plugins/gatsby-transformer-excel/"},(0,r.kt)("inlineCode",{parentName:"a"},"gatsby-transformer-excel")),"\ngenerates nodes for each data row of each worksheet. The official documentation\nincludes examples and more detailed usage instructions."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"gatsby-transformer-excel")," is maintained by the Gatsby core team and all bugs\nshould be directed to the main Gatsby project.  If it is determined to be a bug\nin the parsing logic, issues should then be raised with the SheetJS project.")),(0,r.kt)("h2",{id:"nuxtjs"},"NuxtJS"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@nuxt/content")," is a file-based CMS for Nuxt, enabling static-site generation\nand on-demand server rendering powered by spreadsheets."),(0,r.kt)("h4",{id:"nuxtconfigjs-configuration"},"nuxt.config.js configuration"),(0,r.kt)("p",null,"Through an override in ",(0,r.kt)("inlineCode",{parentName:"p"},"nuxt.config.js"),", Nuxt Content will use custom parsers.\nDifferences from a stock ",(0,r.kt)("inlineCode",{parentName:"p"},"create-nuxt-app")," config are shown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// highlight-start\nimport { readFile, utils } from \'xlsx\';\n\n// This will be called when the files change\nconst parseSheet = (file, { path }) => {\n  // `path` is a path that can be read with `XLSX.readFile`\n  const wb = readFile(path);\n  const o = wb.SheetNames.map(name => ({ name, data: utils.sheet_to_json(wb.Sheets[name])}));\n  return { data: o };\n}\n// highlight-end\n\nexport default {\n// ...\n\n// highlight-start\n  // content.extendParser allows us to hook into the parsing step\n  content: {\n    extendParser: {\n      // the keys are the extensions that will be matched.  The "." is required\n      ".numbers": parseSheet,\n      ".xlsx": parseSheet,\n      ".xls": parseSheet,\n      // can add other extensions like ".fods" as desired\n    }\n  },\n// highlight-end\n\n// ...\n}\n')),(0,r.kt)("h4",{id:"template-use"},"Template Use"),(0,r.kt)("p",null,"When a spreadsheet is placed in the ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," folder, Nuxt will find it.  The\ndata can be referenced in a view with ",(0,r.kt)("inlineCode",{parentName:"p"},"asyncData"),".  The name should not include\nthe extension, so ",(0,r.kt)("inlineCode",{parentName:"p"},'"sheetjs.numbers"')," would be referenced as ",(0,r.kt)("inlineCode",{parentName:"p"},'"sheetjs"'),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"  async asyncData ({$content}) {\n    return {\n      // $content('sheetjs') will match files with extensions in nuxt.config.js\n      data: await $content('sheetjs').fetch()\n    };\n  }\n")),(0,r.kt)("p",null,"In the template, ",(0,r.kt)("inlineCode",{parentName:"p"},"data.data")," is an array of objects.  Each object has a ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),"\nproperty for the worksheet name and a ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," array of row objects.  This maps\nneatly with nested ",(0,r.kt)("inlineCode",{parentName:"p"},"v-for"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'  \x3c!-- loop over the worksheets --\x3e\n  <div v-for="item in data.data" v-bind:key="item.name">\n    <table>\n      \x3c!-- loop over the rows of each worksheet --\x3e\n      <tr v-for="row in item.data" v-bind:key="row.Index">\n        \x3c!-- here `row` is a row object generated from sheet_to_json --\x3e\n        <td>{{ row.Name }}</td>\n        <td>{{ row.Index }}</td>\n      </tr>\n    </table>\n  </div>\n')),(0,r.kt)("h3",{id:"nuxt-content-demo"},"Nuxt Content Demo"),(0,r.kt)("details",{open:!0},(0,r.kt)("summary",null,(0,r.kt)("b",null,"Complete Example")," (click to show)"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This was tested against ",(0,r.kt)("inlineCode",{parentName:"p"},"create-nuxt-app v4.0.0")," on 2022 August 13.")),(0,r.kt)("p",null,"1) Create a stock app:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-nuxt-app SheetJSNuxt\n")),(0,r.kt)("p",null,"When prompted, enter the following options:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Project name"),": hit Enter (use default SheetJSNuxt)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Programming language"),": hit Down Arrow (",(0,r.kt)("inlineCode",{parentName:"li"},"TypeScript")," selected) and hit Enter"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Package manager"),": select ",(0,r.kt)("inlineCode",{parentName:"li"},"Npm")," and hit Enter"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"UI framework"),": select ",(0,r.kt)("inlineCode",{parentName:"li"},"None")," and hit Enter"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Nuxt.js modules"),": scroll to ",(0,r.kt)("inlineCode",{parentName:"li"},"Content"),", select with Space, then hit Enter"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Linting tools"),": hit Enter (do not select any Linting tools)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Testing framework"),": select ",(0,r.kt)("inlineCode",{parentName:"li"},"None")," and hit Enter"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Rendering mode"),": select ",(0,r.kt)("inlineCode",{parentName:"li"},"Universal (SSR / SSG)")," and hit Enter"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Deployment target"),": select ",(0,r.kt)("inlineCode",{parentName:"li"},"Static (Static/Jamstack hosting)")," and hit Enter"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Development tools"),": hit Enter (do not select any Development tools)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"What is your GitHub username?"),": hit Enter"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Version control system"),": select ",(0,r.kt)("inlineCode",{parentName:"li"},"None"))),(0,r.kt)("p",null,"The project will be configured and modules will be installed."),(0,r.kt)("p",null,"2) Install the SheetJS library and start the dev server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd SheetJSNuxt\nnpm i --save https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz\nnpm run dev\n")),(0,r.kt)("p",null,"When the build finishes, the terminal will display a URL like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u2139 Listening on: http://localhost:64688/                                                            05:41:11\nNo issues found.                                                                                   05:41:11\n")),(0,r.kt)("p",null,"The dev server is listening on that URL.  Open the link in a web browser."),(0,r.kt)("p",null,"3) Download ",(0,r.kt)("a",{parentName:"p",href:"https://sheetjs.com/pres.xlsx"},"https://sheetjs.com/pres.xlsx")," and move to the ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," folder."),(0,r.kt)("p",null,"4) Modify ",(0,r.kt)("inlineCode",{parentName:"p"},"nuxt.config.js")," as described ",(0,r.kt)("a",{parentName:"p",href:"#nuxtconfigjs-configuration"},"earlier")),(0,r.kt)("p",null,"5) Replace ",(0,r.kt)("inlineCode",{parentName:"p"},"pages/index.vue")," with the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- sheetjs (C) 2013-present  SheetJS -- http://sheetjs.com --\x3e\n<template><div>\n  <div v-for="item in data.data" v-bind:key="item.name">\n    <h2>{{ item.name }}</h2>\n    <table><thead><tr><th>Name</th><th>Index</th></tr></thead><tbody>\n      <tr v-for="row in item.data" v-bind:key="row.Index">\n        <td>{{ row.Name }}</td>\n        <td>{{ row.Index }}</td>\n      </tr>\n    </tbody></table>\n  </div>\n</div></template>\n\n<script>\nexport default {\n  async asyncData ({$content}) {\n    return {\n      data: await $content(\'pres\').fetch()\n    };\n  }\n}\n<\/script>\n')),(0,r.kt)("p",null,"The browser should refresh to show the contents of the spreadsheet.  If it does\nnot, hit Refresh manually or open a new browser window."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"/nuxt/nuxt5.png",alt:"Nuxt Demo end of step 5"})),(0,r.kt)("p",null,"6) To verify that hot loading works, open ",(0,r.kt)("inlineCode",{parentName:"p"},"pres.xlsx")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," folder\nin Excel.  Add a new row to the bottom and save the file:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"/nuxt/nuxl6.png",alt:"Adding a new line to `pres.xlsx`"})),(0,r.kt)("p",null,"The dev server terminal should show a line like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u2139 Updated ./content/pres.xlsx                                       @nuxt/content 05:43:37\n")),(0,r.kt)("p",null,"The page should automatically refresh with the new content:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"/nuxt/nuxt6.png",alt:"Nuxt Demo end of step 6"})),(0,r.kt)("p",null,"7) Stop the dev server (hit ",(0,r.kt)("inlineCode",{parentName:"p"},"CTRL+C")," in the terminal window) and run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run generate\n")),(0,r.kt)("p",null,"This will create a static site in the ",(0,r.kt)("inlineCode",{parentName:"p"},"dist")," folder, which can be served with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx http-server dist\n")),(0,r.kt)("p",null,"Accessing the page http://localhost:8080 will show the page contents. Verifying\nthe static nature is trivial: make another change in Excel and save.  The page\nwill not change.")))}c.isMDXComponent=!0}}]);