"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7029],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(i,".").concat(m)]||u[m]||c[m]||s;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<s;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9181:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const s={sidebar_position:6,title:"HTTP Network Requests"},o="XHR and fetch",l={unversionedId:"demos/network",id:"demos/network",title:"HTTP Network Requests",description:"XMLHttpRequest and fetch browser APIs enable binary data transfer between",source:"@site/docs/03-demos/06-network.mdx",sourceDirName:"03-demos",slug:"/demos/network",permalink:"/docs/demos/network",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"HTTP Network Requests"},sidebar:"tutorialSidebar",previous:{title:"Google Sheets",permalink:"/docs/demos/gsheet"},next:{title:"Headless Automation",permalink:"/docs/demos/headless"}},i={},p=[{value:"Downloading Binary Data",id:"downloading-binary-data",level:2},{value:"Uploading Binary Data",id:"uploading-binary-data",level:2},{value:"Browser Demos",id:"browser-demos",level:2},{value:"XMLHttpRequest",id:"xmlhttprequest",level:3},{value:"fetch",id:"fetch",level:3},{value:"Wrapper Libraries",id:"wrapper-libraries",level:3},{value:"axios",id:"axios",level:4},{value:"superagent",id:"superagent",level:4}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"xhr-and-fetch"},"XHR and fetch"),(0,r.kt)("head",null,(0,r.kt)("script",{src:"https://unpkg.com/axios/dist/axios.min.js"}),(0,r.kt)("script",{src:"https://unpkg.com/superagent@7.1.1/dist/superagent.min.js"})),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"XMLHttpRequest")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch")," browser APIs enable binary data transfer between\nweb browser clients and web servers.  Since this library works in web browsers,\nserver conversion work can be offloaded to the client!  This demo shows a few\ncommon scenarios involving browser APIs and popular wrapper libraries."),(0,r.kt)("admonition",{title:"Third-Party Hosts and Binary Data",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Some services like AWS will corrupt raw binary uploads / downloads by encoding\nrequests and responses in UTF-8.  Typically, these services have options for\ndisabling this behavior."),(0,r.kt)("p",{parentName:"admonition"},'For AWS, in the "Binary Media Types" section of the API Gateway console, the\nfollowing types should be added to ensure smooth uploads and downloads:'),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"multipart/form-data"')," (for Lambda functions to receive files from clients)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"application/vnd.ms-excel"')," (for Lambda functions to send files to clients)"))),(0,r.kt)("h2",{id:"downloading-binary-data"},"Downloading Binary Data"),(0,r.kt)("p",null,"Most interesting spreadsheet files are binary data that contain byte sequences\nthat represent invalid UTF-8 characters."),(0,r.kt)("p",null,"The APIs generally have a way to control the interpretation of the downloaded\ndata.  The ",(0,r.kt)("inlineCode",{parentName:"p"},"arraybuffer")," response type usually forces the data to be presented\nas a pure ",(0,r.kt)("inlineCode",{parentName:"p"},"ArrayBuffer")," which can be parsed directly with ",(0,r.kt)("inlineCode",{parentName:"p"},"XLSX.read"),"."),(0,r.kt)("p",null,"For example, with ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const res = await fetch("https://sheetjs.com/pres.numbers");\nconst ab = await res.arrayBuffer(); // recover data as ArrayBuffer\n\nconst wb = XLSX.read(ab);\n')),(0,r.kt)("h2",{id:"uploading-binary-data"},"Uploading Binary Data"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FormData")," objects can hold ",(0,r.kt)("inlineCode",{parentName:"p"},"File")," blobs generated from ",(0,r.kt)("inlineCode",{parentName:"p"},"XLSX.write"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/* generate XLSX file bytes */\nvar data = XLSX.write(workbook, {bookType: 'xlsx', type: 'array'});\n\n/* build FormData with the generated file */\nvar fdata = new FormData();\nfdata.append('data', new File([data], 'sheetjs.xlsx'));\n// field name ^^^^           file name ^^^^^^^^^^^^\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"FormData")," object can be passed along to the POST request.  For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'var req = new XMLHttpRequest();\nreq.open("POST", "/upload", true);\nreq.send(fdata);\n')),(0,r.kt)("h2",{id:"browser-demos"},"Browser Demos"),(0,r.kt)("p",null,"The included demos focus on an editable table.  There are two separate flows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When the page is accessed, the browser will attempt to download ",(0,r.kt)("a",{parentName:"p",href:"https://sheetjs.com/pres.numbers"},"https://sheetjs.com/pres.numbers"),"\nand read the workbook.  The old table will be replaced with an editable table\nwhose contents match the first worksheet.  The table is generated using the\n",(0,r.kt)("inlineCode",{parentName:"p"},"sheet_to_html")," utility with ",(0,r.kt)("inlineCode",{parentName:"p"},"editable:true")," option")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When the upload button is clicked, the browser will generate a new worksheet\nusing ",(0,r.kt)("inlineCode",{parentName:"p"},"table_to_book")," and build up a new workbook.  It will then attempt to\ngenerate a file, upload it to ",(0,r.kt)("a",{parentName:"p",href:"https://s2c.sheetjs.com"},"https://s2c.sheetjs.com")," and show the response."))),(0,r.kt)("h3",{id:"xmlhttprequest"},"XMLHttpRequest"),(0,r.kt)("p",null,"For downloading data, the ",(0,r.kt)("inlineCode",{parentName:"p"},"arraybuffer")," response type generates an ",(0,r.kt)("inlineCode",{parentName:"p"},"ArrayBuffer"),"\nthat can be viewed as an ",(0,r.kt)("inlineCode",{parentName:"p"},"Uint8Array")," and fed to ",(0,r.kt)("inlineCode",{parentName:"p"},"XLSX.read")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"array")," type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/* set up an async GET request */\nvar req = new XMLHttpRequest();\nreq.open("GET", url, true);\nreq.responseType = "arraybuffer";\n\nreq.onload = function(e) {\n  /* parse the data when it is received */\n  var data = new Uint8Array(req.response);\n  var workbook = XLSX.read(data, {type:"array"});\n  /* DO SOMETHING WITH workbook HERE */\n};\nreq.send();\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Live Download demo")," (click to show)"),(0,r.kt)("p",null,"This demo uses ",(0,r.kt)("inlineCode",{parentName:"p"},"XMLHttpRequest")," to download ",(0,r.kt)("a",{parentName:"p",href:"https://sheetjs.com/pres.numbers"},"https://sheetjs.com/pres.numbers"),"\nand show the data in an HTML table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function SheetJSXHRDL() {\n  const [html, setHTML] = React.useState("");\n\n  /* Fetch and update HTML */\n  React.useEffect(async() => {\n    /* Fetch file */\n    const req = new XMLHttpRequest();\n    req.open("GET", "https://sheetjs.com/pres.numbers", true);\n    req.responseType = "arraybuffer";\n    req.onload = e => {\n      /* Parse file */\n      const wb = XLSX.read(new Uint8Array(req.response));\n      const ws = wb.Sheets[wb.SheetNames[0]];\n\n      /* Generate HTML */\n      setHTML(XLSX.utils.sheet_to_html(ws));\n    };\n    req.send();\n  }, []);\n\n  return (<div dangerouslySetInnerHTML={{__html: html}}/>);\n}\n'))),(0,r.kt)("p",null,"For uploading data, this demo populates a ",(0,r.kt)("inlineCode",{parentName:"p"},"FormData")," object with an ArrayBuffer\ngenerated with the ",(0,r.kt)("inlineCode",{parentName:"p"},"array")," output type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/* generate XLSX as array buffer */\nvar data = XLSX.write(workbook, {bookType: 'xlsx', type: 'array'});\n\n/* build FormData with the generated file */\nvar fd = new FormData();\nfd.append('data', new File([data], 'sheetjs.xlsx'));\n\n/* send data */\nvar req = new XMLHttpRequest();\nreq.open(\"POST\", url, true);\nreq.send(fd);\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Live Upload demo")," (click to show)"),(0,r.kt)("p",null,"This demo uses ",(0,r.kt)("inlineCode",{parentName:"p"},"XMLHttpRequest")," to upload data to ",(0,r.kt)("a",{parentName:"p",href:"https://s2c.sheetjs.com"},"https://s2c.sheetjs.com"),".  It\nwill parse the workbook and return an HTML table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function SheetJSXHRUL() {\n  const [html, setHTML] = React.useState("");\n  const [sz, setSz] = React.useState(0);\n  const csv = "a,b,c\\n1,2,3";\n  /* Fetch and update HTML */\n  const xport = React.useCallback(async() => {\n    /* Make Workbook from CSV */\n    const wb = XLSX.read(csv, { type: "string" });\n\n    /* Make FormData */\n    const data = XLSX.write(wb, {bookType: \'xlsx\', type: \'array\'});\n    setSz(data.length || data.byteLength);\n    const fdata = new FormData();\n    fdata.append(\'file\', new File([data], \'sheetjs.xlsx\'));\n\n    /* Upload */\n    const url = "https://s2c.sheetjs.com";\n    const req = new XMLHttpRequest();\n    req.open("POST", url, true);\n    req.onload = (e) => setHTML(req.responseText);\n    req.send(fdata);\n  });\n\n  return (<pre>\n    <b>CSV Data</b>\n    <div>{csv}</div>\n    {sz ? (<>\n      <b>Generated file size: {sz} bytes</b>\n      <div dangerouslySetInnerHTML={{__html: html}}/>\n    </>) : (<button onClick={xport}><b>Export and Upload!</b></button>)}\n  </pre>);\n}\n'))),(0,r.kt)("h3",{id:"fetch"},"fetch"),(0,r.kt)("p",null,"For downloading data, ",(0,r.kt)("inlineCode",{parentName:"p"},"Response#arrayBuffer")," resolves to an ",(0,r.kt)("inlineCode",{parentName:"p"},"ArrayBuffer")," that\ncan be converted to ",(0,r.kt)("inlineCode",{parentName:"p"},"Uint8Array")," and passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"XLSX.read"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'fetch(url).then(function(res) {\n  /* get the data as a Blob */\n  if(!res.ok) throw new Error("fetch failed");\n  return res.arrayBuffer();\n}).then(function(ab) {\n  /* parse the data when it is received */\n  var data = new Uint8Array(ab);\n  var workbook = XLSX.read(data, {type:"array"});\n\n  /* DO SOMETHING WITH workbook HERE */\n});\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Live Download demo")," (click to show)"),(0,r.kt)("p",null,"This demo uses ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch")," to download ",(0,r.kt)("a",{parentName:"p",href:"https://sheetjs.com/pres.numbers"},"https://sheetjs.com/pres.numbers")," and show\nthe data in an HTML table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function SheetJSFetchDL() {\n  const [html, setHTML] = React.useState("");\n\n  /* Fetch and update HTML */\n  React.useEffect(async() => {\n    /* Fetch file */\n    const res = await fetch("https://sheetjs.com/pres.numbers");\n    const ab = await res.arrayBuffer();\n\n    /* Parse file */\n    const wb = XLSX.read(ab);\n    const ws = wb.Sheets[wb.SheetNames[0]];\n\n    /* Generate HTML */\n    setHTML(XLSX.utils.sheet_to_html(ws));\n  }, []);\n\n  return (<div dangerouslySetInnerHTML={{__html: html}}/>);\n}\n'))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fetch")," takes a second parameter which allows for setting POST request body:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// assuming `fdata` is a FormData object from "Uploading Binary Data" section\nfetch("/upload", { method: "POST", body: fdata });\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Live Upload demo")," (click to show)"),(0,r.kt)("p",null,"This demo uses ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch")," to upload data to ",(0,r.kt)("a",{parentName:"p",href:"https://s2c.sheetjs.com"},"https://s2c.sheetjs.com"),".  It will parse\nthe workbook and return an HTML table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function SheetJSFetchUL() {\n  const [html, setHTML] = React.useState("");\n  const [sz, setSz] = React.useState(0);\n  const csv = "a,b,c\\n1,2,3";\n  /* Fetch and update HTML */\n  const xport = React.useCallback(async(e) => {\n    /* Make Workbook from CSV */\n    const wb = XLSX.read(csv, { type: "string" });\n    const data = XLSX.write(wb, {bookType: \'xlsx\', type: \'array\'});\n\n    /* Make FormData */\n    setSz(data.length || data.byteLength);\n    const fdata = new FormData();\n    fdata.append(\'file\', new File([data], \'sheetjs.xlsx\'));\n\n    /* Upload */\n    const url = "https://s2c.sheetjs.com";\n    const res = await fetch(url, {method:"POST", body: fdata});\n\n    /* Set HTML */\n    setHTML((await res.text()));\n  });\n\n  return (<pre>\n    <b>CSV Data</b>\n    <div>{csv}</div>\n    {sz ? (<>\n      <b>Generated file size: {sz} bytes</b>\n      <div dangerouslySetInnerHTML={{__html: html}}/>\n    </>) : (<button onClick={xport}><b>Export and Upload!</b></button>)}\n  </pre>);\n}\n'))),(0,r.kt)("h3",{id:"wrapper-libraries"},"Wrapper Libraries"),(0,r.kt)("p",null,"Before ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch")," shipped with browsers, there were various wrapper libraries to\nsimplify ",(0,r.kt)("inlineCode",{parentName:"p"},"XMLHttpRequest"),".  Due to limitations with ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch"),", these libraries\nare still relevant."),(0,r.kt)("h4",{id:"axios"},"axios"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"axios")," library presents a Promise interface. Setting ",(0,r.kt)("inlineCode",{parentName:"p"},"responseType")," to\n",(0,r.kt)("inlineCode",{parentName:"p"},"arraybuffer")," ensures the return type is an ArrayBuffer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"async function workbook_dl_axios(url) {\n  const res = await axios(url, {responseType:'arraybuffer'});\n  const workbook = XLSX.read(res.data);\n  return workbook;\n}\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Live Download demo")," (click to show)"),(0,r.kt)("p",null,"This demo uses ",(0,r.kt)("inlineCode",{parentName:"p"},"axios")," to download ",(0,r.kt)("a",{parentName:"p",href:"https://sheetjs.com/pres.numbers"},"https://sheetjs.com/pres.numbers")," and show\nthe data in an HTML table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function SheetJSAxiosDL() {\n  const [html, setHTML] = React.useState("");\n\n  /* Fetch and update HTML */\n  React.useEffect(async() => {\n    /* Fetch file */\n    const res = await axios("https://sheetjs.com/pres.numbers", {responseType: "arraybuffer"});\n\n    /* Parse file */\n    const wb = XLSX.read(res.data);\n    const ws = wb.Sheets[wb.SheetNames[0]];\n\n    /* Generate HTML */\n    setHTML(XLSX.utils.sheet_to_html(ws));\n  }, []);\n\n  return (<div dangerouslySetInnerHTML={{__html: html}}/>);\n}\n'))),(0,r.kt)("p",null,"Uploading form data is nearly identical to the ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch")," example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'axios("/upload", { method: "POST", data: fdata });\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Live Upload demo")," (click to show)"),(0,r.kt)("p",null,"This demo uses ",(0,r.kt)("inlineCode",{parentName:"p"},"axios")," to upload data to ",(0,r.kt)("a",{parentName:"p",href:"https://s2c.sheetjs.com"},"https://s2c.sheetjs.com"),".  It will parse\nthe workbook and return an HTML table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function SheetJSAxiosUL() {\n  const [html, setHTML] = React.useState("");\n  const [sz, setSz] = React.useState(0);\n  const csv = "a,b,c\\n1,2,3";\n  /* Fetch and update HTML */\n  const xport = React.useCallback(async() => {\n    /* Make Workbook from CSV */\n    const wb = XLSX.read(csv, { type: "string" });\n\n    /* Make FormData */\n    const data = XLSX.write(wb, {bookType: \'xlsx\', type: \'array\'});\n    setSz(data.length || data.byteLength);\n    const fdata = new FormData();\n    fdata.append(\'file\', new File([data], \'sheetjs.xlsx\'));\n\n    /* Upload */\n    const url = "https://s2c.sheetjs.com";\n    const res = await axios(url, {method:"POST", data: fdata});\n\n    /* Set HTML */\n    setHTML(res.data);\n  });\n\n  return (<pre>\n    <b>CSV Data</b>\n    <div>{csv}</div>\n    {sz ? (<>\n      <b>Generated file size: {sz} bytes</b>\n      <div dangerouslySetInnerHTML={{__html: html}}/>\n    </>) : (<button onClick={xport}><b>Export and Upload!</b></button>)}\n  </pre>);\n}\n'))),(0,r.kt)("h4",{id:"superagent"},"superagent"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"superagent")," library usage mirrors XHR:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/* set up an async GET request with superagent */\nsuperagent.get(url).responseType('arraybuffer').end(function(err, res) {\n  /* parse the data when it is received */\n  var data = new Uint8Array(res.body);\n  var workbook = XLSX.read(data, {type:\"array\"});\n\n  /* DO SOMETHING WITH workbook HERE */\n});\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Live Download demo")," (click to show)"),(0,r.kt)("p",null,"This demo uses ",(0,r.kt)("inlineCode",{parentName:"p"},"superagent")," to download ",(0,r.kt)("a",{parentName:"p",href:"https://sheetjs.com/pres.numbers"},"https://sheetjs.com/pres.numbers")," and\nshow the data in an HTML table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function SheetJSSuperAgentDL() {\n  const [html, setHTML] = React.useState("");\n\n  /* Fetch and update HTML */\n  React.useEffect(async() => {\n    /* Fetch file */\n    superagent\n      .get("https://sheetjs.com/pres.numbers")\n      .responseType("arraybuffer")\n      .end((err, res) => {\n        /* Parse file */\n        const wb = XLSX.read(res.body);\n        const ws = wb.Sheets[wb.SheetNames[0]];\n\n        /* Generate HTML */\n        setHTML(XLSX.utils.sheet_to_html(ws));\n      });\n  }, []);\n\n  return (<div dangerouslySetInnerHTML={{__html: html}}/>);\n}\n'))),(0,r.kt)("p",null,"The upload portion only differs in the actual request command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/* send data (fd is the FormData object) */\nsuperagent.post("/upload").send(fd);\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Live Upload demo")," (click to show)"),(0,r.kt)("p",null,"This demo uses ",(0,r.kt)("inlineCode",{parentName:"p"},"superagent")," to upload data to ",(0,r.kt)("a",{parentName:"p",href:"https://s2c.sheetjs.com"},"https://s2c.sheetjs.com"),".  It will\nparse the workbook and return an HTML table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function SheetJSSuperAgentUL() {\n  const [html, setHTML] = React.useState(\"\");\n  const [sz, setSz] = React.useState(0);\n  const csv = \"a,b,c\\n1,2,3\";\n  /* Fetch and update HTML */\n  const xport = React.useCallback(async() => {\n    /* Make Workbook from CSV */\n    const wb = XLSX.read(csv, { type: \"string\" });\n\n    /* Make FormData */\n    const data = XLSX.write(wb, {bookType: 'xlsx', type: 'array'});\n    setSz(data.length || data.byteLength);\n    const fdata = new FormData();\n    fdata.append('file', new File([data], 'sheetjs.xlsx'));\n\n    /* Upload */\n    const url = \"https://s2c.sheetjs.com\";\n    superagent.post(url).send(fdata).end((err, res) => {\n      /* Set HTML */\n      setHTML(res.text);\n    });\n\n  });\n\n  return (<pre>\n    <b>CSV Data</b>\n    <div>{csv}</div>\n    {sz ? (<>\n      <b>Generated file size: {sz} bytes</b>\n      <div dangerouslySetInnerHTML={{__html: html}}/>\n    </>) : (<button onClick={xport}><b>Export and Upload!</b></button>)}\n  </pre>);\n}\n"))))}c.isMDXComponent=!0}}]);