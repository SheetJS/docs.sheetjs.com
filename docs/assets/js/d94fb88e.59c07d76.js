"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6904],{9613:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(s,".").concat(m)]||p[m]||u[m]||i;return n?a.createElement(h,l(l({ref:t},d),{},{components:n})):a.createElement(h,l({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6330:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return u}});var a=n(2848),r=n(9213),i=(n(9496),n(9613)),l=["components"],o={sidebar_position:26,title:"Amazon Web Services"},s=void 0,c={unversionedId:"demos/aws",id:"demos/aws",title:"Amazon Web Services",description:"AWS is a Cloud Services platform which includes traditional virtual machine",source:"@site/docs/03-demos/26-aws.md",sourceDirName:"03-demos",slug:"/demos/aws",permalink:"/docs/demos/aws",draft:!1,tags:[],version:"current",sidebarPosition:26,frontMatter:{sidebar_position:26,title:"Amazon Web Services"},sidebar:"tutorialSidebar",previous:{title:"Azure Cloud Services",permalink:"/docs/demos/azure"},next:{title:"Local File Access",permalink:"/docs/demos/localfile"}},d={},u=[{value:"AWS Lambda Functions",id:"aws-lambda-functions",level:2},{value:"Reading Data",id:"reading-data",level:3},{value:"Writing Data",id:"writing-data",level:3},{value:"Demo",id:"demo",level:3},{value:"S3 Storage",id:"s3-storage",level:2},{value:"Reading Data",id:"reading-data-1",level:3},{value:"Writing Data",id:"writing-data-1",level:3}],p={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,'AWS is a Cloud Services platform which includes traditional virtual machine\nsupport, "Serverless Functions", cloud storage and much more.'),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"AWS iterates quickly and there is no guarantee that the referenced services\nwill be available in the future."))),(0,i.kt)("p",null,'This demo focuses on two key offerings: cloud storage ("S3") and the\n"Serverless Function" platform ("Lambda").'),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This was tested on 2022 August 21."))),(0,i.kt)("h2",{id:"aws-lambda-functions"},"AWS Lambda Functions"),(0,i.kt)("p",null,'In this demo, the "Function URL" (automatic API Gateway management) features\nare used.  Older deployments required special "Binary Media Types" to handle\nformats like XLSX.  At the time of testing, the configuration was not required.'),(0,i.kt)("h3",{id:"reading-data"},"Reading Data"),(0,i.kt)("p",null,"In the Lambda handler method, the ",(0,i.kt)("inlineCode",{parentName:"p"},"event.body")," attribute is a Base64-encoded\nstring.  The ",(0,i.kt)("inlineCode",{parentName:"p"},"busboy")," body parser can accept a decoded body."),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Code Sample")," (click to show)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const XLSX = require('xlsx');\nvar Busboy = require('busboy');\n\nexports.handler = function(event, context, callback) {\n  /* set up busboy */\n  var ctype = event.headers['Content-Type']||event.headers['content-type'];\n  var bb = Busboy({headers:{'content-type':ctype}});\n\n  /* busboy is evented; accumulate the fields and files manually */\n  var fields = {}, files = {};\n  bb.on('error', function(err) { callback(null, { body: err.message }); });\n  bb.on('field', function(fieldname, val) {fields[fieldname] = val });\n  // highlight-start\n  bb.on('file', function(fieldname, file, filename) {\n    /* concatenate the individual data buffers */\n    var buffers = [];\n    file.on('data', function(data) { buffers.push(data); });\n    file.on('end', function() { files[fieldname] = [Buffer.concat(buffers), filename]; });\n  });\n  // highlight-end\n\n  /* on the finish event, all of the fields and files are ready */\n  bb.on('finish', function() {\n    /* grab the first file */\n    var f = files[\"upload\"];\n    if(!f) callback(new Error(\"Must submit a file for processing!\"));\n\n    /* f[0] is a buffer */\n    // highlight-next-line\n    var wb = XLSX.read(f[0]);\n\n    /* grab first worksheet and convert to CSV */\n    var ws = wb.Sheets[wb.SheetNames[0]];\n    callback(null, { statusCode: 200, body: XLSX.utils.sheet_to_csv(ws) });\n  });\n\n  /* start the processing */\n  // highlight-next-line\n  bb.end(Buffer.from(event.body, \"base64\"));\n};\n"))),(0,i.kt)("h3",{id:"writing-data"},"Writing Data"),(0,i.kt)("p",null,"For safely transmitting binary data, the ",(0,i.kt)("inlineCode",{parentName:"p"},"base64")," type should be used.  Lambda\ncallback response ",(0,i.kt)("inlineCode",{parentName:"p"},"isBase64Encoded")," property forces a binary download:"),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Code Sample")," (click to show)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'var XLSX = require(\'xlsx\');\n\nexports.handler = function(event, context, callback) {\n  /* make workbook */\n  var wb = XLSX.read("S,h,e,e,t,J,S\\n5,4,3,3,7,9,5", {type: "binary"});\n  /* write to XLSX file in base64 encoding */\n  // highlight-next-line\n  var body = XLSX.write(wb, {type:"base64", bookType: "xlsx"});\n  /* mark as attached file */\n  var headers = { "Content-Disposition": \'attachment; filename="SheetJSLambda.xlsx"\'};\n  /* Send back data */\n  callback(null, {\n    statusCode: 200,\n    // highlight-next-line\n    isBase64Encoded: true,\n    body: body,\n    headers: headers\n  });\n};\n'))),(0,i.kt)("h3",{id:"demo"},"Demo"),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Complete Example")," (click to show)"),(0,i.kt)("p",null,"0) Review the quick start for JavaScript on AWS"),(0,i.kt)("p",null,"1) Create a new folder and download ",(0,i.kt)("a",{parentName:"p",href:"pathname:///aws/index.js"},(0,i.kt)("inlineCode",{parentName:"a"},"index.js")),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir SheetJSLambda\ncd SheetJSLambda\ncurl -LO https://docs.sheetjs.com/aws/index.js\n")),(0,i.kt)("p",null,"2) Install dependencies to the current directory;"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir node_modules\nnpm install https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz busboy\n")),(0,i.kt)("p",null,"3) Create a .zip package of the contents of the folder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yes | zip -c ../SheetJSLambda.zip -r .\n")),(0,i.kt)("p",null,"4) In the web interface for AWS Lambda, create a new Function with the options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Select "Author from scratch" (default choice when last verified)'),(0,i.kt)("li",{parentName:"ul"},'"Function Name": SheetJSLambda'),(0,i.kt)("li",{parentName:"ul"},'"Runtime": "Node.js" (select the version in the "Latest supported" block)'),(0,i.kt)("li",{parentName:"ul"},"Advanced Settings:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'check "Enable function URL"'),(0,i.kt)("li",{parentName:"ul"},"Auth type: NONE"),(0,i.kt)("li",{parentName:"ul"},'Check "Configure CORS"')),(0,i.kt)("p",null,'5) In the Interface, click "Upload from" and select ".zip file".  Click the\n"Upload" button in the modal, select SheetJSLambda.zip, and click "Save".'),(0,i.kt)("p",null,"At the time of writing, the ZIP is small enough that the Lambda code editor\nwill load the package."),(0,i.kt)("p",null,"6) Enable external access to the function."),(0,i.kt)("p",null,'Under Configuration > Function URL, click "Edit" and ensure that Auth type is\nset to NONE.  If it is not, select NONE and hit Save.'),(0,i.kt)("p",null,'Under Configuration > Permissions, scroll down to "Resource-based policy".\nIf no policy statements are defined, select "Add Permission" with the options:'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Select "Function URL" at the top'),(0,i.kt)("li",{parentName:"ul"},"Auth type: NONE"),(0,i.kt)("li",{parentName:"ul"},"Ensure that Statement ID is set to ",(0,i.kt)("inlineCode",{parentName:"li"},"FunctionURLAllowPublicAccess")),(0,i.kt)("li",{parentName:"ul"},"Ensure that Principal is set to ",(0,i.kt)("inlineCode",{parentName:"li"},"*")),(0,i.kt)("li",{parentName:"ul"},"Ensure that Action is set to ",(0,i.kt)("inlineCode",{parentName:"li"},"lambda:InvokeFunctionUrl"))),(0,i.kt)("p",null,'Click "Save" and a new Policy statement should be created.'),(0,i.kt)("p",null,'7) Find the Function URL (It is in the "Function Overview" section).'),(0,i.kt)("p",null,"Try to access that URL in a web browser and the site will try to download\n",(0,i.kt)("inlineCode",{parentName:"p"},"SheetJSLambda.xlsx"),".  Save and open the file to confirm it is valid."),(0,i.kt)("p",null,"To test parsing, download ",(0,i.kt)("a",{parentName:"p",href:"https://sheetjs.com/pres.numbers"},"https://sheetjs.com/pres.numbers")," and run"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST -F "upload=@pres.numbers" FUNCTION_URL\n')),(0,i.kt)("p",null,"The result should be a CSV output of the first sheet.")),(0,i.kt)("h2",{id:"s3-storage"},"S3 Storage"),(0,i.kt)("p",null,"The main module for S3 and all AWS services is ",(0,i.kt)("inlineCode",{parentName:"p"},"aws-sdk"),"."),(0,i.kt)("h3",{id:"reading-data-1"},"Reading Data"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"s3#getObject")," method returns an object with a ",(0,i.kt)("inlineCode",{parentName:"p"},"createReadStream")," method.\nBuffers can be concatenated and passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"XLSX.read"),":"),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Code Sample")," (click to show)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="SheetJSReadFromS3.mjs"',title:'"SheetJSReadFromS3.mjs"'},'var XLSX = require("xlsx");\nvar AWS = require(\'aws-sdk\');\n\n/* replace these constants */\nvar accessKeyId = "<REPLACE WITH ACCESS KEY ID>";\nvar secretAccessKey = "<REPLACE WITH SECRET ACCESS KEY>";\nvar Bucket = "<REPLACE WITH BUCKET NAME>";\nvar Key = "<REPLACE WITH KEY>";\n\n/* Get stream */\nvar s3 = new AWS.S3({\n  apiVersion: \'2006-03-01\',\n  credentials: {\n    accessKeyId: accessKeyId,\n    secretAccessKey: secretAccessKey\n  }\n});\nvar f = s3.getObject({ Bucket: Bucket, Key: Key }).createReadStream();\n\n/* collect data */\nvar bufs = [];\nf.on(\'data\', function(data) { bufs.push(data); });\nf.on(\'end\', function() {\n  /* concatenate and parse */\n  var wb = XLSX.read(Buffer.concat(bufs));\n  console.log(XLSX.utils.sheet_to_csv(wb.Sheets[wb.SheetNames[0]]));\n});\n'))),(0,i.kt)("h3",{id:"writing-data-1"},"Writing Data"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"S3#upload")," directly accepts a Buffer:"),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Code Sample")," (click to show)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="SheetJSWriteToS3.js"',title:'"SheetJSWriteToS3.js"'},'var XLSX = require("xlsx");\nvar AWS = require(\'aws-sdk\');\n\n/* replace these constants */\nvar accessKeyId = "<REPLACE WITH ACCESS KEY ID>";\nvar secretAccessKey = "<REPLACE WITH SECRET ACCESS KEY>";\nvar Bucket = "<REPLACE WITH BUCKET NAME>";\nvar Key = "<REPLACE WITH KEY>";\n\n/* Create a simple workbook and write XLSX to buffer */\nvar ws = XLSX.utils.aoa_to_sheet(["SheetJS".split(""), [5,4,3,3,7,9,5]]);\nvar wb = XLSX.utils.book_new(); XLSX.utils.book_append_sheet(wb, ws, "Sheet1");\nvar Body = XLSX.write(wb, {type: "buffer", bookType: "xlsx"});\n\n/* upload buffer */\nvar s3 = new AWS.S3({\n  apiVersion: \'2006-03-01\',\n  credentials: {\n    accessKeyId: accessKeyId,\n    secretAccessKey: secretAccessKey\n  }\n});\ns3.upload({ Bucket: Bucket, Key: Key, Body: Body }, function(err, data) {\n  if(err) throw err;\n  console.log("Uploaded to " + data.Location);\n});\n'))))}m.isMDXComponent=!0}}]);