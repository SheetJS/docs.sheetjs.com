"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8346],{9613:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8743:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var a=n(2848),r=n(9213),o=(n(9496),n(9613)),i=["components"],s={sidebar_position:25,title:"Azure Cloud Services"},l=void 0,c={unversionedId:"demos/azure",id:"demos/azure",title:"Azure Cloud Services",description:"Azure is a Cloud Services platform which includes traditional virtual machine",source:"@site/docs/03-demos/25-azure.md",sourceDirName:"03-demos",slug:"/demos/azure",permalink:"/docs/demos/azure",draft:!1,tags:[],version:"current",sidebarPosition:25,frontMatter:{sidebar_position:25,title:"Azure Cloud Services"},sidebar:"tutorialSidebar",previous:{title:"HTTP Server Processing",permalink:"/docs/demos/server"},next:{title:"Amazon Web Services",permalink:"/docs/demos/aws"}},u={},d=[{value:"Azure Functions",id:"azure-functions",level:2},{value:"Reading Data",id:"reading-data",level:3},{value:"Writing Data",id:"writing-data",level:3},{value:"Demo",id:"demo",level:3},{value:"Azure Blob Storage",id:"azure-blob-storage",level:2},{value:"Reading Data",id:"reading-data-1",level:3},{value:"Writing Data",id:"writing-data-1",level:3}],p={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,'Azure is a Cloud Services platform which includes traditional virtual machine\nsupport, "Serverless Functions", cloud storage and much more.'),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Azure iterates quickly and there is no guarantee that the referenced services\nwill be available in the future."))),(0,o.kt)("p",null,'This demo focuses on two key offerings: cloud storage ("Azure Blob Storage")\nand the "Serverless Function" platform ("Azure Functions").'),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"This was tested on 2022 August 21."))),(0,o.kt)("h2",{id:"azure-functions"},"Azure Functions"),(0,o.kt)("p",null,'This discussion focuses on the "HTTP Trigger" function type.'),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"To enable binary data processing, a setting must be changed in ",(0,o.kt)("inlineCode",{parentName:"p"},"function.json"),":"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="function.json"',title:'"function.json"'},'{\n  "bindings": [\n    {\n      "type": "httpTrigger",\n      "direction": "in",\n//highlight-next-line\n      "dataType": "binary",\n      "name": "req",\n')))),(0,o.kt)("h3",{id:"reading-data"},"Reading Data"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"formidable")," expects a stream and Azure does not present one.  It can be made:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const XLSX = require('xlsx');\nconst formidable = require('formidable');\nconst Readable = require('stream').Readable;\n\n/* formidable expects the request object to be a stream */\nconst streamify = (req) => {\n  if(typeof req.on !== 'undefined') return req;\n  const s = new Readable();\n  s._read = ()=>{};\n  s.push(Buffer.from(req.body));\n  s.push(null);\n  Object.assign(s, req);\n  return s;\n};\n\nmodule.exports = (context, req) => {\n  const form = new formidable.IncomingForm();\n  form.parse(streamify(req), (err, fields, files) => {\n    /* grab the first file */\n    var f = files[\"upload\"];\n    if(!f) {\n      context.res = { status: 400, body: \"Must submit a file for processing!\" };\n    } else {\n      /* file is stored in a temp directory, so we can point to that and read it */\n      const wb = XLSX.read(f.filepath, {type:\"file\"});\n\n      /* generate CSV from first sheet */\n      const csv = XLSX.utils.sheet_to_csv(wb.Sheets[wb.SheetNames[0]]);\n      context.res = { status: 200, body: csv };\n    }\n    context.done();\n  });\n}\n")),(0,o.kt)("h3",{id:"writing-data"},"Writing Data"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"body")," property can be a Buffer, like those generated by ",(0,o.kt)("inlineCode",{parentName:"p"},"XLSX.write"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const XLSX = require(\'xlsx\');\nmodule.exports = (context, req) => {\n  // generate XLSX file in a Buffer\n  var ws = XLSX.utils.aoa_to_sheet(["SheetJS".split(""), [5,4,3,3,7,9,5]]);\n  var wb = XLSX.utils.book_new(); XLSX.utils.book_append_sheet(wb, ws, "Data");\n  // highlight-next-line\n  var buf = XLSX.write(wb, {type: "buffer", bookType: "xlsx"});\n\n  // Set the body and Content-Disposition header\n  // highlight-start\n  context.res = {\n    status: 200,\n    headers: { "Content-Disposition": `attachment; filename="SheetJSAzure.xlsx";` },\n    body: buf\n  };\n  // highlight-end\n  context.done();\n};\n')),(0,o.kt)("h3",{id:"demo"},"Demo"),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Complete Example")," (click to show)"),(0,o.kt)("p",null,"0) Review the quick start for JavaScript on Azure Functions.  This involves\ninstalling the Azure Functions Core Tools and other dependencies."),(0,o.kt)("p",null,"1) Create a new project and install dependencies:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"func init sheetjs-azure --worker-runtime node --language javascript\ncd sheetjs-azure\nnpm i\nnpm i --save https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz formidable\n")),(0,o.kt)("p",null,'2) Create a new "HTTP Trigger" function:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'func new --template "Http Trigger" --name SheetJSAzure\n')),(0,o.kt)("p",null,"3) Edit ",(0,o.kt)("inlineCode",{parentName:"p"},"SheetJSAzure/function.json")," to add the ",(0,o.kt)("inlineCode",{parentName:"p"},'dataType: "binary"')," property:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="SheetJSAzure/function.json"',title:'"SheetJSAzure/function.json"'},'      "direction": "in",\n// highlight-next-line\n      "dataType": "binary",\n      "name": "req",\n')),(0,o.kt)("p",null,"4) Replace ",(0,o.kt)("inlineCode",{parentName:"p"},"SheetJSAzure/index.js")," with the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="SheetJSAzure/index.js"',title:'"SheetJSAzure/index.js"'},'/* sheetjs (C) 2013-present SheetJS -- http://sheetjs.com */\nconst XLSX = require(\'xlsx\');\nconst formidable = require(\'formidable\');\nconst Readable = require(\'stream\').Readable;\n\n/* formidable expects the request object to be a stream */\nconst streamify = (req) => {\n    if(typeof req.on !== \'undefined\') return req;\n    const s = new Readable();\n    s._read = ()=>{};\n    s.push(Buffer.from(req.body));\n    s.push(null);\n    Object.assign(s, req);\n    return s;\n};\n\nmodule.exports = (context, req) => {\n  if(req.method == "POST") {\n    const form = new formidable.IncomingForm();\n    form.parse(streamify(req), (err, fields, files) => {\n      /* grab the first file */\n      var f = files["upload"];\n      if(!f) {\n        context.res = { status: 400, body: "Must submit a file for processing!" };\n      } else {\n        /* file is stored in a temp directory, so we can point to that and read it */\n        const wb = XLSX.read(f.filepath, {type:"file"});\n\n        /* generate CSV from first sheet */\n        const csv = XLSX.utils.sheet_to_csv(wb.Sheets[wb.SheetNames[0]]);\n        context.res = { status: 200, body: csv };\n      }\n      context.done();\n    });\n  } else if(req.method == "GET") {\n    var ws = XLSX.utils.aoa_to_sheet(["SheetJS".split(""), [5,4,3,3,7,9,5]]);\n    var wb = XLSX.utils.book_new(); XLSX.utils.book_append_sheet(wb, ws, "Data");\n    var buf = XLSX.write(wb, {type: "buffer", bookType: "xlsx"});\n    context.res = {\n      status: 200,\n      headers: { "Content-Disposition": `attachment; filename="SheetJSAzure.xlsx";` },\n      body: buf\n    };\n    context.done();\n  } else {\n    context.res = { status: 500, body: `Unsupported method ${req.method}` };\n    context.done();\n  }\n};\n')),(0,o.kt)("p",null,"5) Test locally with ",(0,o.kt)("inlineCode",{parentName:"p"},"npm start")),(0,o.kt)("p",null,"To test uploads, download ",(0,o.kt)("a",{parentName:"p",href:"https://sheetjs.com/pres.numbers"},"https://sheetjs.com/pres.numbers")," and run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST -F "upload=@pres.numbers" http://localhost:7071/api/SheetJSAzure\n')),(0,o.kt)("p",null,"To test downloads, access http://localhost:7071/api/SheetJSAzure and download\nthe generated file.  Confirm it is a valid file."),(0,o.kt)("p",null,"6) Deploy to Azure.  Replace ",(0,o.kt)("inlineCode",{parentName:"p"},"NAME_OF_FUNCTION_APP")," with the name:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"func azure functionapp publish NAME_OF_FUNCTION_APP\n")),(0,o.kt)("p",null,"Get the function URL and test using the same sequence as in step 5.")),(0,o.kt)("h2",{id:"azure-blob-storage"},"Azure Blob Storage"),(0,o.kt)("p",null,"The main module for Azure Blob Storage is ",(0,o.kt)("inlineCode",{parentName:"p"},"@azure/storage-blob"),'. This example\nwas tested using the "Connection String" authentication method.  The strings\nare found in the Azure Portal under "Access Keys" for the storage account.'),(0,o.kt)("h3",{id:"reading-data-1"},"Reading Data"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"BlobClient#download")," method returns a Stream. After collecting into a\nBuffer, ",(0,o.kt)("inlineCode",{parentName:"p"},"XLSX.read")," can parse the data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="SheetJSReadFromAzure.mjs"',title:'"SheetJSReadFromAzure.mjs"'},'import { BlobServiceClient } from "@azure/storage-blob";\nimport { read, utils } from "xlsx";\n\n/* replace these constants */\nconst connStr = "<REPLACE WITH CONNECTION STRING>";\nconst containerName = "<REPLACE WITH CONTAINER NAME>";\nconst blobName = "<REPLACE WITH BLOB NAME>";\n\n/* get a readable stream*/\nconst blobServiceClient = BlobServiceClient.fromConnectionString(connStr);\nconst containerClient = blobServiceClient.getContainerClient(containerName);\nconst blobClient = containerClient.getBlobClient(blobName);\nconst response = (await blobClient.download()).readableStreamBody;\n\n/* collect data into a Buffer */\nconst bufs = [];\nfor await(const buf of response) bufs.push(buf);\nconst downloaded = Buffer.concat(bufs);\n\n/* parse downloaded buffer */\nconst wb = read(downloaded);\n/* print first worksheet */\nconsole.log(utils.sheet_to_csv(wb.Sheets[wb.SheetNames[0]]));\n')),(0,o.kt)("h3",{id:"writing-data-1"},"Writing Data"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"BlockBlobClient#upload")," directly accepts a Buffer:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="SheetJSWriteToAzure.mjs"',title:'"SheetJSWriteToAzure.mjs"'},'import { BlobServiceClient } from "@azure/storage-blob";\nimport { read, utils } from "xlsx";\n\n/* replace these constants */\nconst connStr = "<REPLACE WITH CONNECTION STRING>";\nconst containerName = "<REPLACE WITH CONTAINER NAME>";\nconst blobName = "<REPLACE WITH BLOB NAME>";\n\n/* Create a simple workbook and write XLSX to buffer */\nconst ws = utils.aoa_to_sheet(["SheetJS".split(""), [5,4,3,3,7,9,5]]);\nconst wb = utils.book_new(); utils.book_append_sheet(wb, ws, "Sheet1");\nconst buf = write(wb, {type: "buffer", bookType: "xlsx"});\n\n/* upload buffer */\nconst blobServiceClient = BlobServiceClient.fromConnectionString(connStr);\nconst containerClient = blobServiceClient.getContainerClient(containerName);\nconst blockBlobClient = containerClient.getBlockBlobClient(blobName);\nconst uploadBlobResponse = await blockBlobClient.upload(buf, buf.length);\n')))}m.isMDXComponent=!0}}]);