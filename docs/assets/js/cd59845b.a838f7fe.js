"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6882],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(t),m=i,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return t?a.createElement(h,r(r({ref:n},c),{},{components:t})):a.createElement(h,r({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>r});var a=t(7294),i=t(6010);const l="tabItem_Ymn6";function r(e){let{children:n,hidden:t,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(l,r),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>m});var a=t(7462),i=t(7294),l=t(6010),r=t(2389),o=t(7392),s=t(7094),p=t(2466);const c="tabList__CuJ",d="tabItem_LNqP";function u(e){var n;const{lazy:t,block:r,defaultValue:u,values:m,groupId:h,className:k}=e,g=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=m??g.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),w=(0,o.l)(f,((e,n)=>e.value===n.value));if(w.length>0)throw new Error(`Docusaurus error: Duplicate values "${w.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===u?u:u??(null==(n=g.find((e=>e.props.default)))?void 0:n.props.value)??g[0].props.value;if(null!==N&&!f.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:S}=(0,s.U)(),[v,x]=(0,i.useState)(N),y=[],{blockElementScrollPositionUntilNextRender:C}=(0,p.o5)();if(null!=h){const e=b[h];null!=e&&e!==v&&f.some((n=>n.value===e))&&x(e)}const T=e=>{const n=e.currentTarget,t=y.indexOf(n),a=f[t].value;a!==v&&(C(n),x(a),null!=h&&S(h,String(a)))},j=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=y.indexOf(e.currentTarget)+1;t=y[n]??y[0];break}case"ArrowLeft":{const n=y.indexOf(e.currentTarget)-1;t=y[n]??y[y.length-1];break}}null==(n=t)||n.focus()};return i.createElement("div",{className:(0,l.Z)("tabs-container",c)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":r},k)},f.map((e=>{let{value:n,label:t,attributes:r}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:v===n?0:-1,"aria-selected":v===n,key:n,ref:e=>y.push(e),onKeyDown:j,onFocus:T,onClick:T},r,{className:(0,l.Z)("tabs__item",d,null==r?void 0:r.className,{"tabs__item--active":v===n})}),t??n)}))),t?(0,i.cloneElement)(g.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},g.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==v})))))}function m(e){const n=(0,r.Z)();return i.createElement(u,(0,a.Z)({key:String(n)},e))}},855:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>d});var a=t(7462),i=(t(7294),t(3905)),l=t(5488),r=t(5162);const o={title:"Desktop Applications"},s=void 0,p={unversionedId:"demos/desktop",id:"demos/desktop",title:"Desktop Applications",description:"Web technologies like JavaScript and HTML have been adapted to the traditional",source:"@site/docs/03-demos/03-desktop.md",sourceDirName:"03-demos",slug:"/demos/desktop",permalink:"/docs/demos/desktop",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Desktop Applications"},sidebar:"tutorialSidebar",previous:{title:"iOS and Android Apps",permalink:"/docs/demos/mobile"},next:{title:"Data Grids and Tables",permalink:"/docs/demos/grid"}},c={},d=[{value:"NW.js",id:"nwjs",level:2},{value:"Reading data",id:"reading-data",level:3},{value:"Writing data",id:"writing-data",level:3},{value:"Electron",id:"electron",level:2},{value:"Writing Files",id:"writing-files",level:3},{value:"Reading Files",id:"reading-files",level:3},{value:"Electron Breaking Changes",id:"electron-breaking-changes",level:3},{value:"Tauri",id:"tauri",level:2},{value:"Reading Files",id:"reading-files-1",level:3},{value:"Writing Files",id:"writing-files-1",level:3},{value:"Wails",id:"wails",level:2},{value:"Reading Files",id:"reading-files-2",level:3},{value:"Go",id:"go",level:4},{value:"JS",id:"js",level:4},{value:"Writing Files",id:"writing-files-2",level:3},{value:"Go",id:"go-1",level:5},{value:"JS",id:"js-1",level:4},{value:"NeutralinoJS",id:"neutralinojs",level:2},{value:"Reading Files",id:"reading-files-3",level:3},{value:"Writing Files",id:"writing-files-3",level:3},{value:"React Native Windows",id:"react-native-windows",level:2},{value:"Reading Files",id:"reading-files-4",level:3},{value:"React Native MacOS",id:"react-native-macos",level:2},{value:"Reading Files",id:"reading-files-5",level:3}],u={toc:d};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Web technologies like JavaScript and HTML have been adapted to the traditional\napp space.  Typically these frameworks bundle a JavaScript engine as well as a\nwindowing framework. SheetJS is compatible with many app frameworks."),(0,i.kt)("h2",{id:"nwjs"},"NW.js"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"../getting-started/installation/standalone"},"Standalone scripts")," can be\nreferenced in a ",(0,i.kt)("inlineCode",{parentName:"p"},"SCRIPT")," tag from the entry point HTML page."),(0,i.kt)("p",null,"This demo was tested against NW.js 0.66.0."),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Complete Example")," (click to show)"),(0,i.kt)("p",null,"1) Create a ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," file that specifies the entry point:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  "name": "sheetjs-nwjs",\n  "author": "sheetjs",\n  "version": "0.0.0",\n  "main": "index.html",\n  "dependencies": {\n    "nw": "~0.66.0",\n    "xlsx": "https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz"\n  }\n}\n')),(0,i.kt)("p",null,"2) Download ",(0,i.kt)("a",{parentName:"p",href:"pathname:///nwjs/index.html"},(0,i.kt)("inlineCode",{parentName:"a"},"index.html"))," into the same folder."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},'Right-click the link and select "Save Link As...".  Left-clicking the link will\ntry to load the page in your browser.  The goal is to save the file contents.')),(0,i.kt)("p",null,"3) Run ",(0,i.kt)("inlineCode",{parentName:"p"},"npm install")," to install dependencies"),(0,i.kt)("p",null,"4) To verify the app works, run in the test environment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npx nw .\n")),(0,i.kt)("p",null,"The app will show and you should be able to verify reading and writing by using\nthe file input element to select a spreadsheet and clicking the export button."),(0,i.kt)("p",null,"5) To build a standalone app, run the builder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npx -p nw-builder nwbuild --mode=build .\n")),(0,i.kt)("p",null,"This will generate the standalone app in the ",(0,i.kt)("inlineCode",{parentName:"p"},"build\\sheetjs-nwjs\\")," folder.")),(0,i.kt)("h3",{id:"reading-data"},"Reading data"),(0,i.kt)("p",null,"The standard HTML5 ",(0,i.kt)("inlineCode",{parentName:"p"},"FileReader")," techniques from the browser apply to NW.js!"),(0,i.kt)("p",null,"NW.js handles the OS minutiae for dragging files into app windows.  The\n",(0,i.kt)("a",{parentName:"p",href:"../solutions/input#example-user-submissions"},"drag and drop snippet")," apply\nto DIV elements on the page."),(0,i.kt)("p",null,"Similarly, file input elements automatically map to standard Web APIs."),(0,i.kt)("p",null,"For example, assuming a file input element on the page:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<input type="file" name="xlfile" id="xlf" />\n')),(0,i.kt)("p",null,"The event handler would process the event as if it were a web event:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'async function handleFile(e) {\n  const file = e.target.files[0];\n  const data = await file.arrayBuffer();\n  /* data is an ArrayBuffer */\n  const workbook = XLSX.read(data);\n\n  /* DO SOMETHING WITH workbook HERE */\n}\ndocument.getElementById("xlf").addEventListener("change", handleFile, false);\n')),(0,i.kt)("h3",{id:"writing-data"},"Writing data"),(0,i.kt)("p",null,"File input elements with the attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"nwsaveas"),' show UI for saving a file. The\nstandard trick is to generate a hidden file input DOM element and "click" it.\nSince NW.js does not present a ',(0,i.kt)("inlineCode",{parentName:"p"},"writeFileSync")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"fs")," package, a manual\nstep is required:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"/* pre-build the hidden nwsaveas input element */\nvar input = document.createElement('input');\ninput.style.display = 'none';\ninput.setAttribute('nwsaveas', 'SheetJSNWDemo.xlsx');\ninput.setAttribute('type', 'file');\ndocument.body.appendChild(input);\n\n/* show a message if the save is canceled */\ninput.addEventListener('cancel',function(){ alert(\"Save was canceled!\"); });\n\n/* write to a file on the 'change' event */\ninput.addEventListener('change',function(e){\n  /* the `value` is the path that the program will write */\n  var filename = this.value;\n\n  /* use XLSX.write with type \"buffer\" to generate a buffer\" */\n  /* highlight-next-line */\n  var wbout = XLSX.write(workbook, {type:'buffer', bookType:\"xlsx\"});\n  /* highlight-next-line */\n  fs.writeFile(filename, wbout, function(err) {\n    if(!err) return alert(\"Saved to \" + filename);\n    alert(\"Error: \" + (err.message || err));\n  });\n});\n\ninput.click();\n")),(0,i.kt)("h2",{id:"electron"},"Electron"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"../getting-started/installation/nodejs"},"NodeJS Module")," can be imported\nfrom the main or the renderer thread."),(0,i.kt)("p",null,"Electron presents a ",(0,i.kt)("inlineCode",{parentName:"p"},"fs")," module.  The ",(0,i.kt)("inlineCode",{parentName:"p"},"require('xlsx')")," call loads the CommonJS\nmodule, so ",(0,i.kt)("inlineCode",{parentName:"p"},"XLSX.readFile")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"XLSX.writeFile")," work in the renderer thread."),(0,i.kt)("p",null,"This demo was tested against Electron 19.0.5 on an Intel Mac (",(0,i.kt)("inlineCode",{parentName:"p"},"darwin-x64"),")."),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Complete Example")," (click to show)"),(0,i.kt)("p",null,"This demo includes a drag-and-drop box as well as a file input box, mirroring\nthe ",(0,i.kt)("a",{parentName:"p",href:"http://oss.sheetjs.com/sheetjs/"},"SheetJS Data Preview Live Demo")),(0,i.kt)("p",null,"The core data in this demo is an editable HTML table.  The readers build up the\ntable using ",(0,i.kt)("inlineCode",{parentName:"p"},"sheet_to_html")," (with ",(0,i.kt)("inlineCode",{parentName:"p"},"editable:true")," option) and the writers scrape\nthe table using ",(0,i.kt)("inlineCode",{parentName:"p"},"table_to_book"),"."),(0,i.kt)("p",null,"The demo project is wired for ",(0,i.kt)("inlineCode",{parentName:"p"},"electron-forge")," to build the standalone binary."),(0,i.kt)("p",null,"1) Download the demo files:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"pathname:///electron/package.json"},(0,i.kt)("inlineCode",{parentName:"a"},"package.json"))," : project structure"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"pathname:///electron/main.js"},(0,i.kt)("inlineCode",{parentName:"a"},"main.js"))," : main process script"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"pathname:///electron/index.html"},(0,i.kt)("inlineCode",{parentName:"a"},"index.html"))," : window page"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"pathname:///electron/index.js"},(0,i.kt)("inlineCode",{parentName:"a"},"index.js"))," : script loaded in render context")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},'Right-click each link and select "Save Link As...".  Left-clicking a link will\ntry to load the page in your browser.  The goal is to save the file contents.')),(0,i.kt)("p",null,"2) Run ",(0,i.kt)("inlineCode",{parentName:"p"},"npm install")," to install dependencies."),(0,i.kt)("p",null,"3) To verify the app works, run in the test environment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx -y electron .\n")),(0,i.kt)("p",null,"The app will show and you should be able to verify reading and writing by using\nthe relevant buttons to open files and clicking the export button."),(0,i.kt)("p",null,"4) To build a standalone app, run the builder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm run make\n")),(0,i.kt)("p",null,"This will generate the standalone app in the ",(0,i.kt)("inlineCode",{parentName:"p"},"out\\sheetjs-electron-...")," folder.\nFor a recent Intel Mac, the path will be ",(0,i.kt)("inlineCode",{parentName:"p"},"out/sheetjs-electron-darwin-x64/"))),(0,i.kt)("h3",{id:"writing-files"},"Writing Files"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../api/write-options"},(0,i.kt)("inlineCode",{parentName:"a"},"XLSX.writeFile"))," writes workbooks to the file system.\n",(0,i.kt)("inlineCode",{parentName:"p"},"showSaveDialog")," shows a Save As dialog and returns the selected file name:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'/* from the renderer thread */\nconst electron = require(\'@electron/remote\');\n\n/* this function will show the save dialog and try to write the workbook */\nasync function exportFile(workbook) {\n  /* show Save As dialog */\n  const result = await electron.dialog.showSaveDialog({\n    title: \'Save file as\',\n    filters: [{\n      name: "Spreadsheets",\n      extensions: ["xlsx", "xls", "xlsb", /* ... other formats ... */]\n    }]\n  });\n  /* write file */\n  // highlight-next-line\n  XLSX.writeFile(workbook, result.filePath);\n}\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"In older versions of Electron, ",(0,i.kt)("inlineCode",{parentName:"p"},"showSaveDialog")," returned the path directly:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var dialog = require('electron').remote.dialog;\n\nfunction exportFile(workbook) {\n  var result = dialog.showSaveDialog();\n  XLSX.writeFile(workbook, result);\n}\n"))),(0,i.kt)("h3",{id:"reading-files"},"Reading Files"),(0,i.kt)("p",null,"Electron offers 3 different ways to read files, two of which use Web APIs."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"File Input Element")),(0,i.kt)("p",null,"File input elements automatically map to standard Web APIs."),(0,i.kt)("p",null,"For example, assuming a file input element on the page:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<input type="file" name="xlfile" id="xlf" />\n')),(0,i.kt)("p",null,"The event handler would process the event as if it were a web event:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'async function handleFile(e) {\n  const file = e.target.files[0];\n  const data = await file.arrayBuffer();\n  /* data is an ArrayBuffer */\n  const workbook = XLSX.read(data);\n\n  /* DO SOMETHING WITH workbook HERE */\n}\ndocument.getElementById("xlf").addEventListener("change", handleFile, false);\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Drag and Drop")),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"../solutions/input#example-user-submissions"},"drag and drop snippet"),"\napplies to DIV elements on the page."),(0,i.kt)("p",null,"For example, assuming a DIV on the page:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<div id="drop">Drop a spreadsheet file here to see sheet data</div>\n')),(0,i.kt)("p",null,"The event handler would process the event as if it were a web event:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'async function handleDrop(e) {\n  e.stopPropagation();\n  e.preventDefault();\n\n  const file = e.dataTransfer.files[0];\n  const data = await file.arrayBuffer();\n  /* data is an ArrayBuffer */\n  const workbook = XLSX.read(data);\n\n  /* DO SOMETHING WITH workbook HERE */\n}\ndocument.getElementById("drop").addEventListener("drop", handleDrop, false);\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Electron API")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../api/parse-options"},(0,i.kt)("inlineCode",{parentName:"a"},"XLSX.readFile"))," reads workbooks from the file system.\n",(0,i.kt)("inlineCode",{parentName:"p"},"showOpenDialog")," shows a Save As dialog and returns the selected file name.\nUnlike the Web APIs, the ",(0,i.kt)("inlineCode",{parentName:"p"},"showOpenDialog")," flow can be initiated by app code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'/* from the renderer thread */\nconst electron = require(\'@electron/remote\');\n\n/* this function will show the open dialog and try to parse the workbook */\nasync function importFile() {\n  /* show Save As dialog */\n  const result = await electron.dialog.showOpenDialog({\n    title: \'Select a file\',\n    filters: [{\n      name: "Spreadsheets",\n      extensions: ["xlsx", "xls", "xlsb", /* ... other formats ... */]\n    }]\n  });\n  /* result.filePaths is an array of selected files */\n  if(result.filePaths.length == 0) throw new Error("No file was selected!");\n  // highlight-next-line\n  return XLSX.readFile(result.filePaths[0]);\n}\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"In older versions of Electron, ",(0,i.kt)("inlineCode",{parentName:"p"},"showOpenDialog")," returned the path directly:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var dialog = require('electron').remote.dialog;\n\nfunction importFile(workbook) {\n  var result = dialog.showOpenDialog({ properties: ['openFile'] });\n  return XLSX.readFile(result[0]);\n}\n"))),(0,i.kt)("h3",{id:"electron-breaking-changes"},"Electron Breaking Changes"),(0,i.kt)("p",null,"The first version of this demo used Electron 1.7.5.  The current demo includes\nthe required changes for Electron 19.0.5."),(0,i.kt)("p",null,"There are no Electron-specific workarounds in the library, but Electron broke\nbackwards compatibility multiple times.  A summary of changes is noted below."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Electron 6.x changed the ",(0,i.kt)("inlineCode",{parentName:"p"},"dialog")," API. Methods like ",(0,i.kt)("inlineCode",{parentName:"p"},"showSaveDialog")," originally\nreturned an array of strings, but now returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),".  This change was not\ndocumented. ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/electron/electron/issues/24438"},"Electron issue")),(0,i.kt)("p",{parentName:"admonition"},"Electron 9.0.0 and later require the preference ",(0,i.kt)("inlineCode",{parentName:"p"},"nodeIntegration: true")," in order\nto ",(0,i.kt)("inlineCode",{parentName:"p"},"require('xlsx')")," in the renderer process."),(0,i.kt)("p",{parentName:"admonition"},"Electron 12.0.0 and later also require ",(0,i.kt)("inlineCode",{parentName:"p"},"worldSafeExecuteJavascript: true")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"contextIsolation: true"),"."),(0,i.kt)("p",{parentName:"admonition"},"Electron 14+ must use ",(0,i.kt)("inlineCode",{parentName:"p"},"@electron/remote")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"remote"),".  An ",(0,i.kt)("inlineCode",{parentName:"p"},"initialize"),"\ncall is required to enable Developer Tools in the window.")),(0,i.kt)("h2",{id:"tauri"},"Tauri"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"../getting-started/installation/nodejs"},"NodeJS Module")," can be imported\nfrom JavaScript code."),(0,i.kt)("p",null,"This demo was tested against Tauri 1.0.5 on 2022 August 13."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Tauri currently does not provide the equivalent of NodeJS ",(0,i.kt)("inlineCode",{parentName:"p"},"fs")," module.  The raw\n",(0,i.kt)("inlineCode",{parentName:"p"},"@tauri-apps/api")," methods used in the examples are not expected to change.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"http")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"dialog")," must be explicitly allowed in ",(0,i.kt)("inlineCode",{parentName:"p"},"tauri.conf.json"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tauri.conf.json"',title:'"tauri.conf.json"'},'    "allowlist": {\n      "all": true,\n      "http": {\n        "all": true,\n        "request": true,\n        "scope": ["https://**"]\n      },\n      "dialog": {\n        "all": true\n      }\n')),(0,i.kt)("p",null,'The "Complete Example" creates an app that looks like the screenshot:'),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/tauri/macos.png",alt:"SheetJS Tauri MacOS screenshot"})),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Complete Example")," (click to show)"),(0,i.kt)("p",null,"0) ",(0,i.kt)("a",{parentName:"p",href:"https://tauri.app/v1/guides/getting-started/prerequisites"},'Read Tauri "Getting Started" guide and install dependencies.')),(0,i.kt)("p",null,"1) Create a new Tauri app:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm create tauri-app\n")),(0,i.kt)("p",null,"When prompted:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"App Name: ",(0,i.kt)("inlineCode",{parentName:"li"},"SheetJSTauri")),(0,i.kt)("li",{parentName:"ul"},"Window Title: ",(0,i.kt)("inlineCode",{parentName:"li"},"SheetJS + Tauri")),(0,i.kt)("li",{parentName:"ul"},"UI recipe: ",(0,i.kt)("inlineCode",{parentName:"li"},"create-vite")),(0,i.kt)("li",{parentName:"ul"},'Add "@tauri-apps/api": ',(0,i.kt)("inlineCode",{parentName:"li"},"Y")),(0,i.kt)("li",{parentName:"ul"},"ViteJS template: ",(0,i.kt)("inlineCode",{parentName:"li"},"vue-ts"))),(0,i.kt)("p",null,"2) Enter the directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd SheetJSTauri\n")),(0,i.kt)("p",null,"Open ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," with a text editor and add the highlighted lines:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  "name": "SheetJSTauri",\n  "private": true,\n  "version": "0.0.0",\n  "type": "module",\n  "scripts": {\n    "dev": "vite",\n    "build": "vue-tsc --noEmit && vite build",\n    "preview": "vite preview",\n    "tauri": "tauri"\n  },\n  "dependencies": {\n// highlight-next-line\n    "@tauri-apps/api": "^1.0.2",\n    "vue": "^3.2.37",\n// highlight-next-line\n    "xlsx": "https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz"\n  },\n  "devDependencies": {\n// highlight-next-line\n    "@tauri-apps/cli": "^1.0.5",\n    "@vitejs/plugin-vue": "^3.0.3",\n    "typescript": "^4.6.4",\n    "vite": "^3.0.7",\n    "vue-tsc": "^0.39.5"\n  }\n}\n')),(0,i.kt)("p",null,"3) Install dependencies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz\n")),(0,i.kt)("p",null,"4) Enable operations by adding the highlighted lines to ",(0,i.kt)("inlineCode",{parentName:"p"},"tauri.conf.json"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="src-tauri/tauri.conf.json"',title:'"src-tauri/tauri.conf.json"'},'  "tauri": {\n    "allowlist": {\n// highlight-start\n      "http": {\n        "all": true,\n        "request": true,\n        "scope": ["https://**"]\n      },\n      "dialog": {\n        "all": true\n      },\n// highlight-end\n      "all": true\n    }\n')),(0,i.kt)("p",null,"In the same file, look for the ",(0,i.kt)("inlineCode",{parentName:"p"},'"identifier"')," key and replace the value with ",(0,i.kt)("inlineCode",{parentName:"p"},"com.sheetjs.tauri"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="src-tauri/tauri.conf.json"',title:'"src-tauri/tauri.conf.json"'},'        "icons/icon.ico"\n      ],\n      // highlight-next-line\n      "identifier": "com.sheetjs.tauri",\n      "longDescription": "",\n')),(0,i.kt)("p",null,"5) Download ",(0,i.kt)("a",{parentName:"p",href:"pathname:///tauri/App.vue"},(0,i.kt)("inlineCode",{parentName:"a"},"App.vue"))," and replace ",(0,i.kt)("inlineCode",{parentName:"p"},"src/App.vue"),"\nwith the downloaded script."),(0,i.kt)("p",null,"6) Build the app with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm run tauri build\n")),(0,i.kt)("p",null,"At the end, it will print the path to the generated program. Run the program!")),(0,i.kt)("h3",{id:"reading-files-1"},"Reading Files"),(0,i.kt)("p",null,"There are two steps to reading files: obtaining a path and reading binary data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { read } from \'xlsx\';\nimport { open } from \'@tauri-apps/api/dialog\';\nimport { readBinaryFile } from \'@tauri-apps/api/fs\';\n\nconst filters = [\n  {name: "Excel Binary Workbook", extensions: ["xlsb"]},\n  {name: "Excel Workbook", extensions: ["xlsx"]},\n  {name: "Excel 97-2004 Workbook", extensions: ["xls"]},\n  // ... other desired formats ...\n];\n\nasync function openFile() {\n  /* show open file dialog */\n  const selected = await open({\n    title: "Open Spreadsheet",\n    multiple: false,\n    directory: false,\n    filters\n  });\n\n  /* read data into a Uint8Array */\n  const d = await readBinaryFile(selected);\n\n  /* parse with SheetJS */\n  const wb = read(d);\n  return wb;\n}\n')),(0,i.kt)("h3",{id:"writing-files-1"},"Writing Files"),(0,i.kt)("p",null,"There are two steps to writing files: obtaining a path and writing binary data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { write } from \'xlsx\';\nimport { save } from \'@tauri-apps/api/dialog\';\nimport { writeBinaryFile } from \'@tauri-apps/api/fs\';\n\nconst filters = [\n  {name: "Excel Binary Workbook", extensions: ["xlsb"]},\n  {name: "Excel Workbook", extensions: ["xlsx"]},\n  {name: "Excel 97-2004 Workbook", extensions: ["xls"]},\n  // ... other desired formats ...\n];\n\nasync function saveFile(wb) {\n  /* show save file dialog */\n  const selected = await save({\n    title: "Save to Spreadsheet",\n    filters\n  });\n\n  /* Generate workbook */\n  const bookType = selected.slice(selected.lastIndexOf(".") + 1);\n  const d = write(wb, {type: "buffer", bookType});\n\n  /* save data to file */\n  await writeBinaryFile(selected, d);\n}\n')),(0,i.kt)("h2",{id:"wails"},"Wails"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"../getting-started/installation/nodejs"},"NodeJS Module")," can be imported\nfrom JavaScript code."),(0,i.kt)("p",null,"This demo was tested against Wails ",(0,i.kt)("inlineCode",{parentName:"p"},"v2.0.0-beta.44.2")," on 2022 August 31 using\nthe Svelte TypeScript starter."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Wails currently does not provide the equivalent of NodeJS ",(0,i.kt)("inlineCode",{parentName:"p"},"fs")," module."),(0,i.kt)("p",{parentName:"admonition"},"The HTML File Input Element does not show a file picker.  This is a known bug."),(0,i.kt)("p",{parentName:"admonition"},"All raw file operations must be performed in Go code.")),(0,i.kt)("p",null,'The "Complete Example" creates an app that looks like the screenshot:'),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/wails/macos.png",alt:"SheetJS Wails MacOS screenshot"})),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Complete Example")," (click to show)"),(0,i.kt)("p",null,"0) ",(0,i.kt)("a",{parentName:"p",href:"https://wails.io/docs/gettingstarted/installation"},'Read Wails "Getting Started" guide and install dependencies.')),(0,i.kt)("p",null,"1) Create a new Wails app:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"wails init -n sheetjs-wails -t svelte-ts\n")),(0,i.kt)("p",null,"2) Enter the directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd sheetjs-wails\n")),(0,i.kt)("p",null,"3) Install front-end dependencies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd frontend\ncurl -L -o src/assets/logo.png https://sheetjs.com/sketch1024.png\nnpm i --save https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz\ncd ..\n")),(0,i.kt)("p",null,"4) Download source files:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Download ",(0,i.kt)("a",{parentName:"li",href:"pathname:///wails/app.go"},(0,i.kt)("inlineCode",{parentName:"a"},"app.go"))," and replace ",(0,i.kt)("inlineCode",{parentName:"li"},"app.go")),(0,i.kt)("li",{parentName:"ul"},"Download ",(0,i.kt)("a",{parentName:"li",href:"pathname:///wails/App.svelte"},(0,i.kt)("inlineCode",{parentName:"a"},"App.svelte"))," and replace\n",(0,i.kt)("inlineCode",{parentName:"li"},"frontend/src/App.svelte"))),(0,i.kt)("p",null,"5) Build the app with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"wails build\n")),(0,i.kt)("p",null,"At the end, it will print the path to the generated program. Run the program!")),(0,i.kt)("p",null,"All operations must be run from Go code.  This example passes Base64 strings."),(0,i.kt)("h3",{id:"reading-files-2"},"Reading Files"),(0,i.kt)("p",null,"The file picker and reading operations can be combined in one Go function."),(0,i.kt)("h4",{id:"go"},"Go"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'import (\n  "context"\n// highlight-start\n  "encoding/base64"\n  "io/ioutil"\n  "github.com/wailsapp/wails/v2/pkg/runtime"\n// highlight-end\n)\n\ntype App struct {\n  ctx context.Context\n}\n\n// ReadFile shows an open file dialog and returns the data as Base64 string\nfunc (a *App) ReadFile() string {\n  // highlight-next-line\n  selection, err := runtime.OpenFileDialog(a.ctx, runtime.OpenDialogOptions{\n    Title: "Select File",\n    Filters: []runtime.FileFilter{\n      { DisplayName: "Excel Workbooks (*.xlsx)", Pattern: "*.xlsx", },\n      // ... more filters for more file types\n    },\n  })\n  if err != nil { return "" } // The demo app shows an error message\n  // highlight-next-line\n  data, err := ioutil.ReadFile(selection)\n  if err != nil { return "" } // The demo app shows an error message\n  // highlight-next-line\n  return base64.StdEncoding.EncodeToString(data)\n}\n')),(0,i.kt)("h4",{id:"js"},"JS"),(0,i.kt)("p",null,"Wails will automatically create ",(0,i.kt)("inlineCode",{parentName:"p"},"window.go.main.App.ReadFile")," for use in JS:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="frontend/src/App.svelte"',title:'"frontend/src/App.svelte"'},"import { read, utils } from 'xlsx';\n\nasync function importFile(evt) {\n// highlight-start\n  const b64 = window['go']['main']['App']['ReadFile']();\n  const wb = read(b64, { type: \"base64\" });\n// highlight-end\n  const ws = wb.Sheets[wb.SheetNames[0]]; // get the first worksheet\n  html = utils.sheet_to_html(ws); // generate HTML and update state\n}\n")),(0,i.kt)("h3",{id:"writing-files-2"},"Writing Files"),(0,i.kt)("p",null,"There is a multi-part dance since the library needs the file extension."),(0,i.kt)("p",null,"1) Show the save file picker in Go, pass back to JS"),(0,i.kt)("p",null,"2) Generate the file data in JS, pass the data back to Go"),(0,i.kt)("p",null,"3) Write to file in Go"),(0,i.kt)("h5",{id:"go-1"},"Go"),(0,i.kt)("p",null,"Two Go functions will be exposed."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SaveFile")," will show the file picker and return the path:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'import (\n  "context"\n// highlight-start\n  "github.com/wailsapp/wails/v2/pkg/runtime"\n// highlight-end\n)\n\ntype App struct {\n  ctx context.Context\n}\n\nfunc (a *App) SaveFile() string {\n// highlight-next-line\n  selection, err := runtime.SaveFileDialog(a.ctx, runtime.SaveDialogOptions{\n    Title: "Select File",\n    DefaultFilename: "SheetJSWails.xlsx",\n    Filters: []runtime.FileFilter{\n      { DisplayName: "Excel Workbooks (*.xlsx)", Pattern: "*.xlsx", },\n      // ... more filters for more file types\n    },\n  })\n  if err != nil { return "" } // The demo app shows an error message\n  return selection\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"WriteFile")," performs the file write given a Base64 string and file path:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'import (\n  "context"\n// highlight-start\n  "encoding/base64"\n  "io/ioutil"\n// highlight-end\n)\n\ntype App struct {\n  ctx context.Context\n}\n\nfunc (a *App) WriteFile(b64 string, path string) {\n  // highlight-start\n  buf, _ := base64.StdEncoding.DecodeString(b64);\n  _ = ioutil.WriteFile(path, buf, 0644);\n  // highlight-end\n}\n')),(0,i.kt)("h4",{id:"js-1"},"JS"),(0,i.kt)("p",null,"Wails will automatically create bindings for use in JS:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { utils, write } from 'xlsx';\n\nasync function exportFile(wb) {\n  /* generate workbook */\n  const elt = tbl.getElementsByTagName(\"TABLE\")[0];\n  const wb = utils.table_to_book(elt);\n\n  /* show save picker and get path */\n  const path = await window['go']['main']['App']['SaveFile']();\n\n  /* generate base64 string based on the path */\n  const b64 = write(wb, { bookType: path.slice(path.lastIndexOf(\".\")+1), type: \"base64\" });\n\n  /* write to file */\n  await window['go']['main']['App']['WriteFile'](b64, path);\n  // The demo shows a success message at this point\n}\n")),(0,i.kt)("h2",{id:"neutralinojs"},"NeutralinoJS"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"../getting-started/installation/standalone"},"Standalone build")," can be added\nto the entry ",(0,i.kt)("inlineCode",{parentName:"p"},"index.html")),(0,i.kt)("p",null,'This demo was tested against "binaries" ',(0,i.kt)("inlineCode",{parentName:"p"},"4.7.0"),' and "client" ',(0,i.kt)("inlineCode",{parentName:"p"},"3.6.0")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"NeutralinoJS currently does not provide the equivalent of NodeJS ",(0,i.kt)("inlineCode",{parentName:"p"},"fs")," module.\nThe raw ",(0,i.kt)("inlineCode",{parentName:"p"},"Neutralino.filesystem")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Neutralino.os")," methods are used.")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"os")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"filesystem")," modules must be enabled in ",(0,i.kt)("inlineCode",{parentName:"p"},"neutralino.conf.json"),".\nThe starter already enables ",(0,i.kt)("inlineCode",{parentName:"p"},"os")," so typically one line must be added:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="neutralino.config.json"',title:'"neutralino.config.json"'},'  "nativeAllowList": [\n    "app.*",\n    "os.*",\n// highlight-next-line\n    "filesystem.*",\n    "debug.log"\n  ],\n')),(0,i.kt)("p",null,'The "Complete Example" creates an app that looks like the screenshot:'),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"/neu/macos.png",alt:"SheetJS NeutralinoJS MacOS screenshot"})),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"At the time of writing, ",(0,i.kt)("inlineCode",{parentName:"p"},"filters")," did not work as expected on MacOS.  They have\nbeen omitted in the example and commented in the code snippets")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Complete Example")," (click to show)"),(0,i.kt)("p",null,"The app core state will be the HTML table.  Reading files will add the table to\nthe window.  Writing files will parse the table into a spreadsheet."),(0,i.kt)("p",null,"1) Create a new NeutralinoJS app:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx @neutralinojs/neu create sheetjs-neu\ncd sheetjs-neu\n")),(0,i.kt)("p",null,"2) Download the standalone script and place in ",(0,i.kt)("inlineCode",{parentName:"p"},"resources/js/main.js"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl -L -o resources/js/xlsx.full.min.js https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js\n")),(0,i.kt)("p",null,"3) Add the highlighted lines to ",(0,i.kt)("inlineCode",{parentName:"p"},"neutralino.conf.json")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"nativeAllowList"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="neutralino.config.json"',title:'"neutralino.config.json"'},'  "nativeAllowList": [\n    "app.*",\n// highlight-start\n    "os.*",\n    "filesystem.*",\n// highlight-end\n    "debug.log"\n  ],\n')),(0,i.kt)("p",null,"4) Set up skeleton app and print version info:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Edit ",(0,i.kt)("inlineCode",{parentName:"li"},"resources/index.html")," and replace the ",(0,i.kt)("inlineCode",{parentName:"li"},"<body>")," with the code below:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="resources/index.html"',title:'"resources/index.html"'},'  <body>\n    <div id="neutralinoapp">\n      <h1>SheetJS \xd7 NeutralinoJS</h1>\n      <button onclick="importData()">Import Data</button>\n      <button onclick="exportData()">Export Data</button>\n      <div id="info"></div>\n    </div>\n    <script src="js/neutralino.js"><\/script>\n    \x3c!-- Load the browser build and make XLSX available to main.js --\x3e\n    <script src="js/xlsx.full.min.js"><\/script>\n    <script src="js/main.js"><\/script>\n  </body>\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Append the following code to ",(0,i.kt)("inlineCode",{parentName:"li"},"resources/styles.css")," to center the table:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="resources/styles.css"',title:'"resources/styles.css"'},"#info {\n    width:100%;\n    text-align: unset;\n}\ntable {\n    margin: 0 auto;\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Print the version number in the ",(0,i.kt)("inlineCode",{parentName:"li"},"showInfo")," method of ",(0,i.kt)("inlineCode",{parentName:"li"},"resources/js/main.js"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="resources/js/main.js"',title:'"resources/js/main.js"'},"        ${NL_APPID} is running on port ${NL_PORT}  inside ${NL_OS}\n        <br/><br/>\n        <span>server: v${NL_VERSION} . client: v${NL_CVERSION}</span>\n// highlight-start\n        <br/><br/>\n        <span>SheetJS version ${XLSX.version}</span>\n// highlight-end\n        `;\n")),(0,i.kt)("p",null,"5) Run the app:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx @neutralinojs/neu run\n")),(0,i.kt)("p",null,"You should see ",(0,i.kt)("inlineCode",{parentName:"p"},"SheetJS Version ")," followed by the library version number."),(0,i.kt)("p",null,"6) Add the following code to the bottom of ",(0,i.kt)("inlineCode",{parentName:"p"},"resources/js/main.js"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"(async() => {\n  const ab = await (await fetch(\"https://sheetjs.com/pres.numbers\")).arrayBuffer();\n  const wb = XLSX.read(ab);\n  const ws = wb.Sheets[wb.SheetNames[0]];\n  document.getElementById('info').innerHTML = XLSX.utils.sheet_to_html(ws);\n})();\n")),(0,i.kt)("p",null,"Save the source file, close the app and re-run the command from step 5."),(0,i.kt)("p",null,"When the app loads, a table should show in the main screen."),(0,i.kt)("p",null,"7) Add ",(0,i.kt)("inlineCode",{parentName:"p"},"importFile")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"exportFile")," to the bottom of ",(0,i.kt)("inlineCode",{parentName:"p"},"resources/js/main.js"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"async function importData() {\n  /* show open dialog */\n  const [filename] = await Neutralino.os.showOpenDialog('Open a spreadsheet');\n\n  /* read data */\n  const ab = await Neutralino.filesystem.readBinaryFile(filename);\n  const wb = XLSX.read(ab);\n\n  /* make table */\n  const ws = wb.Sheets[wb.SheetNames[0]];\n  document.getElementById('info').innerHTML = XLSX.utils.sheet_to_html(ws);\n}\n\nasync function exportData() {\n    /* show save dialog */\n  const filename = await Neutralino.os.showSaveDialog('Save to file');\n\n  /* make workbook */\n  const tbl = document.getElementById('info').querySelector(\"table\");\n  const wb = XLSX.utils.table_to_book(tbl);\n\n  /* make file */\n  const bookType = filename.slice(filename.lastIndexOf(\".\") + 1);\n  const data = XLSX.write(wb, { bookType, type: \"buffer\" });\n  await Neutralino.filesystem.writeBinaryFile(filename, data);\n}\n")),(0,i.kt)("p",null,"Save the source file, close the app and re-run the command from step 5."),(0,i.kt)("p",null,'When the app loads, click the "Import File" button and select a spreadsheet to\nsee the contents.  Click "Export File" and enter ',(0,i.kt)("inlineCode",{parentName:"p"},"SheetJSNeu.xlsx")," to write."),(0,i.kt)("p",null,"8) Build production apps:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx @neutralinojs/neu run\n")),(0,i.kt)("p",null,"Platform-specific programs will be created in the ",(0,i.kt)("inlineCode",{parentName:"p"},"dist")," folder.")),(0,i.kt)("h3",{id:"reading-files-3"},"Reading Files"),(0,i.kt)("p",null,"There are two steps to reading files: obtaining a path and reading binary data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const filters = [\n  {name: "Excel Binary Workbook", extensions: ["xlsb"]},\n  {name: "Excel Workbook", extensions: ["xlsx"]},\n]\n\nasync function openFile() {\n  /* show open file dialog */\n  const [filename] = await Neutralino.os.showOpenDialog(\n    \'Open a spreadsheet\',\n    { /* filters, */ multiSelections: false }\n  );\n\n  /* read data into an ArrayBuffer */\n  const ab = await Neutralino.filesystem.readBinaryFile(filename);\n\n  /* parse with SheetJS */\n  const wb = XLSX.read(ab);\n  return wb;\n}\n')),(0,i.kt)("p",null,"This method can be called from a button click or other event."),(0,i.kt)("h3",{id:"writing-files-3"},"Writing Files"),(0,i.kt)("p",null,"There are two steps to writing files: obtaining a path and writing binary data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const filters = [\n  {name: "Excel Binary Workbook", extensions: ["xlsb"]},\n  {name: "Excel Workbook", extensions: ["xlsx"]},\n]\n\nasync function saveFile(wb) {\n  /* show save file dialog */\n  const filename = await Neutralino.os.showSaveDialog(\n    \'Save to file\',\n    { /* filters */ }\n  );\n\n  /* Generate workbook */\n  const bookType = filename.slice(filename.lastIndexOf(".") + 1);\n  const data = XLSX.write(wb, { bookType, type: "buffer" });\n\n  /* save data to file */\n  await Neutralino.filesystem.writeBinaryFile(filename, data);\n}\n')),(0,i.kt)("h2",{id:"react-native-windows"},"React Native Windows"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"../getting-started/installation/nodejs"},"NodeJS Module")," can be imported\nfrom the main app script.  File operations must be written in native code."),(0,i.kt)("p",null,"This demo was tested against ",(0,i.kt)("inlineCode",{parentName:"p"},"v0.69.6")," on 2022 September 07 in Windows 10."),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"There is no simple standalone executable file at the end of the process."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"https://microsoft.github.io/react-native-windows/docs/native-code#distribution"},"The official documentation describes distribution strategies"))),(0,i.kt)("p",null,"React Native Windows use ",(0,i.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/the-new-architecture/pillars-turbomodules"},"Turbo Modules")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Complete Example")," (click to show)"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"React Native Windows supports writing native code in C++ or C#.  This demo has\nbeen tested against both application types.")),(0,i.kt)("p",null,"0) Follow the ",(0,i.kt)("a",{parentName:"p",href:"https://microsoft.github.io/react-native-windows/docs/getting-started"},'"Getting Started" guide')),(0,i.kt)("p",null,"1) Create a new project using React Native ",(0,i.kt)("inlineCode",{parentName:"p"},"0.69"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},"npx react-native init SheetJSWin --template react-native@^0.69.0\ncd .\\SheetJSWin\\\n")),(0,i.kt)("p",null,"Create the Windows part of the application:"),(0,i.kt)(l.Z,{groupId:"rnwlang",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"cs",label:"C#",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},"npx react-native-windows-init --no-telemetry --overwrite --language=cs\n"))),(0,i.kt)(r.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},"npx react-native-windows-init --no-telemetry --overwrite\n")))),(0,i.kt)("p",null,"Install library:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},"npm install --save https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz\n")),(0,i.kt)("p",null,"To ensure that the app works, launch the app:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},"npx react-native run-windows --no-telemetry\n")),(0,i.kt)(l.Z,{groupId:"rnwlang",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"cs",label:"C#",mdxType:"TabItem"},(0,i.kt)("p",null,"2) Create the file ",(0,i.kt)("inlineCode",{parentName:"p"},"windows\\SheetJSWin\\DocumentPicker.cs")," with the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="windows\\SheetJSWin\\DocumentPicker.cs"',title:'"windows\\SheetJSWin\\DocumentPicker.cs"'},'using System;\nusing Microsoft.ReactNative.Managed;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Windows.ApplicationModel.Core;\nusing Windows.Security.Cryptography;\nusing Windows.Storage;\nusing Windows.Storage.Pickers;\nusing Windows.UI.Core;\n\nnamespace SheetJSWin {\n  [ReactModule]\n  class DocumentPicker {\n    private ReactContext context;\n    [ReactInitializer]\n    public void Initialize(ReactContext reactContext) { context = reactContext; }\n\n    [ReactMethod("PickAndRead")]\n    public async void PickAndRead(IReactPromise<string> result) {\n      context.Handle.UIDispatcher.Post(async() => { try {\n        var picker = new FileOpenPicker();\n        picker.SuggestedStartLocation = PickerLocationId.DocumentsLibrary;\n        picker.FileTypeFilter.Add(".xlsx");\n        picker.FileTypeFilter.Add(".xls");\n\n        var file = await picker.PickSingleFileAsync();\n        if(file == null) throw new Exception("File not found");\n\n        var buf = await FileIO.ReadBufferAsync(file);\n        result.Resolve(CryptographicBuffer.EncodeToBase64String(buf));\n      } catch(Exception e) { result.Reject(new ReactError { Message = e.Message }); }});\n    }\n  }\n}\n')),(0,i.kt)("p",null,"3) Add the highlighted line to ",(0,i.kt)("inlineCode",{parentName:"p"},"windows\\SheetJSWin\\SheetJSWin.csproj"),". Look for\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"ItemGroup")," that contains ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactPackageProvider.cs"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="windows\\SheetJSWin\\SheetJSWin.csproj"',title:'"windows\\SheetJSWin\\SheetJSWin.csproj"'},'\x3c!-- highlight-next-line --\x3e\n    <Compile Include="DocumentPicker.cs" />\n    <Compile Include="ReactPackageProvider.cs" />\n  </ItemGroup>\n'))),(0,i.kt)(r.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)("p",null,"4) Create the file ",(0,i.kt)("inlineCode",{parentName:"p"},"windows\\SheetJSWin\\DocumentPicker.h")," with the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="windows\\SheetJSWin\\DocumentPicker.h"',title:'"windows\\SheetJSWin\\DocumentPicker.h"'},'#pragma once\n\n#include "pch.h"\n#include <winrt/Windows.Storage.Pickers.h>\n#include <winrt/Windows.Security.Cryptography.h>\n#include "JSValue.h"\n#include "NativeModules.h"\n\nusing namespace winrt::Microsoft::ReactNative;\nusing namespace winrt::Windows::Foundation;\nusing namespace winrt::Windows::Storage;\nusing namespace winrt::Windows::Storage::Pickers;\nusing namespace winrt::Windows::Security::Cryptography;\n\nnamespace SheetJSWin {\n  REACT_MODULE(DocumentPicker);\n  struct DocumentPicker {\n    REACT_INIT(Initialize);\n    void Initialize(const ReactContext& reactContext) noexcept {\n      context = reactContext;\n    }\n\n    REACT_METHOD(PickAndRead);\n    void PickAndRead(ReactPromise<winrt::hstring> promise) noexcept {\n      auto prom = promise;\n      context.UIDispatcher().Post([prom = std::move(prom)]()->winrt::fire_and_forget {\n        auto p = prom;\n        winrt::Windows::Storage::Pickers::FileOpenPicker picker;\n        picker.SuggestedStartLocation(PickerLocationId::DocumentsLibrary);\n        picker.FileTypeFilter().Append(L".xlsx");\n        picker.FileTypeFilter().Append(L".xls");\n\n        StorageFile file = co_await picker.PickSingleFileAsync();\n        if(file == nullptr) { p.Reject("File not Found"); co_return; }\n\n        auto buf = co_await FileIO::ReadBufferAsync(file);\n        p.Resolve(CryptographicBuffer::EncodeToBase64String(buf));\n        co_return;\n      });\n    }\n\n    private:\n      ReactContext context{nullptr};\n  };\n}\n')),(0,i.kt)("p",null,"5) Add the highlighted line to ",(0,i.kt)("inlineCode",{parentName:"p"},"windows\\SheetJSWin\\ReactPackageProvider.cpp"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="windows\\SheetJSWin\\ReactPackageProvider.cpp"',title:'"windows\\SheetJSWin\\ReactPackageProvider.cpp"'},'#include "ReactPackageProvider.h"\n// highlight-next-line\n#include "DocumentPicker.h"\n#include "NativeModules.h"\n')))),(0,i.kt)("p",null,"Now the native module will be added to the app."),(0,i.kt)("p",null,"6) Remove ",(0,i.kt)("inlineCode",{parentName:"p"},"App.js")," and save the following to ",(0,i.kt)("inlineCode",{parentName:"p"},"App.tsx"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},"import React, { useState, type Node } from 'react';\nimport { SafeAreaView, ScrollView, StyleSheet, Text, TouchableHighlight, View } from 'react-native';\nimport { read, utils, version } from 'xlsx';\nimport { getEnforcing } from 'react-native/Libraries/TurboModule/TurboModuleRegistry';\nconst DocumentPicker = getEnforcing('DocumentPicker');\n\nconst App: () => Node = () => {\n\n  const [ aoa, setAoA ] = useState([\"SheetJS\".split(\"\"), \"5433795\".split(\"\")]);\n\n  return (\n    <SafeAreaView style={styles.outer}>\n      <Text style={styles.title}>SheetJS \xd7 React Native Windows {version}</Text>\n      <TouchableHighlight onPress={async() => {\n        try {\n          const b64 = await DocumentPicker.PickAndRead();\n          const wb = read(b64);\n          setAoA(utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]], { header: 1 } ));\n        } catch(err) { alert(`Error: ${err.message}`); }\n      }}><Text style={styles.button}>Click here to Open File!</Text></TouchableHighlight>\n      <ScrollView contentInsetAdjustmentBehavior=\"automatic\">\n        <View style={styles.table}>{aoa.map((row,R) => (\n          <View style={styles.row} key={R}>{row.map((cell,C) => (\n            <View style={styles.cell} key={C}><Text>{cell}</Text></View>\n          ))}</View>\n        ))}</View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  cell: { flex: 4 },\n  row: { flexDirection: 'row', justifyContent: 'space-evenly', padding: 10, backgroundColor: 'white', },\n  table: { display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', },\n  outer: { marginTop: 32, paddingHorizontal: 24, },\n  title: { fontSize: 24, fontWeight: '600', },\n  button: { marginTop: 8, fontSize: 18, fontWeight: '400', },\n});\n\nexport default App;\n")),(0,i.kt)("p",null,"7) Test the app again:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},"npx react-native run-windows --no-telemetry\n")),(0,i.kt)("p",null,"Download ",(0,i.kt)("a",{parentName:"p",href:"https://sheetjs.com/pres.xlsx"},"https://sheetjs.com/pres.xlsx"),', then click on "open file". Use the\nfile picker to select the ',(0,i.kt)("inlineCode",{parentName:"p"},"pres.xlsx")," file and the app will show the data.")),(0,i.kt)("h3",{id:"reading-files-4"},"Reading Files"),(0,i.kt)("p",null,"Only the main UI thread can show file pickers.  This is similar to Web Worker\nDOM access limitations in the Web platform."),(0,i.kt)("p",null,"This example defines a ",(0,i.kt)("inlineCode",{parentName:"p"},"PickAndRead")," function that will show the file picker,\nread the file contents, and return a Base64 string."),(0,i.kt)(l.Z,{groupId:"rnwlang",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"cs",label:"C#",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'namespace SheetJSWin {\n  [ReactModule]\n  class DocumentPicker {\n    /* The context must be stored when the module is initialized */\n    private ReactContext context;\n    [ReactInitializer]\n    public void Initialize(ReactContext ctx) { context = ctx; }\n\n    [ReactMethod("PickAndRead")]\n    public async void PickAndRead(IReactPromise<string> result) {\n      /* perform file picker action in the UI thread */\n      // highlight-next-line\n      context.Handle.UIDispatcher.Post(async() => { try {\n        /* create file picker */\n        var picker = new FileOpenPicker();\n        picker.SuggestedStartLocation = PickerLocationId.DocumentsLibrary;\n        picker.FileTypeFilter.Add(".xlsx");\n        picker.FileTypeFilter.Add(".xls");\n\n        /* show file picker */\n        // highlight-next-line\n        var file = await picker.PickSingleFileAsync();\n        if(file == null) throw new Exception("File not found");\n\n        /* read data and return base64 string */\n        var buf = await FileIO.ReadBufferAsync(file);\n        // highlight-next-line\n        result.Resolve(CryptographicBuffer.EncodeToBase64String(buf));\n      } catch(Exception e) { result.Reject(new ReactError { Message = e.Message }); }});\n    }\n  }\n}\n'))),(0,i.kt)(r.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'namespace SheetJSWin\n{\n  REACT_MODULE(DocumentPicker);\n  struct DocumentPicker\n  {\n    /* The context must be stored when the module is initialized */\n    REACT_INIT(Initialize);\n    void Initialize(const ReactContext& reactContext) noexcept {\n      context = reactContext;\n    }\n\n    REACT_METHOD(PickAndRead);\n    void PickAndRead(ReactPromise<winrt::hstring> promise) noexcept {\n      auto prom = promise;\n      /* perform file picker action in the UI thread */\n      // highlight-next-line\n      context.UIDispatcher().Post([prom = std::move(prom)]()->winrt::fire_and_forget {\n        auto p = prom; // promise -> prom -> p dance avoids promise destruction\n\n        /* create file picker */\n        winrt::Windows::Storage::Pickers::FileOpenPicker picker;\n        picker.SuggestedStartLocation(PickerLocationId::DocumentsLibrary);\n        picker.FileTypeFilter().Append(L".xlsx");\n        picker.FileTypeFilter().Append(L".xls");\n\n        /* show file picker */\n        // highlight-next-line\n        StorageFile file = co_await picker.PickSingleFileAsync();\n        if(file == nullptr) { p.Reject("File not Found"); co_return; }\n\n        /* read data and return base64 string */\n        auto buf = co_await FileIO::ReadBufferAsync(file);\n        // highlight-next-line\n        p.Resolve(CryptographicBuffer::EncodeToBase64String(buf));\n        co_return;\n      });\n    }\n\n    private:\n      ReactContext context{nullptr};\n  };\n}\n')))),(0,i.kt)("p",null,"This module can be referenced from the Turbo Module Registry:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { read } from 'xlsx';\nimport { getEnforcing } from 'react-native/Libraries/TurboModule/TurboModuleRegistry';\nconst DocumentPicker = getEnforcing('DocumentPicker');\n\n\n/* ... in some event handler ... */\nasync() => {\n  const b64 = await DocumentPicker.PickAndRead();\n  const wb = read(b64);\n  // DO SOMETHING WITH `wb` HERE\n}\n")),(0,i.kt)("h2",{id:"react-native-macos"},"React Native MacOS"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"../getting-started/installation/nodejs"},"NodeJS Module")," can be imported\nfrom the main app script.  File operations must be written in native code."),(0,i.kt)("p",null,"This demo was tested against ",(0,i.kt)("inlineCode",{parentName:"p"},"v0.64.30")," on 2022 September 10 in MacOS 12.4"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"At the time of writing, the latest supported React Native version was ",(0,i.kt)("inlineCode",{parentName:"p"},"v0.64.3"))),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Complete Example")," (click to show)"),(0,i.kt)("p",null,"0) Follow the ",(0,i.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/environment-setup"},"React Native"),"\nguide for React Native CLI on MacOS."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"NodeJS ",(0,i.kt)("inlineCode",{parentName:"p"},"v16")," is required.  There are OS-specific tools for downgrading:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/coreybutler/nvm-windows/releases"},(0,i.kt)("inlineCode",{parentName:"a"},"nvm-windows"))," Windows"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/nvm-sh/nvm/"},(0,i.kt)("inlineCode",{parentName:"a"},"nvm"))," Linux, MacOS, WSL, etc."))),(0,i.kt)("p",null,"1) Create a new project using React Native ",(0,i.kt)("inlineCode",{parentName:"p"},"0.64"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx react-native init SheetJSmacOS --template react-native@^0.64.0\ncd SheetJSmacOS\n")),(0,i.kt)("p",null,"Create the MacOS part of the application:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx react-native-macos-init --no-telemetry\n")),(0,i.kt)("p",null,"Install Library:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npm i --save https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz\n")),(0,i.kt)("p",null,"To ensure that the app works, launch the app:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},"npx react-native run-macos\n")),(0,i.kt)("p",null,"Close the running app from the dock and close the Metro terminal window."),(0,i.kt)("p",null,"2) Create the file ",(0,i.kt)("inlineCode",{parentName:"p"},"macos/SheetJSmacOS-macOS/RCTDocumentPicker.h"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="macos/SheetJSmacOS-macOS/RCTDocumentPicker.h"',title:'"macos/SheetJSmacOS-macOS/RCTDocumentPicker.h"'},"#import <React/RCTBridgeModule.h>\n@interface RCTDocumentPicker : NSObject <RCTBridgeModule>\n@end\n")),(0,i.kt)("p",null,"Create the file ",(0,i.kt)("inlineCode",{parentName:"p"},"macos/SheetJSmacOS-macOS/RCTDocumentPicker.m"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objc",metastring:'title="macos/SheetJSmacOS-macOS/RCTDocumentPicker.m"',title:'"macos/SheetJSmacOS-macOS/RCTDocumentPicker.m"'},'#import <Foundation/Foundation.h>\n#import <React/RCTUtils.h>\n\n#import "RCTDocumentPicker.h"\n\n@implementation RCTDocumentPicker\n\nRCT_EXPORT_MODULE();\n\nRCT_EXPORT_METHOD(PickAndRead:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)\n{\n  RCTExecuteOnMainQueue(^{\n    NSOpenPanel *panel = [NSOpenPanel openPanel];\n    [panel setCanChooseDirectories:NO];\n    [panel setAllowsMultipleSelection:NO];\n    [panel setMessage:@"Select a spreadsheet to read"];\n\n    [panel beginWithCompletionHandler:^(NSInteger result){\n      if (result == NSModalResponseOK) {\n        NSURL *selected = [[panel URLs] objectAtIndex:0];\n        NSFileHandle *hFile = [NSFileHandle fileHandleForReadingFromURL:selected error:nil];\n        if(hFile) {\n          NSData *data = [hFile readDataToEndOfFile];\n          resolve([data base64EncodedStringWithOptions:0]);\n        } else reject(@"read_failure", @"Could not read selected file!", nil);\n      } else reject(@"select_failure", @"No file selected!", nil);\n    }];\n  });\n}\n@end\n')),(0,i.kt)("p",null,"3) Edit the project file ",(0,i.kt)("inlineCode",{parentName:"p"},"macos/SheetJSmacOS.xcodeproj/project.pbxproj"),"."),(0,i.kt)("p",null,"There are four places where lines must be added:"),(0,i.kt)("p",null,"A) Immediately after ",(0,i.kt)("inlineCode",{parentName:"p"},"/* Begin PBXBuildFile section */")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plist"},"/* Begin PBXBuildFile section */\n// highlight-next-line\n    4717DC6A28CC499A00A9BE56 /* RCTDocumentPicker.m in Sources */ = {isa = PBXBuildFile; fileRef = 4717DC6928CC499A00A9BE56 /* RCTDocumentPicker.m */; };\n    13B07FBC1A68108700A75B9A /* AppDelegate.m in Sources */ = {isa = PBXBuildFile; fileRef = 13B07FB01A68108700A75B9A /* AppDelegate.m */; };\n")),(0,i.kt)("p",null,"B) Immediately after ",(0,i.kt)("inlineCode",{parentName:"p"},"/* Begin PBXFileReference section */")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plist"},'/* Begin PBXFileReference section */\n// highlight-start\n    4717DC6828CC495400A9BE56 /* RCTDocumentPicker.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; name = RCTDocumentPicker.h; path = "SheetJSMacOS-macOS/RCTDocumentPicker.h"; sourceTree = "<group>"; };\n    4717DC6928CC499A00A9BE56 /* RCTDocumentPicker.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; name = RCTDocumentPicker.m; path = "SheetJSMacOS-macOS/RCTDocumentPicker.m"; sourceTree = "<group>"; };\n// highlight-end\n    008F07F21AC5B25A0029DE68 /* main.jsbundle */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = main.jsbundle; sourceTree = "<group>"; };\n')),(0,i.kt)("p",null,"C) The goal is to add a reference to the ",(0,i.kt)("inlineCode",{parentName:"p"},"PBXSourcesBuildPhase")," block for the\n",(0,i.kt)("inlineCode",{parentName:"p"},"macOS")," target.  To determine this, look in the ",(0,i.kt)("inlineCode",{parentName:"p"},"PBXNativeTarget section")," for\na block with the comment ",(0,i.kt)("inlineCode",{parentName:"p"},"SheetJSmacOS-macOS"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plist"},'/* Begin PBXNativeTarget section */\n...\n      productType = "com.apple.product-type.application";\n    };\n// highlight-next-line\n    514201482437B4B30078DB4F /* SheetJSmacOS-macOS */ = {\n      isa = PBXNativeTarget;\n...\n/* End PBXNativeTarget section */\n')),(0,i.kt)("p",null,"Within the block, look for ",(0,i.kt)("inlineCode",{parentName:"p"},"buildPhases")," and find the hex string for ",(0,i.kt)("inlineCode",{parentName:"p"},"Sources"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plist"},"      buildPhases = (\n        1A938104A937498D81B3BD3B /* [CP] Check Pods Manifest.lock */,\n        381D8A6F24576A6C00465D17 /* Start Packager */,\n// highlight-next-line\n        514201452437B4B30078DB4F /* Sources */,\n        514201462437B4B30078DB4F /* Frameworks */,\n        514201472437B4B30078DB4F /* Resources */,\n        381D8A6E24576A4E00465D17 /* Bundle React Native code and images */,\n        3689826CA944E2EF44FCBC17 /* [CP] Copy Pods Resources */,\n      );\n")),(0,i.kt)("p",null,"Search for that hex string (",(0,i.kt)("inlineCode",{parentName:"p"},"514201452437B4B30078DB4F")," in our example) in the\nfile and it should show up in a ",(0,i.kt)("inlineCode",{parentName:"p"},"PBXSourcesBuildPhase")," section. Within ",(0,i.kt)("inlineCode",{parentName:"p"},"files"),",\nadd the highlighted line:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plist"},"    514201452437B4B30078DB4F /* Sources */ = {\n      isa = PBXSourcesBuildPhase;\n      buildActionMask = 2147483647;\n      files = (\n// highlight-next-line\n        4717DC6A28CC499A00A9BE56 /* RCTDocumentPicker.m in Sources */,\n        514201502437B4B30078DB4F /* ViewController.m in Sources */,\n        514201582437B4B40078DB4F /* main.m in Sources */,\n        5142014D2437B4B30078DB4F /* AppDelegate.m in Sources */,\n      );\n      runOnlyForDeploymentPostprocessing = 0;\n    };\n")),(0,i.kt)("p",null,'D) The goal is to add file references to the "main group".  Search for\n',(0,i.kt)("inlineCode",{parentName:"p"},"/* Begin PBXProject section */")," and there should be one Project object.\nWithin the project object, look for ",(0,i.kt)("inlineCode",{parentName:"p"},"mainGroup"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plist"},"/* Begin PBXProject section */\n    83CBB9F71A601CBA00E9B192 /* Project object */ = {\n      isa = PBXProject;\n...\n        Base,\n      );\n// highlight-next-line\n      mainGroup = 83CBB9F61A601CBA00E9B192;\n      productRefGroup = 83CBBA001A601CBA00E9B192 /* Products */;\n...\n/* End PBXProject section */\n")),(0,i.kt)("p",null,"Search for that hex string (",(0,i.kt)("inlineCode",{parentName:"p"},"83CBB9F61A601CBA00E9B192")," in our example) in the\nfile and it should show up in a ",(0,i.kt)("inlineCode",{parentName:"p"},"PBXGroup")," section.  Within ",(0,i.kt)("inlineCode",{parentName:"p"},"children"),", add the\nhighlighted lines:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plist"},"    83CBB9F61A601CBA00E9B192 = {\n      isa = PBXGroup;\n      children = (\n// highlight-start\n        4717DC6828CC495400A9BE56 /* RCTDocumentPicker.h */,\n        4717DC6928CC499A00A9BE56 /* RCTDocumentPicker.m */,\n// highlight-end\n        5142014A2437B4B30078DB4F /* SheetJSmacOS-macOS */,\n        13B07FAE1A68108700A75B9A /* SheetJSmacOS-iOS */,\n")),(0,i.kt)("p",null,"4) Replace ",(0,i.kt)("inlineCode",{parentName:"p"},"App.js")," with the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.js"',title:'"App.js"'},"import React, { useState, type Node } from 'react';\nimport { SafeAreaView, ScrollView, StyleSheet, Text, TouchableHighlight, View } from 'react-native';\nimport { read, utils, version } from 'xlsx';\nimport { getEnforcing } from 'react-native/Libraries/TurboModule/TurboModuleRegistry';\nconst DocumentPicker = getEnforcing('DocumentPicker');\n\nconst App: () => Node = () => {\n\n  const [ aoa, setAoA ] = useState([\"SheetJS\".split(\"\"), \"5433795\".split(\"\")]);\n\n  return (\n    <SafeAreaView style={styles.outer}>\n      <Text style={styles.title}>SheetJS \xd7 React Native MacOS {version}</Text>\n      <TouchableHighlight onPress={async() => {\n        try {\n          const b64 = await DocumentPicker.PickAndRead();\n          const wb = read(b64);\n          setAoA(utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]], { header: 1 } ));\n        } catch(err) { alert(`Error: ${err.message}`); }\n      }}><Text style={styles.button}>Click here to Open File!</Text></TouchableHighlight>\n      <ScrollView contentInsetAdjustmentBehavior=\"automatic\">\n        <View style={styles.table}>{aoa.map((row,R) => (\n          <View style={styles.row} key={R}>{row.map((cell,C) => (\n            <View style={styles.cell} key={C}><Text>{cell}</Text></View>\n          ))}</View>\n        ))}</View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  cell: { flex: 4 },\n  row: { flexDirection: 'row', justifyContent: 'space-evenly', padding: 10, backgroundColor: 'white', },\n  table: { display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', },\n  outer: { marginTop: 32, paddingHorizontal: 24, },\n  title: { fontSize: 24, fontWeight: '600', },\n  button: { marginTop: 8, fontSize: 18, fontWeight: '400', },\n});\n\nexport default App;\n")),(0,i.kt)("p",null,"5) Test the app:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx react-native run-macos\n")),(0,i.kt)("p",null,"Download ",(0,i.kt)("a",{parentName:"p",href:"https://sheetjs.com/pres.xlsx"},"https://sheetjs.com/pres.xlsx"),', then click on "open file". Use the\nfile picker to select the ',(0,i.kt)("inlineCode",{parentName:"p"},"pres.xlsx")," file and the app will show the data."),(0,i.kt)("p",null,"6) Make a release build:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"xcodebuild -workspace macos/SheetJSmacOS.xcworkspace -scheme SheetJSmacOS-macOS -config Release\n"))),(0,i.kt)("h3",{id:"reading-files-5"},"Reading Files"),(0,i.kt)("p",null,"Only the main UI thread can show file pickers.  This is similar to Web Worker\nDOM access limitations in the Web platform."),(0,i.kt)("p",null,"This example defines a ",(0,i.kt)("inlineCode",{parentName:"p"},"PickAndRead")," function that will show the file picker,\nread the file contents, and return a Base64 string."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objc"},'/* the resolve/reject is projected on the JS side as a Promise */\nRCT_EXPORT_METHOD(PickAndRead:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)\n{\n  /* perform file picker action in the UI thread */\n  // highlight-next-line\n  RCTExecuteOnMainQueue(^{\n    /* create file picker */\n    NSOpenPanel *panel = [NSOpenPanel openPanel];\n    [panel setCanChooseDirectories:NO];\n    [panel setAllowsMultipleSelection:NO];\n    [panel setMessage:@"Select a spreadsheet to read"];\n\n    /* show file picker */\n    // highlight-next-line\n    [panel beginWithCompletionHandler:^(NSInteger result){\n      if (result == NSModalResponseOK) {\n        /* read data and return base64 string */\n        NSURL *selected = [[panel URLs] objectAtIndex:0];\n        NSFileHandle *hFile = [NSFileHandle fileHandleForReadingFromURL:selected error:nil];\n        if(hFile) {\n          NSData *data = [hFile readDataToEndOfFile];\n          // highlight-next-line\n          resolve([data base64EncodedStringWithOptions:0]);\n        } else reject(@"read_failure", @"Could not read selected file!", nil);\n      } else reject(@"select_failure", @"No file selected!", nil);\n    }];\n  });\n}\n')),(0,i.kt)("p",null,"This module is referenced in the same way as the React Native Windows example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { read } from 'xlsx';\nimport { getEnforcing } from 'react-native/Libraries/TurboModule/TurboModuleRegistry';\nconst DocumentPicker = getEnforcing('DocumentPicker');\n\n\n/* ... in some event handler ... */\nasync() => {\n  const b64 = await DocumentPicker.PickAndRead();\n  const wb = read(b64);\n  // DO SOMETHING WITH `wb` HERE\n}\n")))}m.isMDXComponent=!0}}]);