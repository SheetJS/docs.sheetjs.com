"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[994],{9613:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return h}});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=p(n),h=r,c=u["".concat(l,".").concat(h)]||u[h]||d[h]||o;return n?a.createElement(c,s(s({ref:t},m),{},{components:n})):a.createElement(c,s({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4382:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return d}});var a=n(2848),r=n(9213),o=(n(9496),n(9613)),s=["components"],i={sidebar_position:5},l="Data Export",p={unversionedId:"solutions/output",id:"solutions/output",title:"Data Export",description:"Writing Workbooks",source:"@site/docs/06-solutions/05-output.md",sourceDirName:"06-solutions",slug:"/solutions/output",permalink:"/docs/solutions/output",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Data Processing",permalink:"/docs/solutions/processing"},next:{title:"Core Concepts",permalink:"/docs/csf/general"}},m={},d=[{value:"Writing Workbooks",id:"writing-workbooks",level:2},{value:"API",id:"api",level:4},{value:"Examples",id:"examples",level:4},{value:"Writing Examples",id:"writing-examples",level:3},{value:"Streaming Write",id:"streaming-write",level:3},{value:"Generating JSON and JS Data",id:"generating-json-and-js-data",level:3},{value:"API",id:"api-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"Generating HTML Tables",id:"generating-html-tables",level:3},{value:"API",id:"api-2",level:4},{value:"Examples",id:"examples-2",level:4},{value:"Generating Single-Worksheet Snapshots",id:"generating-single-worksheet-snapshots",level:3},{value:"API",id:"api-3",level:4}],u={toc:d};function h(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"data-export"},"Data Export"),(0,o.kt)("h2",{id:"writing-workbooks"},"Writing Workbooks"),(0,o.kt)("h4",{id:"api"},"API"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Generate spreadsheet bytes (file) from data")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var data = XLSX.write(workbook, opts);\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"write")," method attempts to package data from the workbook into a file in\nmemory.  By default, XLSX files are generated, but that can be controlled with\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"bookType")," property of the ",(0,o.kt)("inlineCode",{parentName:"p"},"opts")," argument.  Based on the ",(0,o.kt)("inlineCode",{parentName:"p"},"type"),' option,\nthe data can be stored as a "binary string", JS string, ',(0,o.kt)("inlineCode",{parentName:"p"},"Uint8Array")," or Buffer."),(0,o.kt)("p",null,"The second ",(0,o.kt)("inlineCode",{parentName:"p"},"opts")," argument is required.  ",(0,o.kt)("a",{parentName:"p",href:"../api/write-options"},'"Writing Options"'),"\ncovers the supported properties and behaviors."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Generate and attempt to save file")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"XLSX.writeFile(workbook, filename, opts);\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"writeFile")," method packages the data and attempts to save the new file.  The\nexport file format is determined by the extension of ",(0,o.kt)("inlineCode",{parentName:"p"},"filename")," (",(0,o.kt)("inlineCode",{parentName:"p"},"SheetJS.xlsx"),"\nsignals XLSX export, ",(0,o.kt)("inlineCode",{parentName:"p"},"SheetJS.xlsb")," signals XLSB export, etc)."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"writeFile")," method uses platform-specific APIs to initiate the file save. In\nNodeJS, ",(0,o.kt)("inlineCode",{parentName:"p"},"fs.readFileSync")," can create a file.  In the web browser, a download is\nattempted using the HTML5 ",(0,o.kt)("inlineCode",{parentName:"p"},"download")," attribute, with fallbacks for IE."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Generate and attempt to save an XLSX file")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"XLSX.writeFileXLSX(workbook, filename, opts);\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"writeFile")," method embeds a number of different export functions.  This is\ngreat for developer experience but not amenable to tree shaking using the\ncurrent developer tools.  When only XLSX exports are needed, this method avoids\nreferencing the other export functions."),(0,o.kt)("p",null,"The second ",(0,o.kt)("inlineCode",{parentName:"p"},"opts")," argument is optional.  ",(0,o.kt)("a",{parentName:"p",href:"../api/write-options"},'"Writing Options"'),"\ncovers the supported properties and behaviors."),(0,o.kt)("h4",{id:"examples"},"Examples"),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Local file in a NodeJS server")," (click to show)"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"writeFile")," uses ",(0,o.kt)("inlineCode",{parentName:"p"},"fs.writeFileSync")," in server environments:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'var XLSX = require("xlsx");\n\n/* output format determined by filename */\nXLSX.writeFile(workbook, "out.xlsb");\n')),(0,o.kt)("p",null,"For Node ESM, the ",(0,o.kt)("inlineCode",{parentName:"p"},"writeFile")," helper is not enabled. Instead, ",(0,o.kt)("inlineCode",{parentName:"p"},"fs.writeFileSync"),"\nshould be used to write the file data to a ",(0,o.kt)("inlineCode",{parentName:"p"},"Buffer")," for use with ",(0,o.kt)("inlineCode",{parentName:"p"},"XLSX.write"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { writeFileSync } from "fs";\nimport { write } from "xlsx/xlsx.mjs";\n\nconst buf = write(workbook, {type: "buffer", bookType: "xlsb"});\n/* buf is a Buffer */\nconst workbook = writeFileSync("out.xlsb", buf);\n'))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Local file in a Deno application")," (click to show)"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"writeFile")," uses ",(0,o.kt)("inlineCode",{parentName:"p"},"Deno.writeFileSync")," under the hood:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// @deno-types="https://deno.land/x/sheetjs/types/index.d.ts"\nimport * as XLSX from \'https://deno.land/x/sheetjs/xlsx.mjs\'\n\nXLSX.writeFile(workbook, "test.xlsx");\n')),(0,o.kt)("p",null,"Applications writing files must be invoked with the ",(0,o.kt)("inlineCode",{parentName:"p"},"--allow-write")," flag.  The\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SheetJS/SheetJS/tree/master/demos/deno/"},(0,o.kt)("inlineCode",{parentName:"a"},"deno")," demo")," has more examples")),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Local file in a PhotoShop or InDesign plugin")," (click to show)"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"writeFile")," wraps the ",(0,o.kt)("inlineCode",{parentName:"p"},"File")," logic in Photoshop and other ExtendScript targets.\nThe specified path should be an absolute path:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'#include "xlsx.extendscript.js"\n\n/* output format determined by filename */\nXLSX.writeFile(workbook, "out.xlsx");\n/* at this point, out.xlsx is a file that you can distribute */\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SheetJS/SheetJS/tree/master/demos/extendscript/"},(0,o.kt)("inlineCode",{parentName:"a"},"extendscript")," demo")," includes a more complex example.")),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Download a file in the browser to the user machine")," (click to show)"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"XLSX.writeFile")," wraps a few techniques for triggering a file save:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"URL")," browser API creates an object URL for the file, which the library uses\nby creating a link and forcing a click. It is supported in modern browsers."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"msSaveBlob")," is an IE10+ API for triggering a file save."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"IE_FileSave")," uses VBScript and ActiveX to write a file in IE6+ for Windows\nXP and Windows 7.  The shim must be included in the containing HTML page.")),(0,o.kt)("p",null,"There is no standard way to determine if the actual file has been downloaded."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'/* output format determined by filename */\nXLSX.writeFile(workbook, "out.xlsb");\n/* at this point, out.xlsb will have been downloaded */\n'))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Download a file in legacy browsers")," (click to show)"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"XLSX.writeFile")," techniques work for most modern browsers as well as older IE.\nFor much older browsers, there are workarounds implemented by wrapper libraries."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/dcneiner/downloadify"},(0,o.kt)("inlineCode",{parentName:"a"},"Downloadify"))," uses a Flash SWF button\nto generate local files, suitable for environments where ActiveX is unavailable:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'Downloadify.create(id,{\n  /* other options are required! read the downloadify docs for more info */\n  filename: "test.xlsx",\n  data: function() { return XLSX.write(wb, {bookType:"xlsx", type:"base64"}); },\n  append: false,\n  dataType: "base64"\n});\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SheetJS/SheetJS/tree/master/demos/oldie/"},(0,o.kt)("inlineCode",{parentName:"a"},"oldie")," demo")," shows an IE-compatible fallback scenario.")),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Browser upload file (ajax)")," (click to show)"),(0,o.kt)("p",null,"A complete example using XHR is ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SheetJS/SheetJS/tree/master/demos/xhr/"},"included in the XHR demo"),", along\nwith examples for fetch and wrapper libraries.  This example assumes the server\ncan handle Base64-encoded files (see the demo for a basic nodejs server):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'/* in this example, send a base64 string to the server */\nvar wopts = { bookType:"xlsx", bookSST:false, type:"base64" };\n\nvar wbout = XLSX.write(workbook,wopts);\n\nvar req = new XMLHttpRequest();\nreq.open("POST", "/upload", true);\nvar formdata = new FormData();\nformdata.append("file", "test.xlsx"); // <-- server expects `file` to hold name\nformdata.append("data", wbout); // <-- `data` holds the base64-encoded data\nreq.send(formdata);\n'))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"PhantomJS (Headless Webkit) File Generation")," (click to show)"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SheetJS/SheetJS/tree/master/demos/headless/"},(0,o.kt)("inlineCode",{parentName:"a"},"headless")," demo")," includes a complete demo to convert HTML\nfiles to XLSB workbooks using ",(0,o.kt)("a",{parentName:"p",href:"https://phantomjs.org/"},"PhantomJS"),". PhantomJS\n",(0,o.kt)("inlineCode",{parentName:"p"},"fs.write")," supports writing files from the main process but has a different\ninterface from the NodeJS ",(0,o.kt)("inlineCode",{parentName:"p"},"fs")," module:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'var XLSX = require(\'xlsx\');\nvar fs = require(\'fs\');\n\n/* generate a binary string */\nvar bin = XLSX.write(workbook, { type:"binary", bookType: "xlsx" });\n/* write to file */\nfs.write("test.xlsx", bin, "wb");\n')),(0,o.kt)("p",null,"Note: The section ",(0,o.kt)("a",{parentName:"p",href:"./input#processing-html-tables"},'"Processing HTML Tables"'),' shows how\nto generate a workbook from HTML tables in a page in "Headless WebKit".')),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SheetJS/SheetJS/tree/master/demos/"},"included demos")," cover mobile apps and other special deployments."),(0,o.kt)("h3",{id:"writing-examples"},"Writing Examples"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"http://sheetjs.com/demos/table.html"},"http://sheetjs.com/demos/table.html")," exporting an HTML table"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"http://sheetjs.com/demos/writexlsx.html"},"http://sheetjs.com/demos/writexlsx.html")," generates a simple file")),(0,o.kt)("h3",{id:"streaming-write"},"Streaming Write"),(0,o.kt)("p",null,"The streaming write functions are available in the ",(0,o.kt)("inlineCode",{parentName:"p"},"XLSX.stream")," object.  They\ntake the same arguments as the normal write functions but return a NodeJS\nReadable Stream."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"XLSX.stream.to_csv")," is the streaming version of ",(0,o.kt)("inlineCode",{parentName:"li"},"XLSX.utils.sheet_to_csv"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"XLSX.stream.to_html")," is the streaming version of ",(0,o.kt)("inlineCode",{parentName:"li"},"XLSX.utils.sheet_to_html"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"XLSX.stream.to_json")," is the streaming version of ",(0,o.kt)("inlineCode",{parentName:"li"},"XLSX.utils.sheet_to_json"),".")),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"nodejs convert to CSV and write file")," (click to show)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'var output_file_name = "out.csv";\nvar stream = XLSX.stream.to_csv(worksheet);\nstream.pipe(fs.createWriteStream(output_file_name));\n'))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"nodejs write JSON stream to screen")," (click to show)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'/* to_json returns an object-mode stream */\nvar stream = XLSX.stream.to_json(worksheet, {raw:true});\n\n/* the following stream converts JS objects to text via JSON.stringify */\nvar conv = new Transform({writableObjectMode:true});\nconv._transform = function(obj, e, cb){ cb(null, JSON.stringify(obj) + "\\n"); };\n\nstream.pipe(conv); conv.pipe(process.stdout);\n'))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/sheetjs/sheetaki"},"https://github.com/sheetjs/sheetaki")," pipes write streams to nodejs response."),(0,o.kt)("h3",{id:"generating-json-and-js-data"},"Generating JSON and JS Data"),(0,o.kt)("p",null,"JSON and JS data tend to represent single worksheets. The utility functions in\nthis section work with single worksheets."),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"../csf/general"},'"Common Spreadsheet Format"')," section describes\nthe object structure in more detail.  ",(0,o.kt)("inlineCode",{parentName:"p"},"workbook.SheetNames")," is an ordered list\nof the worksheet names.  ",(0,o.kt)("inlineCode",{parentName:"p"},"workbook.Sheets")," is an object whose keys are sheet\nnames and whose values are worksheet objects."),(0,o.kt)("p",null,'The "first worksheet" is stored at ',(0,o.kt)("inlineCode",{parentName:"p"},"workbook.Sheets[workbook.SheetNames[0]]"),"."),(0,o.kt)("h4",{id:"api-1"},"API"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Create an array of JS objects from a worksheet")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var jsa = XLSX.utils.sheet_to_json(worksheet, opts);\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Create an array of arrays of JS values from a worksheet")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var aoa = XLSX.utils.sheet_to_json(worksheet, {...opts, header: 1});\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"sheet_to_json")," utility function walks a workbook in row-major order,\ngenerating an array of objects.  The second ",(0,o.kt)("inlineCode",{parentName:"p"},"opts")," argument controls a number of\nexport decisions including the type of values (JS values or formatted text). The\n",(0,o.kt)("a",{parentName:"p",href:"../api/utilities#json"},'"JSON"')," section describes the argument in more detail."),(0,o.kt)("p",null,"By default, ",(0,o.kt)("inlineCode",{parentName:"p"},"sheet_to_json")," scans the first row and uses the values as headers.\nWith the ",(0,o.kt)("inlineCode",{parentName:"p"},"header: 1")," option, the function exports an array of arrays of values."),(0,o.kt)("h4",{id:"examples-1"},"Examples"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/myliang/x-spreadsheet"},(0,o.kt)("inlineCode",{parentName:"a"},"x-spreadsheet"))," is an interactive\ndata grid for previewing and modifying structured data in the web browser.  The\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SheetJS/SheetJS/tree/master/demos/xspreadsheet"},(0,o.kt)("inlineCode",{parentName:"a"},"xspreadsheet")," demo")," includes a sample script with the\n",(0,o.kt)("inlineCode",{parentName:"p"},"stox")," function for converting from a workbook to x-spreadsheet data object.\n",(0,o.kt)("a",{parentName:"p",href:"https://oss.sheetjs.com/sheetjs/x-spreadsheet"},"https://oss.sheetjs.com/sheetjs/x-spreadsheet")," is a live demo."),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Previewing data in a React data grid")," (click to show)"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://npm.im/react-data-grid"},(0,o.kt)("inlineCode",{parentName:"a"},"react-data-grid"))," is a data grid tailored for\nreact.  It expects two properties: ",(0,o.kt)("inlineCode",{parentName:"p"},"rows")," of data objects and ",(0,o.kt)("inlineCode",{parentName:"p"},"columns")," which\ndescribe the columns.  For the purposes of massaging the data to fit the react\ndata grid API it is easiest to start from an array of arrays."),(0,o.kt)("p",null,"This demo starts by fetching a remote file and using ",(0,o.kt)("inlineCode",{parentName:"p"},"XLSX.read")," to extract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { useEffect, useState } from "react";\nimport DataGrid from "react-data-grid";\nimport { read, utils } from "xlsx";\n\nconst url = "https://oss.sheetjs.com/test_files/RkNumber.xls";\n\nexport default function App() {\n  const [columns, setColumns] = useState([]);\n  const [rows, setRows] = useState([]);\n  useEffect(() => {(async () => {\n    const wb = read(await (await fetch(url)).arrayBuffer(), { WTF: 1 });\n\n    /* use sheet_to_json with header: 1 to generate an array of arrays */\n    const data = utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]], { header: 1 });\n\n    /* see react-data-grid docs to understand the shape of the expected data */\n    setColumns(data[0].map((r) => ({ key: r, name: r })));\n    setRows(data.slice(1).map((r) => r.reduce((acc, x, i) => {\n      acc[data[0][i]] = x;\n      return acc;\n    }, {})));\n  })(); });\n\n  return <DataGrid columns={columns} rows={rows} />;\n}\n'))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Previewing data in a VueJS data grid")," (click to show)"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/linmasahiro/vue3-table-lite"},(0,o.kt)("inlineCode",{parentName:"a"},"vue3-table-lite"))," is a simple\nVueJS 3 data table.  It is featured ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SheetJS/SheetJS/tree/master/demos/vue/modify/"},"in the VueJS demo"),".")),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Populating a database (SQL or no-SQL)")," (click to show)"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SheetJS/SheetJS/tree/master/demos/database/"},(0,o.kt)("inlineCode",{parentName:"a"},"database")," demo")," includes examples of working with\ndatabases and query results.")),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Numerical Computations with TensorFlow.js")," (click to show)"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@tensorflow/tfjs")," and other libraries expect data in simple arrays, well-suited\nfor worksheets where each column is a data vector.  That is the transpose of how\nmost people use spreadsheets, where each row is a vector."),(0,o.kt)("p",null,"A single ",(0,o.kt)("inlineCode",{parentName:"p"},"Array#map")," can pull individual named rows from ",(0,o.kt)("inlineCode",{parentName:"p"},"sheet_to_json")," export:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const XLSX = require("xlsx");\nconst tf = require(\'@tensorflow/tfjs\');\n\nconst key = "age"; // this is the field we want to pull\nconst ages = XLSX.utils.sheet_to_json(worksheet).map(r => r[key]);\nconst tf_data = tf.tensor1d(ages);\n')),(0,o.kt)("p",null,"All fields can be processed at once using a transpose of the 2D tensor generated\nwith the ",(0,o.kt)("inlineCode",{parentName:"p"},"sheet_to_json")," export with ",(0,o.kt)("inlineCode",{parentName:"p"},"header: 1"),". The first row, if it contains\nheader labels, should be removed with a slice:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const XLSX = require("xlsx");\nconst tf = require(\'@tensorflow/tfjs\');\n\n/* array of arrays of the data starting on the second row */\nconst aoa = XLSX.utils.sheet_to_json(worksheet, {header: 1}).slice(1);\n/* dataset in the "correct orientation" */\nconst tf_dataset = tf.tensor2d(aoa).transpose();\n/* pull out each dataset with a slice */\nconst tf_field0 = tf_dataset.slice([0,0], [1,tensor.shape[1]]).flatten();\nconst tf_field1 = tf_dataset.slice([1,0], [1,tensor.shape[1]]).flatten();\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SheetJS/SheetJS/tree/master/demos/array/"},(0,o.kt)("inlineCode",{parentName:"a"},"array")," demo")," shows a complete example.")),(0,o.kt)("h3",{id:"generating-html-tables"},"Generating HTML Tables"),(0,o.kt)("h4",{id:"api-2"},"API"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Generate HTML Table from Worksheet")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var html = XLSX.utils.sheet_to_html(worksheet);\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"sheet_to_html")," utility function generates HTML code based on the worksheet\ndata.  Each cell in the worksheet is mapped to a ",(0,o.kt)("inlineCode",{parentName:"p"},"<TD>")," element.  Merged cells\nin the worksheet are serialized by setting ",(0,o.kt)("inlineCode",{parentName:"p"},"colspan")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"rowspan")," attributes."),(0,o.kt)("h4",{id:"examples-2"},"Examples"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"sheet_to_html")," utility function generates HTML code that can be added to\nany DOM element by setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"innerHTML"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'var container = document.getElementById("tavolo");\ncontainer.innerHTML = XLSX.utils.sheet_to_html(worksheet);\n')),(0,o.kt)("p",null,"Combining with ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch"),", constructing a site from a workbook is straightforward:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Vanilla JS + HTML fetch workbook and generate table previews")," (click to show)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<body>\n  <style>TABLE { border-collapse: collapse; } TD { border: 1px solid; }</style>\n  <div id="tavolo"></div>\n  <script src="https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"><\/script>\n  <script type="text/javascript">\n(async() => {\n  /* fetch and parse workbook -- see the fetch example for details */\n  const workbook = XLSX.read(await (await fetch("sheetjs.xlsx")).arrayBuffer());\n\n  let output = [];\n  /* loop through the worksheet names in order */\n  workbook.SheetNames.forEach(name => {\n\n    /* generate HTML from the corresponding worksheets */\n    const worksheet = workbook.Sheets[name];\n    const html = XLSX.utils.sheet_to_html(worksheet);\n\n    /* add a header with the title name followed by the table */\n    output.push(`<H3>${name}</H3>${html}`);\n  });\n  /* write to the DOM at the end */\n  tavolo.innerHTML = output.join("\\n");\n})();\n  <\/script>\n</body>\n'))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"React fetch workbook and generate HTML table previews")," (click to show)"),(0,o.kt)("p",null,"It is generally recommended to use a React-friendly workflow, but it is possible\nto generate HTML and use it in React with ",(0,o.kt)("inlineCode",{parentName:"p"},"dangerouslySetInnerHTML"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'function Tabeller(props) {\n  /* the workbook object is the state */\n  const [workbook, setWorkbook] = React.useState(XLSX.utils.book_new());\n\n  /* fetch and update the workbook with an effect */\n  React.useEffect(() => { (async() => {\n    /* fetch and parse workbook -- see the fetch example for details */\n    const wb = XLSX.read(await (await fetch("sheetjs.xlsx")).arrayBuffer());\n    setWorkbook(wb);\n  })(); });\n\n  return workbook.SheetNames.map(name => (<>\n    <h3>name</h3>\n    <div dangerouslySetInnerHTML={{\n      /* this __html mantra is needed to set the inner HTML */\n      __html: XLSX.utils.sheet_to_html(workbook.Sheets[name])\n    }} />\n  </>));\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SheetJS/SheetJS/tree/master/demos/react"},(0,o.kt)("inlineCode",{parentName:"a"},"react")," demo")," includes more React examples.")),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"VueJS fetch workbook and generate HTML table previews")," (click to show)"),(0,o.kt)("p",null,"It is generally recommended to use a VueJS-friendly workflow, but it is possible\nto generate HTML and use it in VueJS with the ",(0,o.kt)("inlineCode",{parentName:"p"},"v-html")," directive:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import { read, utils } from \'xlsx\';\nimport { reactive } from \'vue\';\n\nconst S5SComponent = {\n  mounted() { (async() => {\n    /* fetch and parse workbook -- see the fetch example for details */\n    const workbook = read(await (await fetch("sheetjs.xlsx")).arrayBuffer());\n    /* loop through the worksheet names in order */\n    workbook.SheetNames.forEach(name => {\n      /* generate HTML from the corresponding worksheets */\n      const html = utils.sheet_to_html(workbook.Sheets[name]);\n      /* add to state */\n      this.wb.wb.push({ name, html });\n    });\n  })(); },\n  /* this state mantra is required for array updates to work */\n  setup() { return { wb: reactive({ wb: [] }) }; },\n  template: `\n  <div v-for="ws in wb.wb" :key="ws.name">\n    <h3>{{ ws.name }}</h3>\n    <div v-html="ws.html"></div>\n  </div>`\n};\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SheetJS/SheetJS/tree/master/demos/vue"},(0,o.kt)("inlineCode",{parentName:"a"},"vuejs")," demo")," includes more React examples.")),(0,o.kt)("h3",{id:"generating-single-worksheet-snapshots"},"Generating Single-Worksheet Snapshots"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"sheet_to_*")," functions accept a worksheet object."),(0,o.kt)("h4",{id:"api-3"},"API"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Generate a CSV from a single worksheet")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var csv = XLSX.utils.sheet_to_csv(worksheet, opts);\n")),(0,o.kt)("p",null,'This snapshot is designed to replicate the "CSV UTF8 (',(0,o.kt)("inlineCode",{parentName:"p"},".csv"),')" output type.\n',(0,o.kt)("a",{parentName:"p",href:"../api/utilities#delimiter-separated-output"},'"Delimiter-Separated Output"')," describes the\nfunction and the optional ",(0,o.kt)("inlineCode",{parentName:"p"},"opts")," argument in more detail."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},'Generate "Text" from a single worksheet')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var txt = XLSX.utils.sheet_to_txt(worksheet, opts);\n")),(0,o.kt)("p",null,'This snapshot is designed to replicate the "UTF16 Text (',(0,o.kt)("inlineCode",{parentName:"p"},".txt"),')" output type.\n',(0,o.kt)("a",{parentName:"p",href:"../api/utilities#delimiter-separated-output"},'"Delimiter-Separated Output"')," describes the\nfunction and the optional ",(0,o.kt)("inlineCode",{parentName:"p"},"opts")," argument in more detail."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Generate a list of formulae from a single worksheet")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var fmla = XLSX.utils.sheet_to_formulae(worksheet);\n")),(0,o.kt)("p",null,"This snapshot generates an array of entries representing the embedded formulae.\nArray formulae are rendered in the form ",(0,o.kt)("inlineCode",{parentName:"p"},"range=formula")," while plain cells are\nrendered in the form ",(0,o.kt)("inlineCode",{parentName:"p"},"cell=formula or value"),".  String literals are prefixed with\nan apostrophe ",(0,o.kt)("inlineCode",{parentName:"p"},"'"),", consistent with Excel's formula bar display."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"../api/utilities#formulae-output"},'"Formulae Output"')," describes the function in more detail."))}h.isMDXComponent=!0}}]);