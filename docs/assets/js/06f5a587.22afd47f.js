"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[796],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(n),u=r,h=c["".concat(s,".").concat(u)]||c[u]||m[u]||l;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6906:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const l={title:"Data Grids and Tables"},o=void 0,i={unversionedId:"demos/grid",id:"demos/grid",title:"Data Grids and Tables",description:"Various JavaScript UI components provide a more interactive editing experience.",source:"@site/docs/03-demos/04-grid.md",sourceDirName:"03-demos",slug:"/demos/grid",permalink:"/docs/demos/grid",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Data Grids and Tables"},sidebar:"tutorialSidebar",previous:{title:"Desktop Applications",permalink:"/docs/demos/desktop"},next:{title:"Databases and SQL",permalink:"/docs/demos/database"}},s={},p=[{value:"Managed Lifecycle",id:"managed-lifecycle",level:2},{value:"x-spreadsheet",id:"x-spreadsheet",level:3},{value:"Canvas DataGrid",id:"canvas-datagrid",level:3},{value:"Tabulator",id:"tabulator",level:3},{value:"Angular UI Grid",id:"angular-ui-grid",level:3},{value:"Framework Lifecycle",id:"framework-lifecycle",level:2},{value:"React Data Grid",id:"react-data-grid",level:3},{value:"Rows and Columns state",id:"rows-and-columns-state",level:4},{value:"RDG Demo",id:"rdg-demo",level:4},{value:"Material UI Data Grid",id:"material-ui-data-grid",level:3},{value:"MUIDG Demo",id:"muidg-demo",level:4},{value:"vue3-table-lite",id:"vue3-table-lite",level:3},{value:"Rows and Columns Bindings",id:"rows-and-columns-bindings",level:4},{value:"VueJS Demo",id:"vuejs-demo",level:4},{value:"Standard HTML Tables",id:"standard-html-tables",level:2},{value:"Fixed Tables",id:"fixed-tables",level:3},{value:"React",id:"react",level:3},{value:"Material UI Table",id:"material-ui-table",level:3}],d={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Various JavaScript UI components provide a more interactive editing experience.\nMost are able to interchange with arrays of arrays or arrays of data objects.\nThis demo focuses on a few open source data grids."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://sheetjs.com/pro"},"SheetJS Pro")," offers additional features like styling\nand images. The UI tools typically support many of these advanced features."),(0,r.kt)("p",{parentName:"admonition"},"To eliminate any confusion, the live examples linked from this page demonstrate\nSheetJS Community Edition data interchange.")),(0,r.kt)("h2",{id:"managed-lifecycle"},"Managed Lifecycle"),(0,r.kt)("p",null,"Many UI components tend to manage the entire lifecycle, providing methods to\nimport and export data."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"sheet_to_json")," utility function generates arrays of objects, which is\nsuitable for a number of libraries.  When more advanced shapes are needed,\nit is easier to process an array of arrays."),(0,r.kt)("h3",{id:"x-spreadsheet"},"x-spreadsheet"),(0,r.kt)("p",null,"With a familiar UI, ",(0,r.kt)("a",{parentName:"p",href:"https://myliang.github.io/x-spreadsheet/"},(0,r.kt)("inlineCode",{parentName:"a"},"x-spreadsheet")),"\nis an excellent choice for developers looking for a modern editor."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"pathname:///xspreadsheet/"},"Click here for a live integration demo.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Full Exposition")," (click to show)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Obtaining the Library")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"x-data-spreadsheet")," NodeJS packages include a minified script that can be\ndirectly inserted as a script tag.  The unpkg CDN also serves this script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- x-spreadsheet stylesheet --\x3e\n<link rel="stylesheet" href="https://unpkg.com/x-data-spreadsheet/dist/xspreadsheet.css"/>\n\x3c!-- x-spreadsheet library --\x3e\n<script src="https://unpkg.com/x-data-spreadsheet/dist/xspreadsheet.js"><\/script>\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Previewing and Editing Data")),(0,r.kt)("p",null,"The HTML document needs a container element:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<div id="gridctr"></div>\n')),(0,r.kt)("p",null,"Grid initialization is a one-liner:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'var grid = x_spreadsheet(document.getElementById("gridctr"));\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"x-spreadsheet")," handles the entire edit cycle. No intervention is necessary."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"SheetJS and x-spreadsheet")),(0,r.kt)("p",null,"The integration library can be downloaded from the SheetJS CDN:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://cdn.sheetjs.com/xspreadsheet/xlsxspread.js"},"Development Use")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://cdn.sheetjs.com/xspreadsheet/xlsxspread.min.js"},"Production Use")),(0,r.kt)("p",null,"When used in a browser tag, it exposes two functions: ",(0,r.kt)("inlineCode",{parentName:"p"},"xtos")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"stox"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stox(worksheet)")," returns a data structure suitable for ",(0,r.kt)("inlineCode",{parentName:"li"},"grid.loadData")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"xtos(data)")," accepts the result of ",(0,r.kt)("inlineCode",{parentName:"li"},"grid.getData")," and generates a workbook")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Reading Data")),(0,r.kt)("p",null,"The following snippet fetches a spreadsheet and loads the grid:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'(async() => {\n  const ab = await (await fetch("https://sheetjs.com/pres.numbers")).arrayBuffer();\n  grid.loadData(stox(XLSX.read(ab)));\n})();\n')),(0,r.kt)("p",null,"The same pattern can be used in file input elements and other data sources."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Writing Data")),(0,r.kt)("p",null,"The following snippet exports the grid data to a file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/* build workbook from the grid data */\nXLSX.writeFile(xtos(grid.getData()), "SheetJS.xlsx");\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Additional Features")),(0,r.kt)("p",null,"This demo barely scratches the surface.  The underlying grid component includes\nmany additional features that work with ",(0,r.kt)("a",{parentName:"p",href:"https://sheetjs.com/pro"},"SheetJS Pro"),".")),(0,r.kt)("h3",{id:"canvas-datagrid"},"Canvas DataGrid"),(0,r.kt)("p",null,"After extensive testing, ",(0,r.kt)("a",{parentName:"p",href:"https://canvas-datagrid.js.org/demo.html"},(0,r.kt)("inlineCode",{parentName:"a"},"canvas-datagrid")),"\nstood out as a very high-performance grid with an incredibly simple API."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"pathname:///cdg/index.html"},"Click here for a live integration demo.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Full Exposition")," (click to show)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Obtaining the Library")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"canvas-datagrid")," NodeJS packages include a minified script that can be\ndirectly inserted as a script tag.  The unpkg CDN also serves this script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<script src="https://unpkg.com/canvas-datagrid/dist/canvas-datagrid.js"><\/script>\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Previewing Data")),(0,r.kt)("p",null,"The HTML document needs a container element:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<div id="gridctr"></div>\n')),(0,r.kt)("p",null,"Grid initialization is a one-liner:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"var grid = canvasDatagrid({\n  parentNode: document.getElementById('gridctr'),\n  data: []\n});\n")),(0,r.kt)("p",null,"For large data sets, it's necessary to constrain the size of the grid."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"grid.style.height = '100%';\ngrid.style.width = '100%';\n")),(0,r.kt)("p",null,"Once the workbook is read and the worksheet is selected, assigning the data\nvariable automatically updates the view:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"grid.data = XLSX.utils.sheet_to_json(ws, {header:1});\n")),(0,r.kt)("p",null,"This demo previews the first worksheet."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Editing")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"canvas-datagrid")," handles the entire edit cycle.  No intervention is necessary."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Saving Data")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"grid.data")," is immediately readable and can be converted back to a worksheet.\nSome versions return an array-like object without the length, so a little bit of\npreparation may be needed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/* converts an array of array-like objects into an array of arrays */\nfunction prep(arr) {\n  var out = [];\n  for(var i = 0; i < arr.length; ++i) {\n    if(!arr[i]) continue;\n    if(Array.isArray(arr[i])) { out[i] = arr[i]; continue };\n    var o = new Array();\n    Object.keys(arr[i]).forEach(function(k) { o[+k] = arr[i][k] });\n    out[i] = o;\n  }\n  return out;\n}\n\n/* build worksheet from the grid data */\nvar ws = XLSX.utils.aoa_to_sheet(prep(grid.data));\n\n/* build up workbook */\nvar wb = XLSX.utils.book_new();\nXLSX.utils.book_append_sheet(wb, ws, 'SheetJS');\n\n/* generate download */\nXLSX.writeFile(wb, \"SheetJS.xlsx\");\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Additional Features")),(0,r.kt)("p",null,"This demo barely scratches the surface.  The underlying grid component includes\nmany additional features including massive data streaming, sorting and styling.")),(0,r.kt)("h3",{id:"tabulator"},"Tabulator"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://tabulator.info/docs/5.3/download#xlsx"},"Tabulator")," includes deep support\nthrough a special Export button.  It handles the SheetJS operations internally."),(0,r.kt)("h3",{id:"angular-ui-grid"},"Angular UI Grid"),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"This UI Grid is for AngularJS, not the modern Angular.  New projects should not\nuse AngularJS.  This demo is included for legacy applications."),(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("a",{parentName:"p",href:"./legacy#angularjs"},"AngularJS demo")," covers more general strategies.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"pathname:///angularjs/ui-grid.html"},"Click here for a live integration demo.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Notes")," (click to show)"),(0,r.kt)("p",null,"The library does not provide any way to modify the import button, so the demo\nincludes a simple directive for a File Input HTML element.  It also includes a\nsample service for export which adds an item to the export menu."),(0,r.kt)("p",null,"The demo ",(0,r.kt)("inlineCode",{parentName:"p"},"SheetJSImportDirective")," follows the prescription from the README for\nFile input controls using ",(0,r.kt)("inlineCode",{parentName:"p"},"readAsArrayBuffer"),", converting to a suitable\nrepresentation and updating the scope."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SheetJSExportService")," exposes export functions for ",(0,r.kt)("inlineCode",{parentName:"p"},"XLSB")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"XLSX"),".  Other\nfile formats can be exported by changing the ",(0,r.kt)("inlineCode",{parentName:"p"},"bookType")," variable.  It grabs\nvalues from the grid, builds an array of arrays, generates a workbook and forces\na download.  By setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"filename")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"sheetname")," options in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ui-grid"),"\noptions, the output can be controlled.")),(0,r.kt)("h2",{id:"framework-lifecycle"},"Framework Lifecycle"),(0,r.kt)("p",null,"For modern frameworks like React, data grids tend to follow the framework state\nand idioms.  The same ",(0,r.kt)("inlineCode",{parentName:"p"},"sheet_to_json")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"json_to_sheet")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"aoa_to_sheet"),"\nmethods are used, but they pull from a shared state object that can be mutated\nwith other buttons and components on the page."),(0,r.kt)("h3",{id:"react-data-grid"},"React Data Grid"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This demo was tested against ",(0,r.kt)("inlineCode",{parentName:"p"},"react-data-grid 7.0.0-beta.15"),", React 18.2.0,\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"create-react-app")," 5.0.1 on 2022 August 16.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/adazzle/react-data-grid"},(0,r.kt)("inlineCode",{parentName:"a"},"react-data-grid"))," is a data grid\nbuilt for React. ",(0,r.kt)("inlineCode",{parentName:"p"},"react-data-grid")," powers ",(0,r.kt)("a",{parentName:"p",href:"https://sheet.js.org/"},"https://sheet.js.org/")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#rdg-demo"},"A complete example is included below.")),(0,r.kt)("h4",{id:"rows-and-columns-state"},"Rows and Columns state"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"react-data-grid")," state consists of an Array of column metadata and an Array of\nrow objects. Typically both are defined in state:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'import DataGrid, { Column } from "react-data-grid";\n\nexport default function App() {\n  const [rows, setRows] = useState([]);\n  const [columns, setColumns] = useState([]);\n\n  return ( <DataGrid columns={columns} rows={rows} onRowsChange={setRows} /> );\n}\n')),(0,r.kt)("p",null,"The most generic data representation is an array of arrays. To sate the grid,\ncolumns must be objects whose ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," property is the index converted to string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { WorkSheet, utils } from \'xlsx\';\nimport { textEditor, Column } from "react-data-grid";\n\ntype Row = any[];\ntype AOAColumn = Column<Row>;\ntype RowCol = { rows: Row[]; columns: AOAColumn[]; };\n\nfunction ws_to_rdg(ws: WorkSheet): RowCol {\n  /* create an array of arrays */\n  const rows = utils.sheet_to_json(ws, { header: 1 });\n\n  /* create column array */\n  const range = utils.decode_range(ws["!ref"]||"A1");\n  const columns = Array.from({ length: range.e.c + 1 }, (_, i) => ({\n    key: String(i), // RDG will access row["0"], row["1"], etc\n    name: utils.encode_col(i), // the column labels will be A, B, etc\n    editor: textEditor // enable cell editing\n  }));\n\n  return { rows, columns }; // these can be fed to setRows / setColumns\n}\n')),(0,r.kt)("p",null,"In the other direction, a worksheet can be generated with ",(0,r.kt)("inlineCode",{parentName:"p"},"aoa_to_sheet"),":"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"When the demo was last refreshed, row array objects were preserved.  This was\nnot the case in a later release.  The row arrays must be re-created."),(0,r.kt)("p",{parentName:"admonition"},"The snippet defines a ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayify")," function that creates arrays if necessary.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { WorkSheet, utils } from 'xlsx';\n\ntype Row = any[];\n\n// highlight-start\nfunction arrayify(rows: any[]): Row[] {\n  return rows.map(row => {\n    var length = Object.keys(row).length;\n    for(; length > 0; --length) if(row[length-1] != null) break;\n    return Array.from({length, ...row});\n  });\n}\n// highlight-end\n\nfunction rdg_to_ws(rows: Row[]): WorkSheet {\n  return utils.aoa_to_sheet(arrayify(rows));\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { WorkSheet, utils } from 'xlsx';\n\ntype Row = any[];\n\nfunction rdg_to_ws(rows: Row[]): WorkSheet {\n  return utils.aoa_to_sheet(rows);\n}\n")),(0,r.kt)("h4",{id:"rdg-demo"},"RDG Demo"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Complete Example")," (click to show)"),(0,r.kt)("p",null,"1) Create a new TypeScript ",(0,r.kt)("inlineCode",{parentName:"p"},"create-react-app")," app:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-react-app sheetjs-cra --template typescript\ncd sheetjs-cra\n")),(0,r.kt)("p",null,"2) Install dependencies:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -S https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz react-data-grid\n")),(0,r.kt)("p",null,"3) Download ",(0,r.kt)("a",{parentName:"p",href:"pathname:///rdg/App.tsx"},(0,r.kt)("inlineCode",{parentName:"a"},"App.tsx"))," and replace ",(0,r.kt)("inlineCode",{parentName:"p"},"src/App.tsx"),"."),(0,r.kt)("p",null,"4) run ",(0,r.kt)("inlineCode",{parentName:"p"},"npm start"),".  When you load the page in the browser, it will attempt to\nfetch ",(0,r.kt)("a",{parentName:"p",href:"https://sheetjs.com/pres.numbers"},"https://sheetjs.com/pres.numbers")," and load the data."),(0,r.kt)("p",null,"The following screenshot was taken from the demo:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"/rdg/rdg1.png",alt:"react-data-grid screenshot"}))),(0,r.kt)("h3",{id:"material-ui-data-grid"},"Material UI Data Grid"),(0,r.kt)("p",null,"Material UI Data Grid and React Data Grid share many state patterns and idioms.\nDifferences from ",(0,r.kt)("a",{parentName:"p",href:"#react-data-grid"},'"React Data Grid"')," will be highlighted."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#muidg-demo"},"A complete example is included below.")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Despite presenting an editable UI, Material UI Data Grid version ",(0,r.kt)("inlineCode",{parentName:"p"},"5.17.0")," does\nnot update the state when values are changed. The demo uses the React Data Grid\neditable structure in the hopes that a future version does support state."),(0,r.kt)("p",{parentName:"admonition"},'Until the issues are resolved, "React Data Grid" is an excellent choice.')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Rows and Columns State")),(0,r.kt)("p",null,"The analogue of ",(0,r.kt)("inlineCode",{parentName:"p"},"Column")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"GridColDef"),".  The simple structure looks like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// highlight-next-line\nimport { DataGrid, GridColDef } from "@mui/x-data-grid";\n\nexport default function App() {\n  const [rows, setRows] = useState([]);\n  const [columns, setColumns] = useState([]);\n\n  return ( <DataGrid columns={columns} rows={rows} onRowsChange={setRows} /> );\n}\n')),(0,r.kt)("p",null,"The most generic data representation is an array of arrays. To sate the grid,\ncolumns must be objects whose ",(0,r.kt)("inlineCode",{parentName:"p"},"field")," property is the index converted to string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { WorkSheet, utils } from \'xlsx\';\n// highlight-next-line\nimport { GridColDef } from "@mui/x-data-grid";\n\ntype Row = any[];\ntype RowCol = { rows: Row[]; columns: GridColDef[]; };\n\nfunction ws_to_muidg(ws: WorkSheet): RowCol {\n  /* create an array of arrays */\n  const rows = utils.sheet_to_json(ws, { header: 1 });\n\n  /* create column array */\n  const range = utils.decode_range(ws["!ref"]||"A1");\n  const columns = Array.from({ length: range.e.c + 1 }, (_, i) => ({\n    // highlight-start\n    field: String(i), // MUIDG will access row["0"], row["1"], etc\n    headerName: utils.encode_col(i), // the column labels will be A, B, etc\n    editable: true // enable cell editing\n    // highlight-end\n  }));\n\n  return { rows, columns }; // these can be fed to setRows / setColumns\n}\n')),(0,r.kt)("p",null,"In the other direction, a worksheet can be generated with ",(0,r.kt)("inlineCode",{parentName:"p"},"aoa_to_sheet"),":"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"x-data-grid")," does not properly preserve row array objects, so the row arrays\nmust be re-created.  The snippet defines a ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayify")," function.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { WorkSheet, utils } from 'xlsx';\n\ntype Row = any[];\n\n// highlight-start\nfunction arrayify(rows: any[]): Row[] {\n  return rows.map(row => {\n    var length = Object.keys(row).length;\n    for(; length > 0; --length) if(row[length-1] != null) break;\n    return Array.from({length, ...row});\n  });\n}\n// highlight-end\n\nfunction muidg_to_ws(rows: Row[]): WorkSheet {\n  return utils.aoa_to_sheet(arrayify(rows));\n}\n")),(0,r.kt)("h4",{id:"muidg-demo"},"MUIDG Demo"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Complete Example")," (click to show)"),(0,r.kt)("p",null,"0) ",(0,r.kt)("a",{parentName:"p",href:"#rdg-demo"},"Follow the React Data Grid demo")," and generate the sample app."),(0,r.kt)("p",null,"1) Install dependencies:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -S https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz @mui/x-data-grid @emotion/react @emotion/styled\n")),(0,r.kt)("p",null,"2) Download ",(0,r.kt)("a",{parentName:"p",href:"pathname:///muidg/App.tsx"},(0,r.kt)("inlineCode",{parentName:"a"},"App.tsx"))," and replace ",(0,r.kt)("inlineCode",{parentName:"p"},"src/App.tsx"),"."),(0,r.kt)("p",null,"3) run ",(0,r.kt)("inlineCode",{parentName:"p"},"npm start"),".  When you load the page in the browser, it will attempt to\nfetch ",(0,r.kt)("a",{parentName:"p",href:"https://sheetjs.com/pres.numbers"},"https://sheetjs.com/pres.numbers")," and load the data.")),(0,r.kt)("h3",{id:"vue3-table-lite"},"vue3-table-lite"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This demo was tested against ",(0,r.kt)("inlineCode",{parentName:"p"},"vue3-table-lite 1.2.4"),", VueJS ",(0,r.kt)("inlineCode",{parentName:"p"},"3.2.37"),", ViteJS\n3.0.7, and ",(0,r.kt)("inlineCode",{parentName:"p"},"@vitejs/plugin-vue")," 3.0.3 on 2022 August 18")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://vue3-lite-table.vercel.app/"},(0,r.kt)("inlineCode",{parentName:"a"},"vue3-table-lite"))," is a VueJS data grid."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#vuejs-demo"},"A complete example is included below.")),(0,r.kt)("h4",{id:"rows-and-columns-bindings"},"Rows and Columns Bindings"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"vue3-table-lite")," presents two attribute bindings: an array of column metadata\n(",(0,r.kt)("inlineCode",{parentName:"p"},"columns"),") and an array of objects representing the displayed data (",(0,r.kt)("inlineCode",{parentName:"p"},"rows"),").\nTypically both are ",(0,r.kt)("inlineCode",{parentName:"p"},"ref")," objects:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<script setup lang="ts">\nimport { ref } from "vue";\nimport VueTableLite from "vue3-table-lite/ts";\n\n/* rows */\ntype Row = any[];\nconst rows = ref<Row[]>([]);\n\n/* columns */\ntype Column = { field: string; label: string; };\nconst columns = ref<Column[]>([]);\n<\/script>\n\n<template>\n  <vue-table-lite :columns="columns" :rows="rows"></vue-table-lite>\n</template>\n')),(0,r.kt)("p",null,"These can be mutated through the ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," property in VueJS lifecycle methods:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { onMounted } from "vue";\nonMounted(() => {\n  columns.value = [ { field: "name", label: "Names" }];\n  rows.value = [ { name: "SheetJS" }, { name: "VueJS" } ];\n})\n')),(0,r.kt)("p",null,"The most generic data representation is an array of arrays. To sate the grid,\ncolumns must be objects whose ",(0,r.kt)("inlineCode",{parentName:"p"},"field")," property is the index converted to string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { ref } from "vue";\nimport { utils } from \'xlsx\';\n\n/* generate row and column data */\nfunction ws_to_vte(ws) {\n  /* create an array of arrays */\n  const rows = utils.sheet_to_json(ws, { header: 1 });\n\n  /* create column array */\n  const range = utils.decode_range(ws["!ref"]||"A1");\n  const columns = Array.from({ length: range.e.c + 1 }, (_, i) => ({\n    field: String(i), // VTE will access row["0"], row["1"], etc\n    label: utils.encode_col(i), // the column labels will be A, B, etc\n  }));\n\n  return { rows, columns };\n}\n\nconst rows = ref([]);\nconst columns = ref([]);\n\n/* update refs */\nfunction update_refs(ws) {\n  const data = ws_to_vte(ws);\n  rows.value = data.rows;\n  columns.value = data.columns;\n}\n')),(0,r.kt)("p",null,"In the other direction, a worksheet can be generated with ",(0,r.kt)("inlineCode",{parentName:"p"},"aoa_to_sheet"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { utils } from 'xlsx';\n\nconst rows = ref([]);\n\nfunction vte_to_ws(rows) {\n  return utils.aoa_to_sheet(rows.value);\n}\n")),(0,r.kt)("h4",{id:"vuejs-demo"},"VueJS Demo"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Complete Example")," (click to show)"),(0,r.kt)("p",null,"1) Create a new ViteJS App using the VueJS + TypeScript template:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm create vite@latest sheetjs-vue -- --template vue-ts\ncd sheetjs-vue\n")),(0,r.kt)("p",null,"2) Install dependencies:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i\nnpm i -S https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz vue3-table-lite\n")),(0,r.kt)("p",null,"3) Download ",(0,r.kt)("a",{parentName:"p",href:"pathname:///vtl/App.vue"},(0,r.kt)("inlineCode",{parentName:"a"},"src/App.vue"))," and replace the contents:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd src\nrm -f App.vue\ncurl -LO https://docs.sheetjs.com/vtl/App.vue\ncd ..\n")),(0,r.kt)("p",null,"4) run ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run dev"),".  When you load the page in the browser, it will try to\nfetch ",(0,r.kt)("a",{parentName:"p",href:"https://sheetjs.com/pres.numbers"},"https://sheetjs.com/pres.numbers")," and load the data.")),(0,r.kt)("h2",{id:"standard-html-tables"},"Standard HTML Tables"),(0,r.kt)("p",null,"Many UI components present styled HTML tables.  Data can be extracted from the\ntables given a reference to the underlying TABLE element:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function export_html_table(table) {\n  const wb = XLSX.utils.table_to_book(table);\n  XLSX.writeFile(wb, "HTMLTable.xlsx");\n} // yes, it\'s that easy!\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"SheetJS CE is focused on data preservation and will extract values from tables."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://sheetjs.com/pro"},"SheetJS Pro")," offers styling support when reading from\nTABLE elements and when writing to XLSX and other spreadsheet formats.")),(0,r.kt)("h3",{id:"fixed-tables"},"Fixed Tables"),(0,r.kt)("p",null,"When the page has a raw HTML table, the easiest solution is to attach an ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<table id="xport"><tr><td>SheetJS</td></tr></table>\n<script src="https://cdn.sheetjs.com/xlsx-latest/package/dist/shim.min.js"><\/script>\n<script src="https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"><\/script>\n<script>\n/* as long as this script appears after the table, it will be visible */\nvar tbl = document.getElementById("xport");\nconst wb = XLSX.utils.table_to_book(tbl);\nXLSX.writeFile(wb, "HTMLTable.xlsx");\n<\/script>\n')),(0,r.kt)("p",null,"When programmatically constructing the table in the browser, retain a reference:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'var tbl = document.createElement("TABLE");\ntbl.insertRow(0).insertCell(0).innerHTML = "SheetJS";\ndocument.body.appendChild(tbl);\nconst wb = XLSX.utils.table_to_book(tbl);\nXLSX.writeFile(wb, "HTMLFlicker.xlsx");\ndocument.body.removeChild(tbl);\n')),(0,r.kt)("h3",{id:"react"},"React"),(0,r.kt)("p",null,"The typical solution is to attach a Ref to the table element.  The ",(0,r.kt)("inlineCode",{parentName:"p"},"current"),"\nproperty will be a live reference which plays nice with ",(0,r.kt)("inlineCode",{parentName:"p"},"table_to_book"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'// highlight-next-line\nimport { useRef } from "react";\n\nexport default function ReactTable() {\n// highlight-next-line\n  const tbl = useRef(null);\n\n  return ( <>\n    <button onClick={() => {\n      // highlight-next-line\n      const wb = XLSX.utils.table_to_book(tbl.current);\n      XLSX.writeFile(wb, "ReactTable.xlsx");\n    }}>Export</button>\n    // highlight-next-line\n    <table ref={tbl}>\n    {/* ... TR and TD/TH elements ... */}\n    </table>\n  </>);\n}\n')),(0,r.kt)("h3",{id:"material-ui-table"},"Material UI Table"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Table")," component abstracts the ",(0,r.kt)("inlineCode",{parentName:"p"},"<table>")," element in HTML."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import TableContainer from '@mui/material/TableContainer';\nimport Table from '@mui/material/Table';\n// ...\n// highlight-next-line\nimport { useRef } from \"react\";\n\n// ...\nexport default function BasicTable() {\n// highlight-next-line\n  const tbl = useRef<HTMLTableElement>(null);\n  return (<>\n    <button onClick={() => {\n      const wb = utils.table_to_book(tbl.current);\n      writeFileXLSX(wb, \"SheetJSMaterialUI.xlsx\");\n    }}>Export</button>\n    <TableContainer {...}>\n// highlight-next-line\n      <Table {...} ref={tbl}>\n      {/* ... material ui table machinations ... */}\n      </Table>\n    </TableContainer>\n  <>);\n}\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Complete Example")," (click to show)"),(0,r.kt)("p",null,"1) Create a new TypeScript ",(0,r.kt)("inlineCode",{parentName:"p"},"create-react-app")," app:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-react-app sheetjs-mui --template typescript\ncd sheetjs-mui\n")),(0,r.kt)("p",null,"2) Install dependencies:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -S https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz @mui/material\n")),(0,r.kt)("p",null,"3) Replace ",(0,r.kt)("inlineCode",{parentName:"p"},"src/App.tsx")," with the following code. This is based on the official\nMaterial UI Table example.  Differences are highlighted."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},"// highlight-start\nimport React, { useEffect, useState, useRef, ChangeEvent } from \"react\";\nimport { utils, writeFileXLSX } from 'xlsx';\n// highlight-end\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\n\nfunction createData(\n  name: string,\n  calories: number,\n  fat: number,\n  carbs: number,\n  protein: number,\n) {\n  return { name, calories, fat, carbs, protein };\n}\n\nconst rows = [\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  createData('Eclair', 262, 16.0, 24, 6.0),\n  createData('Cupcake', 305, 3.7, 67, 4.3),\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\n];\n\nexport default function BasicTable() {\n  // highlight-start\n  const tbl = useRef<HTMLTableElement>(null);\n  return ( <>\n    <button onClick={() => {\n      const wb = utils.table_to_book(tbl.current);\n      writeFileXLSX(wb, \"SheetJSMaterialUI.xlsx\");\n    }}>Export</button>\n    // highlight-end\n    <TableContainer component={Paper}>\n      // highlight-next-line\n      <Table sx={{ minWidth: 650 }} aria-label=\"simple table\" ref={tbl}>\n        <TableHead>\n          <TableRow>\n            <TableCell>Dessert (100g serving)</TableCell>\n            <TableCell align=\"right\">Calories</TableCell>\n            <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow\n              key={row.name}\n              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n            >\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell align=\"right\">{row.calories}</TableCell>\n              <TableCell align=\"right\">{row.fat}</TableCell>\n              <TableCell align=\"right\">{row.carbs}</TableCell>\n              <TableCell align=\"right\">{row.protein}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n    // highlight-next-line\n  </> );\n}\n")),(0,r.kt)("p",null,"4) run ",(0,r.kt)("inlineCode",{parentName:"p"},"npm start"),'.  Click the "Export" button and inspect the generated file.')))}m.isMDXComponent=!0}}]);